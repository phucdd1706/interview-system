{"version":3,"sources":["ui-component/extended/AnimateButton.tsx","views/pages/add-new-applicant-reference/legend/index.tsx","store/slices/applicant/applicantAsyncAction.ts","views/pages/add-new-applicant-reference/applicantInfo/layoutMapping.ts","views/pages/add-new-applicant-reference/applicantInfo/formInput.tsx","views/pages/add-new-applicant-reference/applicantInfo/applicantReferenceForm.tsx","views/pages/add-new-applicant-reference/useStylesHook/makeStyle.ts","views/pages/add-new-applicant-reference/questionList/questionTag.tsx","views/pages/add-new-applicant-reference/questionList/questionStack.tsx","views/pages/add-new-applicant-reference/questionList/index.tsx","views/pages/add-new-applicant-reference/index.tsx"],"names":["AnimateButton","React","forwardRef","ref","offset1","offset2","children","type","direction","offset","scale","useCycle","x","cycleX","y","cycleY","div","animate","rotate","transition","repeat","Infinity","repeatType","duration","repeatDelay","undefined","onHoverEnd","onHoverStart","hover","tap","whileHover","whileTap","defaultProps","useStyles","makeStyles","root","position","width","margin","padding","border","borderColor","borderRadius","legend","zIndex","height","background","left","transform","LegendWrapper","classes","Box","className","Typography","variant","component","getQuestionsThunk","createAsyncThunk","params","a","applicantAPI","language_id","rank_id","getInterviewQuestionThunk","thunkAPI","data","applyPosition","success","some","item","questions","base","length","focus","advanced","dispatch","setApplicantInfo","applicant","alertError","getInterviewDataThunk","id","applicantDataInit","name","age","email","phone","address","time","status","note","applicantInfo","candidate_question","interviewQuestions","map","element","question","candidate_id","questionStack","language","Object","keys","forEach","key","question_id","split","setInterviewData","personalDetail","label","render","required","FormInput","errors","handleChange","handleBlur","touched","values","readOnly","FormControl","fullWidth","error","Boolean","InputLabel","htmlFor","join","OutlinedInput","value","onChange","placeholder","FormHelperText","memo","ApplicantForm","interviewing","setFieldValue","handleSubmit","intl","useIntl","theme","useTheme","useDispatch","matchDownMD","useMediaQuery","breakpoints","down","useSelector","state","ranks","rank","isSubmitting","setIsSubmitting","axios","all","axiosServices","get","then","res","getLanguageListSuccess","getRanksListSuccess","getInterviewQuestion","every","rank_advanced_id","row","Stack","spacing","sx","paddingBottom","formatMessage","index","alignItems","flexGrow","Autocomplete","options","event","find","getOptionLabel","option","renderInput","TextField","Button","color","onClick","filter","positionIndex","minWidth","uuidv4","justifyContent","concat","marginTop","mt","md","sm","disableElevation","disabled","size","itemHovered","cursor","props","backgroundColor","QuestionTag","Paper","question_content","RadioGroup","e","handleAnswerStatus","Number","target","FormControlLabel","control","Radio","labelPlacement","QuestionStack","onClickAddButton","onClickDeleteButton","marginBottom","toUpperCase","QuestionList","questionList","useState","searchQuestion","useEffect","AddApplicantReference","useParams","navigate","useNavigate","activeItem","applicantInit","enableReinitialize","initialValues","validationSchema","Yup","shape","of","onSubmit","setSubmitting","candidateQuestions","axiosPut","process","axiosPost","noValidate","MainCard","title","TextareaAutosize","minRows","style"],"mappings":"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","file":"static/js/21.84333458.chunk.js","sourcesContent":["// THIRD-PARTY\r\nimport React, { Ref } from 'react';\r\nimport { motion, useCycle } from 'framer-motion';\r\n\r\ninterface ScaleProps {\r\n  hover: number | string | undefined;\r\n  tap: number | string | undefined;\r\n}\r\n\r\ninterface AnimateButtonProps {\r\n  children?: React.ReactNode;\r\n  type?: 'slide' | 'scale' | 'rotate';\r\n  direction?: 'up' | 'down' | 'left' | 'right';\r\n  offset?: number;\r\n  scale?: ScaleProps;\r\n}\r\n\r\nconst AnimateButton = React.forwardRef(({ children, type, direction, offset, scale }: AnimateButtonProps, ref: Ref<HTMLDivElement>) => {\r\n  let offset1;\r\n  let offset2;\r\n  switch (direction) {\r\n    case 'up':\r\n    case 'left':\r\n      offset1 = offset;\r\n      offset2 = 0;\r\n      break;\r\n    case 'right':\r\n    case 'down':\r\n    default:\r\n      offset1 = 0;\r\n      offset2 = offset;\r\n      break;\r\n  }\r\n\r\n  const [x, cycleX] = useCycle(offset1, offset2);\r\n  const [y, cycleY] = useCycle(offset1, offset2);\r\n\r\n  switch (type) {\r\n    case 'rotate':\r\n      return (\r\n        <motion.div\r\n          ref={ref}\r\n          animate={{ rotate: 360 }}\r\n          transition={{\r\n            repeat: Infinity,\r\n            repeatType: 'loop',\r\n            duration: 2,\r\n            repeatDelay: 0\r\n          }}\r\n        >\r\n          {children}\r\n        </motion.div>\r\n      );\r\n    case 'slide':\r\n      if (direction === 'up' || direction === 'down') {\r\n        return (\r\n          <motion.div ref={ref} animate={{ y: y !== undefined ? y : '' }} onHoverEnd={() => cycleY()} onHoverStart={() => cycleY()}>\r\n            {children}\r\n          </motion.div>\r\n        );\r\n      }\r\n      return (\r\n        <motion.div ref={ref} animate={{ x: x !== undefined ? x : '' }} onHoverEnd={() => cycleX()} onHoverStart={() => cycleX()}>\r\n          {children}\r\n        </motion.div>\r\n      );\r\n\r\n    case 'scale':\r\n    default:\r\n      if (typeof scale === 'number') {\r\n        scale = {\r\n          hover: scale,\r\n          tap: scale\r\n        };\r\n      }\r\n      return (\r\n        <motion.div ref={ref} whileHover={{ scale: scale?.hover }} whileTap={{ scale: scale?.tap }}>\r\n          {children}\r\n        </motion.div>\r\n      );\r\n  }\r\n});\r\n\r\nAnimateButton.defaultProps = {\r\n  type: 'scale',\r\n  offset: 10,\r\n  direction: 'right',\r\n  scale: {\r\n    hover: 1,\r\n    tap: 0.9\r\n  }\r\n};\r\n\r\nexport default AnimateButton;\r\n","// THIRD-PARTY\r\nimport { Box, Typography } from '@mui/material';\r\nimport { makeStyles } from '@mui/styles';\r\nimport { ReactElement } from 'react';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    position: 'relative',\r\n    width: '100%',\r\n    margin: '2em 0',\r\n    padding: '1em',\r\n    border: 'solid 1px',\r\n    borderColor: '#bdbdbd',\r\n    borderRadius: '4px'\r\n  },\r\n  legend: {\r\n    zIndex: 1,\r\n    position: 'absolute',\r\n    width: 'fit-content',\r\n    height: '24px',\r\n    background: 'white',\r\n    padding: '0.25em 0.5em',\r\n    left: '10px',\r\n    transform: 'translate(0, -125%)'\r\n  }\r\n});\r\n\r\ninterface Props {\r\n  children: ReactElement;\r\n  legend?: string;\r\n}\r\n\r\nconst LegendWrapper = ({ children, legend }: Props) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Box className={classes.root}>\r\n      {legend && (\r\n        <Typography variant=\"h4\" component=\"h4\" className={classes.legend}>\r\n          {legend}\r\n        </Typography>\r\n      )}\r\n      {children}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default LegendWrapper;\r\n","import { dispatch } from 'store';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { applicantAPI, setApplicantInfo, setInterviewData } from './applicantReferences';\r\nimport { ApplicantInfo } from 'types/applicantData';\r\nimport { QuestionType } from 'types/question';\r\nimport { alertError } from 'utils/helpers/axios/errorAlert';\r\n\r\nexport const getQuestionsThunk = createAsyncThunk(\r\n  'applicantReferences/getQuestionsThunk',\r\n  async (params: { language_id: number; rank_id: number }) => {\r\n    await applicantAPI.getQuestionsThunk(params.language_id, params.rank_id);\r\n    // return data && dispatch(setQuestions(data.success));\r\n  }\r\n);\r\n\r\nexport const getInterviewQuestionThunk = createAsyncThunk(\r\n  'applicant/getInterviewQuestionThunk',\r\n  async (params: ApplicantInfo, thunkAPI) => {\r\n    const data = await applicantAPI.getInterviewQuestionThunk({ data: params.applyPosition });\r\n    const hasQuestions =\r\n      data &&\r\n      data.success.some((item) => item.questions.base.length > 0 || item.questions.focus.length > 0 || item.questions.advanced.length > 0);\r\n    if (hasQuestions) {\r\n      return data && dispatch(setApplicantInfo({ applicant: params, questions: data.success }));\r\n    }\r\n    return alertError('No questions found');\r\n  }\r\n);\r\n\r\nexport const getInterviewDataThunk = createAsyncThunk('applicant/getInterviewDataThunk', async (id: string | number) => {\r\n  const applicantDataInit: ApplicantInfo = {\r\n    name: '',\r\n    age: '',\r\n    email: '',\r\n    phone: '',\r\n    address: '',\r\n    time: '',\r\n    applyPosition: [],\r\n    questions: [],\r\n    status: 1,\r\n    note: ''\r\n  };\r\n  type Keys = 'id' | 'name' | 'age' | 'email' | 'note' | 'time' | 'status';\r\n  const data = await applicantAPI.getInterviewDataThunk(id);\r\n  const applicantInfo = { ...data.success };\r\n  const { candidate_question } = applicantInfo;\r\n  const interviewQuestions: QuestionType[] =\r\n    candidate_question.map((element: any) => ({ ...element.question, status: element.status, candidate_id: element.id })) || [];\r\n  const questionStack = {\r\n    language: '',\r\n    questions: {\r\n      base: interviewQuestions,\r\n      focus: [],\r\n      advanced: []\r\n    }\r\n  };\r\n  Object.keys(applicantDataInit).forEach((key) => {\r\n    if (applicantInfo && applicantInfo[key as Keys]) {\r\n      // @ts-ignore\r\n      applicantDataInit[key] = applicantInfo[key];\r\n    }\r\n  });\r\n  const questions = candidate_question.map((element: any) => ({\r\n    question_id: element.id,\r\n    status: element.status\r\n  }));\r\n  applicantDataInit.time = applicantDataInit.time.split('.')[0];\r\n  return data && dispatch(setInterviewData({ applicant: { ...applicantDataInit }, interviewQuestions: [{ ...questionStack }], questions }));\r\n});\r\n","const personalDetail = [\r\n  {\r\n    label: 'Information',\r\n    render: [\r\n      {\r\n        key: 'name',\r\n        label: 'Full Name',\r\n        type: 'text',\r\n        required: true\r\n      },\r\n      {\r\n        key: 'age',\r\n        label: 'Age',\r\n        type: 'number',\r\n        required: true\r\n      },\r\n      {\r\n        key: 'phone',\r\n        label: 'Phone Number',\r\n        type: 'tel',\r\n        required: true\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: 'Contact',\r\n    render: [\r\n      {\r\n        key: 'email',\r\n        label: 'Email',\r\n        type: 'email',\r\n        required: true\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: 'Address',\r\n    render: [\r\n      {\r\n        key: 'address',\r\n        label: 'Address',\r\n        type: 'text'\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: 'Interview Time',\r\n    render: [\r\n      {\r\n        key: 'time',\r\n        label: 'Interview Time',\r\n        type: 'datetime-local',\r\n        required: true\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport default personalDetail;\r\n","import React from 'react';\r\nimport { FormControl, FormHelperText, InputLabel, OutlinedInput } from '@mui/material';\r\n\r\nconst FormInput = ({ errors, handleBlur, handleChange, touched, values, label, required, type, name, readOnly }: any) => (\r\n  <FormControl fullWidth error={Boolean(touched && errors && !readOnly)}>\r\n    <InputLabel htmlFor={`outlined-adornment-${label.split(' ').join('-')}`} required={required}>\r\n      {label}\r\n    </InputLabel>\r\n    <OutlinedInput\r\n      id={`outlined-adornment-${label.split(' ').join('-')}`}\r\n      type={type}\r\n      value={values}\r\n      name={name}\r\n      onChange={handleChange}\r\n      label={label}\r\n      readOnly={readOnly}\r\n      placeholder={label}\r\n    />\r\n    {touched && errors && !readOnly && (\r\n      <FormHelperText error id=\"standard-weight-helper-text-last-name\">\r\n        {errors}\r\n      </FormHelperText>\r\n    )}\r\n  </FormControl>\r\n);\r\n\r\nexport default React.memo(FormInput);\r\n","// THIRD-PARTY\r\nimport * as React from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport axios from 'axios';\r\nimport { Box, Button, FormControl, FormHelperText, Stack, Autocomplete, TextField, useMediaQuery } from '@mui/material';\r\nimport { IconX } from '@tabler/icons';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { useIntl } from 'react-intl';\r\n\r\n// PROJECT IMPORTS\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport axiosServices from 'utils/axios';\r\nimport LegendWrapper from '../legend';\r\nimport { useDispatch, useSelector } from 'store';\r\nimport { getRanksListSuccess } from 'store/slices/rank';\r\nimport { getLanguageListSuccess } from 'store/slices/language';\r\nimport { getInterviewQuestionThunk } from 'store/slices/applicant/applicantAsyncAction';\r\nimport personalDetail from './layoutMapping';\r\n\r\n// TYPE IMPORTS\r\nimport { RankType } from 'types/rank';\r\nimport { Languages } from 'types/language';\r\nimport FormInput from './formInput';\r\nimport { alertError } from 'utils/helpers/axios/errorAlert';\r\n\r\ntype personalDetailType = 'name' | 'email' | 'phone' | 'address';\r\n\r\nconst ApplicantForm = ({ interviewing, errors, handleBlur, handleChange, handleSubmit, setFieldValue, touched, values }: any) => {\r\n  const intl = useIntl();\r\n  const theme = useTheme();\r\n  const dispatch = useDispatch();\r\n  const matchDownMD = useMediaQuery(theme.breakpoints.down('md'));\r\n  const { language } = useSelector((state) => state.language);\r\n  const { ranks } = useSelector((state) => state.rank);\r\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\r\n  React.useEffect(() => {\r\n    axios.all([axiosServices.get('/v1/languages/all'), axiosServices.get('/v1/ranks/all')]).then((res) => {\r\n      dispatch(getLanguageListSuccess({ data: res[0].data.success }));\r\n      dispatch(getRanksListSuccess({ data: res[1].data.success }));\r\n    });\r\n  }, [dispatch]);\r\n  const getInterviewQuestion = async () => {\r\n    const isReady = values.applyPosition.every(\r\n      (item: { language_id: string; rank_id: string; rank_advanced_id: string }) =>\r\n        item.language_id && item.rank_id && item.rank_advanced_id\r\n    );\r\n    if (isReady) {\r\n      setIsSubmitting(true);\r\n      await dispatch(getInterviewQuestionThunk(values));\r\n      setIsSubmitting(false);\r\n    } else {\r\n      alertError('Please select all field in apply position');\r\n    }\r\n  };\r\n  return (\r\n    <Box>\r\n      <>\r\n        {personalDetail.map((row: { label: string; render: { key: string; label: string; type: string; required?: boolean }[] }) => {\r\n          const { render } = row;\r\n          return (\r\n            <Stack direction={matchDownMD ? 'column' : 'row'} spacing={2} sx={{ paddingBottom: 2 }} key={row.label}>\r\n              {render.map((item: { key: string; label: string; type: string; required?: boolean }) => {\r\n                const key: personalDetailType = item.key as personalDetailType;\r\n                const { label, type, required } = item;\r\n                return (\r\n                  <FormInput\r\n                    key={`${row.label}-${label}`}\r\n                    touched={touched[key]}\r\n                    errors={errors[key]}\r\n                    label={label}\r\n                    type={type}\r\n                    values={values[key]}\r\n                    name={key}\r\n                    handleBlur={handleBlur}\r\n                    handleChange={handleChange}\r\n                    required={required}\r\n                    readOnly={interviewing}\r\n                  />\r\n                );\r\n              })}\r\n            </Stack>\r\n          );\r\n        })}\r\n\r\n        {!interviewing && (\r\n          <>\r\n            <LegendWrapper legend={intl.formatMessage({ id: 'apply-positions' })}>\r\n              <Box>\r\n                {values.applyPosition.map((item: { rank_advanced_id: string; language_id: string; rank_id: string }, index: number) => (\r\n                  <Stack direction=\"row\" alignItems=\"center\" spacing={2} sx={{ padding: '1em 0' }} key={uuidv4()}>\r\n                    <Stack direction={matchDownMD ? 'column' : 'row'} spacing={2} sx={{ flexGrow: 1 }}>\r\n                      <FormControl fullWidth error={Boolean(touched.applyPosition && errors.applyPosition)}>\r\n                        <Autocomplete\r\n                          options={language}\r\n                          onChange={(event, value) => {\r\n                            setFieldValue(`applyPosition[${index}].language_id`, (value && value.id) || '');\r\n                          }}\r\n                          value={language.find((element) => element.id === item.language_id)}\r\n                          getOptionLabel={(option: Languages) => option.name || ''}\r\n                          renderInput={(params) => (\r\n                            <TextField {...params} variant=\"standard\" label=\"Apply Position\" placeholder=\"Position\" />\r\n                          )}\r\n                          sx={{ flexGrow: 1 }}\r\n                        />\r\n                        {touched.applyPosition && errors.applyPosition && (\r\n                          <FormHelperText error id=\"standard-weight-helper-text-last-name\">\r\n                            {\r\n                              // @ts-ignore:next-line\r\n                              errors.applyPosition[index] && errors.applyPosition[index].language_id\r\n                            }\r\n                          </FormHelperText>\r\n                        )}\r\n                      </FormControl>\r\n                      <FormControl fullWidth error={Boolean(touched.applyPosition && errors.applyPosition)}>\r\n                        <Autocomplete\r\n                          options={ranks}\r\n                          onChange={(event, value) => {\r\n                            setFieldValue(`applyPosition[${index}].rank_id`, (value && value.id) || '');\r\n                          }}\r\n                          value={ranks.find((element) => element.id === item.rank_id)}\r\n                          getOptionLabel={(option: RankType) => option.name || ''}\r\n                          renderInput={(params) => <TextField {...params} variant=\"standard\" label=\"Rank\" placeholder=\"Rank\" />}\r\n                          sx={{ flexGrow: 1 }}\r\n                        />\r\n                        {touched.applyPosition && errors.applyPosition && (\r\n                          <FormHelperText error id=\"standard-weight-helper-text-last-name\">\r\n                            {\r\n                              // @ts-ignore:next-line\r\n                              errors.applyPosition[index] && errors.applyPosition[index].rank_id\r\n                            }\r\n                          </FormHelperText>\r\n                        )}\r\n                      </FormControl>\r\n                      <FormControl fullWidth error={Boolean(touched.applyPosition && errors.applyPosition)}>\r\n                        <Autocomplete\r\n                          options={ranks}\r\n                          onChange={(event, value) => {\r\n                            setFieldValue(`applyPosition[${index}].rank_advanced_id`, (value && value.id) || '');\r\n                          }}\r\n                          value={ranks.find((element) => element.id === item.rank_advanced_id)}\r\n                          getOptionLabel={(option: RankType) => option.name || ''}\r\n                          renderInput={(params) => (\r\n                            <TextField {...params} variant=\"standard\" label=\"Rank Advanced\" placeholder=\"Rank Advanced\" />\r\n                          )}\r\n                          sx={{ flexGrow: 1 }}\r\n                        />\r\n                        {touched.applyPosition && errors.applyPosition && (\r\n                          <FormHelperText error id=\"standard-weight-helper-text-last-name\">\r\n                            {\r\n                              // @ts-ignore:next-line\r\n                              errors.applyPosition[index] && errors.applyPosition[index].rank_advanced_id\r\n                            }\r\n                          </FormHelperText>\r\n                        )}\r\n                      </FormControl>\r\n                    </Stack>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      color=\"error\"\r\n                      onClick={() => {\r\n                        setFieldValue(\r\n                          'applyPosition',\r\n                          values.applyPosition.filter(\r\n                            (position: { rank_advanced_id: string; language_id: string; rank_id: string }, positionIndex: number) =>\r\n                              positionIndex !== index\r\n                          )\r\n                        );\r\n                      }}\r\n                      sx={{ borderRadius: 9999, width: '28px', height: '28px', padding: '3px', minWidth: 'auto' }}\r\n                    >\r\n                      <IconX />\r\n                    </Button>\r\n                  </Stack>\r\n                ))}\r\n                <Stack direction=\"row\" justifyContent=\"center\" alignItems=\"center\" spacing={2}>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    onClick={() => {\r\n                      setFieldValue('applyPosition', values.applyPosition.concat({ rank_advanced_id: '', language_id: '', rank_id: '' }));\r\n                    }}\r\n                    sx={{ marginTop: 2 }}\r\n                  >\r\n                    + Add more position\r\n                  </Button>\r\n                </Stack>\r\n              </Box>\r\n            </LegendWrapper>\r\n            <Box sx={{ mt: 2, width: { md: 'fit-content', sm: '100%' } }}>\r\n              <AnimateButton>\r\n                <Button\r\n                  disableElevation\r\n                  disabled={isSubmitting}\r\n                  onClick={getInterviewQuestion}\r\n                  fullWidth\r\n                  size=\"large\"\r\n                  // type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  sx={{ marginTop: 4 }}\r\n                >\r\n                  Get Interview Question\r\n                </Button>\r\n              </AnimateButton>\r\n            </Box>\r\n          </>\r\n        )}\r\n      </>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ApplicantForm;\r\n","import { makeStyles } from '@mui/styles';\r\n\r\nconst useStyles = makeStyles({\r\n  itemHovered: {\r\n    cursor: 'pointer',\r\n    border: 'solid 1px #e0e0e0',\r\n    borderColor: (props: any) => {\r\n      if (props.interviewing) {\r\n        switch (props.status) {\r\n          case 0:\r\n            return 'rgb(255, 0, 0)';\r\n          case 1:\r\n            return 'rgb(0, 255, 0)';\r\n          case 2:\r\n            return '#e0e0e0';\r\n          default:\r\n            return '#e0e0e0';\r\n        }\r\n      } else {\r\n        return '#e0e0e0';\r\n      }\r\n    },\r\n    transition: '0.3s',\r\n    '&:hover': {\r\n      backgroundColor: '#c6f9ff'\r\n    },\r\n    '&:hover button': {\r\n      transition: '0.7s',\r\n      transform: 'translate(-5px, 0)'\r\n    }\r\n  }\r\n});\r\n\r\nexport default useStyles;\r\n","// THIRD-PARTY\r\nimport React from 'react';\r\nimport { Paper, Stack, Typography, FormControl, FormControlLabel, Radio, RadioGroup } from '@mui/material';\r\n\r\n// PROJECT IMPORT\r\nimport useStyles from '../useStylesHook/makeStyle';\r\nimport { useDispatch } from 'store';\r\nimport { handleAnswerStatus } from 'store/slices/applicant/applicantReferences';\r\nimport { QuestionType } from 'types/question';\r\n\r\ninterface Props {\r\n  value: QuestionType;\r\n  interviewing?: boolean;\r\n  index: number;\r\n}\r\n\r\nconst QuestionTag = ({ value, interviewing = false, index }: Props) => {\r\n  const classes = useStyles({ interviewing, status: value.status });\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <Paper className={classes.itemHovered} variant=\"outlined\" sx={{ padding: '1em' }}>\r\n      <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\r\n        <Typography variant=\"body1\" component=\"span\" sx={{ flexGrow: 1 }}>\r\n          Câu hỏi : {value.question_content}?\r\n        </Typography>\r\n        {interviewing && (\r\n          <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\r\n            <FormControl>\r\n              <RadioGroup\r\n                aria-labelledby=\"demo-radio-buttons-group-label\"\r\n                value={typeof value.status === 'number' ? value.status + 1 : 3}\r\n                onChange={(e) => {\r\n                  dispatch(handleAnswerStatus({ id: value.candidate_id || 0, status: Number(e.target.value) - 1 }));\r\n                }}\r\n                name=\"radio-buttons-group\"\r\n              >\r\n                <Stack direction=\"row\">\r\n                  <FormControlLabel value={3} control={<Radio />} label=\"Skip\" labelPlacement=\"top\" />\r\n                  <FormControlLabel value={1} control={<Radio />} label=\"Fail\" labelPlacement=\"top\" />\r\n                  <FormControlLabel value={2} control={<Radio />} label=\"Pass\" labelPlacement=\"top\" />\r\n                </Stack>\r\n              </RadioGroup>\r\n            </FormControl>\r\n          </Stack>\r\n        )}\r\n      </Stack>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default React.memo(QuestionTag);\r\n","// THIRD-PARTY\r\nimport { Stack, Typography, Box } from '@mui/material';\r\nimport React from 'react';\r\n\r\n// PROJECT IMPORTS\r\n\r\n// TYPE IMPORTS\r\nimport { QuestionStackInterface } from 'types/interviewQuestion';\r\nimport { QuestionType } from 'types/question';\r\nimport QuestionTag from './questionTag';\r\n\r\ninterface Props {\r\n  questionStack: QuestionStackInterface;\r\n  onClickAddButton?: (type: string) => void;\r\n  onClickDeleteButton?: (type: string, id: number) => void;\r\n  interviewing?: boolean;\r\n}\r\n\r\nconst QuestionStack = ({ questionStack, interviewing, onClickAddButton, onClickDeleteButton }: Props) => (\r\n  <Box>\r\n    <Stack direction=\"row\" marginBottom={2}>\r\n      <Typography variant=\"h3\" component=\"h3\" sx={{ flexGrow: 1 }}>\r\n        {questionStack.language}\r\n      </Typography>\r\n    </Stack>\r\n    <Stack direction=\"column\" spacing={2}>\r\n      {Object.keys(questionStack.questions).map((key: string) => (\r\n        <Box>\r\n          <Typography variant=\"h5\" component=\"h5\" sx={{ flexGrow: 1, padding: '8px 0' }}>\r\n            {key.toUpperCase()}\r\n          </Typography>\r\n          {questionStack.questions[key as 'base' | 'advanced' | 'focus'].map((question: QuestionType) => (\r\n            <QuestionTag value={question} key={`${questionStack.language}-${question.id}`} interviewing={interviewing} index={0} />\r\n          ))}\r\n        </Box>\r\n      ))}\r\n    </Stack>\r\n  </Box>\r\n);\r\n\r\nexport default React.memo(QuestionStack);\r\n","// THIRD-PARTY\r\nimport { Stack } from '@mui/material';\r\nimport { useEffect, useState } from 'react';\r\n\r\n// PROJECT IMPORTS\r\nimport QuestionStack from './questionStack';\r\nimport { getQuestionsThunk } from 'store/slices/applicant/applicantAsyncAction';\r\n// import { deleteInterviewQuestions, addInterviewQuestions } from 'store/slices/applicant/applicantReferences';\r\nimport { useDispatch } from 'store';\r\n\r\n// TYPE IMPORTS\r\n// import { QuestionType } from 'types/question';\r\nimport { QuestionStackInterface } from 'types/interviewQuestion';\r\n\r\ninterface Props {\r\n  questionList: QuestionStackInterface[];\r\n  interviewing: boolean;\r\n}\r\n\r\nconst QuestionList = ({ questionList, interviewing }: Props) => {\r\n  const [searchQuestion] = useState({\r\n    rank_id: 0,\r\n    language_id: 0\r\n  });\r\n  const dispatch = useDispatch();\r\n  // const deleteQuestion = (questionType: string, id: number) => {\r\n  //   dispatch(deleteInterviewQuestions({ questionType, id }));\r\n  // };\r\n  // const addQuestion = (questionType: string, languageT: string, question: QuestionType) => {\r\n  //   dispatch(addInterviewQuestions({ questionType, language: languageT, question }));\r\n  // };\r\n  const getQuestions = (language_id: number, rank_id: number) => {\r\n    dispatch(getQuestionsThunk({ language_id, rank_id }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    searchQuestion.language_id && searchQuestion.rank_id && getQuestions(searchQuestion.language_id, searchQuestion.rank_id);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [searchQuestion]);\r\n\r\n  return (\r\n    <>\r\n      <Stack direction=\"column\" spacing={2} sx={{ border: 'solid 1px #e9e9e9', borderRadius: 5, padding: 2 }}>\r\n        {questionList.map((question, index) => (\r\n          <QuestionStack questionStack={question} key={question.language} interviewing={interviewing} />\r\n        ))}\r\n      </Stack>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuestionList;\r\n","// THIRD-PARTY\r\nimport { Box, Button, TextareaAutosize, Stack } from '@mui/material';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useEffect } from 'react';\r\nimport { useIntl } from 'react-intl';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { Formik, FormikProps } from 'formik';\r\nimport * as Yup from 'yup';\r\n// PROJECT IMPORTS\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport ApplicantForm from './applicantInfo/applicantReferenceForm';\r\nimport QuestionList from './questionList/index';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport { activeItem } from 'store/slices/menu';\r\nimport { useSelector } from 'store';\r\nimport { applicantInit } from 'store/slices/applicant/applicantReferences';\r\nimport { ApplicantInfo } from 'types/applicantData';\r\nimport { axiosPost, axiosPut } from 'utils/helpers/axios';\r\nimport { getInterviewDataThunk } from 'store/slices/applicant/applicantAsyncAction';\r\n\r\nconst AddApplicantReference = () => {\r\n  const dispatch = useDispatch();\r\n  const applicant = useSelector((state) => state.applicant);\r\n  const { id } = useParams();\r\n  const intl = useIntl();\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      dispatch(getInterviewDataThunk(id));\r\n      dispatch(activeItem(['']));\r\n    } else {\r\n      dispatch(applicantInit());\r\n      dispatch(activeItem(['applicant']));\r\n    }\r\n  }, [id, dispatch]);\r\n  return (\r\n    <Box>\r\n      <Formik\r\n        enableReinitialize\r\n        initialValues={applicant.applicantInfo}\r\n        validationSchema={Yup.object().shape({\r\n          name: Yup.string().required('First name is required'),\r\n          age: Yup.number().required('Age is required'),\r\n          email: Yup.string().email('Email is invalid').required('Email is required'),\r\n          phone: Yup.string().required('Phone is required'),\r\n          applyPosition: Yup.array().of(\r\n            Yup.object().shape({\r\n              language_id: Yup.string().required('Language is required'),\r\n              rank_id: Yup.string().required('Rank is required'),\r\n              rank_advanced_id: Yup.string().required('Rank advanced is required')\r\n            })\r\n          ),\r\n          time: Yup.string().required('Time is required')\r\n        })}\r\n        onSubmit={async (values, { setSubmitting }) => {\r\n          setSubmitting(true);\r\n          if (id) {\r\n            const data = {\r\n              ...values,\r\n              status: 1,\r\n              candidateQuestions: values.questions\r\n            };\r\n            await axiosPut(`${process.env.REACT_APP_API_URL}/v1/client/candidates/${id}`, data, 'Complete').then(() =>\r\n              navigate('/history')\r\n            );\r\n          } else {\r\n            await axiosPost(`${process.env.REACT_APP_API_URL}/v1/client/candidates`, values, 'Add applicant success').then((res: any) => {\r\n              res && res.success.id && navigate(`/applicant/${res.success.id}`);\r\n            });\r\n          }\r\n          await setSubmitting(false);\r\n        }}\r\n      >\r\n        {(props: FormikProps<ApplicantInfo>) => (\r\n          <form noValidate onSubmit={props.handleSubmit}>\r\n            <MainCard title={intl.formatMessage({ id: 'applicant-reference-form' })}>\r\n              <ApplicantForm interviewing={!!id} {...props} />\r\n            </MainCard>\r\n            {applicant.interviewQuestions.length > 0 && (\r\n              <>\r\n                <MainCard title={intl.formatMessage({ id: 'interview-questions' })} sx={{ margin: '1em 0' }}>\r\n                  <Stack direction=\"column\" spacing={2}>\r\n                    <QuestionList questionList={applicant.interviewQuestions} interviewing={!!id} />\r\n                  </Stack>\r\n                </MainCard>\r\n                {id && (\r\n                  <MainCard>\r\n                    <TextareaAutosize\r\n                      name=\"note\"\r\n                      onChange={props.handleChange}\r\n                      aria-label=\"minimum height\"\r\n                      minRows={3}\r\n                      placeholder=\"Note\"\r\n                      value={props.values.note}\r\n                      style={{ width: '100%', padding: '8px' }}\r\n                    />\r\n                  </MainCard>\r\n                )}\r\n\r\n                <MainCard sx={{ margin: '1em 0' }}>\r\n                  <AnimateButton>\r\n                    <Button\r\n                      disableElevation\r\n                      disabled={props.isSubmitting}\r\n                      type=\"submit\"\r\n                      fullWidth\r\n                      size=\"large\"\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                    >\r\n                      {id ? 'Send Interview Result' : 'Submit'}\r\n                    </Button>\r\n                  </AnimateButton>\r\n                </MainCard>\r\n              </>\r\n            )}\r\n          </form>\r\n        )}\r\n      </Formik>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AddApplicantReference;\r\n"],"sourceRoot":""}