{"version":3,"sources":["ui-component/extended/AnimateButton.tsx","store/slices/applicant/applicantAsyncAction.ts","views/pages/add-new-applicant/useStylesHook/makeStyle.ts","views/pages/add-new-applicant/questionList/questionTag.tsx","views/pages/add-new-applicant/questionList/questionStack.tsx","views/pages/interview/applicantInfo.tsx","views/pages/interview/interviewerResult.tsx","views/pages/interview/interviewQuestions.tsx","views/pages/interview/referenceResult.tsx","views/pages/interview/loading.tsx","views/pages/interview/index.tsx"],"names":["AnimateButton","React","forwardRef","ref","offset1","offset2","children","type","direction","offset","scale","useCycle","x","cycleX","y","cycleY","div","animate","rotate","transition","repeat","Infinity","repeatType","duration","repeatDelay","undefined","onHoverEnd","onHoverStart","hover","tap","whileHover","whileTap","defaultProps","applicantReferenceInit","createAsyncThunk","applicantId","a","applicantAPI","data","dispatch","setApplicantInfo","getQuestionsThunk","params","value","setQuestions","getInterviewQuestionThunk","thunkAPI","getReferenceEvaluateThunk","setReferenceEvaluate","useStyles","makeStyles","itemHovered","cursor","backgroundColor","transform","QuestionTag","interviewing","onDeleteTag","onAddTag","classes","useState","showNote","setShowNote","useDispatch","Paper","className","variant","sx","padding","Stack","alignItems","spacing","Typography","component","flexGrow","question","Button","color","width","height","minWidth","borderRadius","onClick","id","Fab","minHeight","FormControl","m","Select","labelId","id","label","answerScore","onChange","e","handleAnswerScore","target","MenuItem","notes","handleInterviewQuestionNotes","rows","style","resize","marginTop","placeholder","memo","QuestionStack","questionStack","onClickAddButton","onClickDeleteButton","marginBottom","questionsInit","questions","map","RenderRow","row1","key","row2","row3","row4","ApplicantInformation","applicantInfo","theme","useTheme","matchDownSM","useMediaQuery","breakpoints","down","Object","keys","row","index","fontWeight","applyPosition","position","level","length","InterviewerResult","Box","enableReinitialize","initialValues","expectedSalary","passed","salary","onSubmit","values","setErrors","setStatus","setSubmitting","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","noValidate","console","log","fullWidth","InputLabel","htmlFor","OutlinedInput","Number","toLocaleString","name","onBlur","event","replace","disableElevation","size","InterviewQuestions","interviewQuestions","dataMapping","ReferenceResult","result","element","lineHeight","useStyle","root","animation","animationDelay","dot2","dot3","Loading","InterviewPage","applicantReferences","useSelector","state","applicant","intl","useIntl","useParams","useEffect","getReferenceEvaluate","MainCard","title","formatMessage","margin","Divider","referenceEvaluate"],"mappings":"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","file":"static/js/20.287b10e2.chunk.js","sourcesContent":["// THIRD-PARTY\nimport React, { Ref } from 'react';\nimport { motion, useCycle } from 'framer-motion';\n\ninterface ScaleProps {\n  hover: number | string | undefined;\n  tap: number | string | undefined;\n}\n\ninterface AnimateButtonProps {\n  children?: React.ReactNode;\n  type?: 'slide' | 'scale' | 'rotate';\n  direction?: 'up' | 'down' | 'left' | 'right';\n  offset?: number;\n  scale?: ScaleProps;\n}\n\nconst AnimateButton = React.forwardRef(({ children, type, direction, offset, scale }: AnimateButtonProps, ref: Ref<HTMLDivElement>) => {\n  let offset1;\n  let offset2;\n  switch (direction) {\n    case 'up':\n    case 'left':\n      offset1 = offset;\n      offset2 = 0;\n      break;\n    case 'right':\n    case 'down':\n    default:\n      offset1 = 0;\n      offset2 = offset;\n      break;\n  }\n\n  const [x, cycleX] = useCycle(offset1, offset2);\n  const [y, cycleY] = useCycle(offset1, offset2);\n\n  switch (type) {\n    case 'rotate':\n      return (\n        <motion.div\n          ref={ref}\n          animate={{ rotate: 360 }}\n          transition={{\n            repeat: Infinity,\n            repeatType: 'loop',\n            duration: 2,\n            repeatDelay: 0\n          }}\n        >\n          {children}\n        </motion.div>\n      );\n    case 'slide':\n      if (direction === 'up' || direction === 'down') {\n        return (\n          <motion.div ref={ref} animate={{ y: y !== undefined ? y : '' }} onHoverEnd={() => cycleY()} onHoverStart={() => cycleY()}>\n            {children}\n          </motion.div>\n        );\n      }\n      return (\n        <motion.div ref={ref} animate={{ x: x !== undefined ? x : '' }} onHoverEnd={() => cycleX()} onHoverStart={() => cycleX()}>\n          {children}\n        </motion.div>\n      );\n\n    case 'scale':\n    default:\n      if (typeof scale === 'number') {\n        scale = {\n          hover: scale,\n          tap: scale\n        };\n      }\n      return (\n        <motion.div ref={ref} whileHover={{ scale: scale?.hover }} whileTap={{ scale: scale?.tap }}>\n          {children}\n        </motion.div>\n      );\n  }\n});\n\nAnimateButton.defaultProps = {\n  type: 'scale',\n  offset: 10,\n  direction: 'right',\n  scale: {\n    hover: 1,\n    tap: 0.9\n  }\n};\n\nexport default AnimateButton;\n","import { dispatch } from 'store';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { applicantAPI, setApplicantInfo, setQuestions, setReferenceEvaluate } from './applicantReferences';\r\nimport { ApplicantInfo, ApplicantDataInterface } from 'types/applicantData';\r\n\r\nexport const applicantReferenceInit = createAsyncThunk('applicantReferences/applicantReferenceInit', async (applicantId: string) => {\r\n  const data = await applicantAPI.applicantReferenceInit(applicantId);\r\n  return data && dispatch(setApplicantInfo(data));\r\n});\r\n\r\nexport const getQuestionsThunk = createAsyncThunk(\r\n  'applicantReferences/getQuestionsThunk',\r\n  async (params: { type: string; value: string }) => {\r\n    const data = await applicantAPI.getQuestionsThunk(params.type, params.value);\r\n    return data && dispatch(setQuestions(data));\r\n  }\r\n);\r\n\r\nexport const getInterviewQuestionThunk = createAsyncThunk(\r\n  'applicant/getInterviewQuestionThunk',\r\n  async (params: ApplicantInfo, thunkAPI) => {\r\n    const data = await applicantAPI.getInterviewQuestionThunk(params);\r\n    return data && dispatch(setApplicantInfo(data));\r\n  }\r\n);\r\n\r\nexport const getReferenceEvaluateThunk = createAsyncThunk(\r\n  'applicant/getReferenceEvaluateThunk',\r\n  async (params: ApplicantDataInterface, thunkAPI) => {\r\n    const data = await applicantAPI.getReferenceEvaluateThunk(params);\r\n    return data && dispatch(setReferenceEvaluate(data));\r\n  }\r\n);\r\n","import { makeStyles } from '@mui/styles';\r\n\r\nconst useStyles = makeStyles({\r\n  itemHovered: {\r\n    cursor: 'pointer',\r\n    transition: '0.3s',\r\n    '&:hover': {\r\n      backgroundColor: '#c6f9ff'\r\n    },\r\n    '&:hover button': {\r\n      transition: '0.7s',\r\n      transform: 'translate(-5px, 0)'\r\n    }\r\n  }\r\n});\r\n\r\nexport default useStyles;\r\n","// THIRD-PARTY\r\nimport React from 'react';\r\nimport { Paper, Stack, Typography, Button, FormControl, MenuItem, Select, Fab } from '@mui/material';\r\nimport { IconX, IconDotsVertical } from '@tabler/icons';\r\n\r\n// PROJECT IMPORT\r\nimport useStyles from '../useStylesHook/makeStyle';\r\nimport { useDispatch } from 'store';\r\nimport { handleAnswerScore, handleInterviewQuestionNotes, questionsInit } from 'store/slices/applicant/applicantReferences';\r\nimport AddIcon from '@mui/icons-material/Add';\r\n\r\ninterface Props {\r\n  value: {\r\n    id: string;\r\n    question: string;\r\n    notes?: string;\r\n    answerScore?: string;\r\n  };\r\n  type: string;\r\n  interviewing?: boolean;\r\n  onDeleteTag?: (type: string, id: string) => void;\r\n  onAddTag?: (type: string, question: { id: string; question: string }) => void;\r\n}\r\n\r\nconst QuestionTag = ({ value, interviewing = false, type, onDeleteTag, onAddTag }: Props) => {\r\n  const classes = useStyles();\r\n  const [showNote, setShowNote] = React.useState(false);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <Paper className={classes.itemHovered} variant=\"outlined\" sx={{ padding: '1em' }}>\r\n      <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\r\n        <Typography variant=\"body1\" component=\"span\" sx={{ flexGrow: 1 }}>\r\n          {value.question}\r\n        </Typography>\r\n        {onDeleteTag && (\r\n          <Button\r\n            color=\"error\"\r\n            sx={{ width: '24px', height: '24px', padding: 0, minWidth: 'auto', borderRadius: 99 }}\r\n            onClick={() => {\r\n              onDeleteTag(type, value.id);\r\n            }}\r\n          >\r\n            <IconX height={22} />\r\n          </Button>\r\n        )}\r\n        {onAddTag && (\r\n          <Fab\r\n            sx={{ width: '28px', height: '28px', minHeight: 'auto', minWidth: 'auto', padding: 0 }}\r\n            color=\"primary\"\r\n            aria-label=\"add\"\r\n            onClick={() => {\r\n              onAddTag(type, value);\r\n            }}\r\n          >\r\n            <AddIcon height={22} />\r\n          </Fab>\r\n        )}\r\n        {interviewing && (\r\n          <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\r\n            <FormControl variant=\"standard\" sx={{ m: 1, minWidth: 100, height: 30 }}>\r\n              <Select\r\n                labelId=\"demo-simple-select-standard-label\"\r\n                id=\"demo-simple-select-standard\"\r\n                label=\"Evaluate\"\r\n                value={value.answerScore || ''}\r\n                onChange={(e) => {\r\n                  dispatch(handleAnswerScore({ id: value.id, answerScore: e.target.value }));\r\n                }}\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>Do not enter</em>\r\n                </MenuItem>\r\n                <MenuItem value=\"bad\">Bad</MenuItem>\r\n                <MenuItem value=\"good\">Good</MenuItem>\r\n                <MenuItem value=\"excellent\">Excellent</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            <Button\r\n              color=\"success\"\r\n              sx={{ width: '24px', height: '24px', padding: 0, minWidth: 'auto', borderRadius: 99 }}\r\n              onClick={() => {\r\n                setShowNote(!showNote);\r\n              }}\r\n            >\r\n              <IconDotsVertical height={22} />\r\n            </Button>\r\n          </Stack>\r\n        )}\r\n      </Stack>\r\n      {showNote && (\r\n        <textarea\r\n          value={value.notes}\r\n          onChange={(e) => {\r\n            dispatch(handleInterviewQuestionNotes({ id: value.id, notes: e.target.value }));\r\n          }}\r\n          rows={3}\r\n          style={{ width: '100%', resize: 'none', marginTop: '1em', padding: '0.5em' }}\r\n          placeholder=\"Notes\"\r\n        />\r\n      )}\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default React.memo(QuestionTag);\r\n","// THIRD-PARTY\r\nimport { Stack, Typography, Box, Fab } from '@mui/material';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport React from 'react';\r\n\r\n// PROJECT IMPORTS\r\nimport QuestionTag from './questionTag';\r\nimport { useDispatch } from 'store';\r\nimport { questionsInit } from 'store/slices/applicant/applicantReferences';\r\n\r\n// TYPE IMPORTS\r\nimport { QuestionStackInterface } from 'types/interviewQuestion';\r\n\r\ninterface Props {\r\n  questionStack: QuestionStackInterface;\r\n  onClickAddButton?: (type: string) => void;\r\n  onClickDeleteButton?: (type: string, id: string) => void;\r\n  interviewing?: boolean;\r\n}\r\n\r\nconst QuestionStack = ({ questionStack, interviewing, onClickAddButton, onClickDeleteButton }: Props) => {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <Box>\r\n      <Stack direction=\"row\" marginBottom={2}>\r\n        <Typography variant=\"h3\" component=\"h3\" sx={{ flexGrow: 1 }}>\r\n          {questionStack.type}\r\n        </Typography>\r\n        {onClickAddButton && (\r\n          <Fab\r\n            sx={{ width: '30px', height: '30px', minHeight: 'auto', minWidth: 'auto', padding: 0 }}\r\n            color=\"primary\"\r\n            aria-label=\"add\"\r\n            onClick={() => {\r\n              onClickAddButton(questionStack.type);\r\n              dispatch(questionsInit());\r\n            }}\r\n          >\r\n            <AddIcon />\r\n          </Fab>\r\n        )}\r\n      </Stack>\r\n      <Stack direction=\"column\" spacing={2}>\r\n        {questionStack.questions.map((data) => {\r\n          const { id } = data;\r\n          return (\r\n            <QuestionTag\r\n              value={data}\r\n              type={questionStack.type}\r\n              onDeleteTag={onClickDeleteButton}\r\n              interviewing={interviewing}\r\n              key={id}\r\n            />\r\n          );\r\n        })}\r\n      </Stack>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default React.memo(QuestionStack);\r\n","// THIRD-PARTY\r\nimport { Stack, Typography, useMediaQuery } from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { ApplicantInfo } from 'types/applicantData';\r\n\r\nconst RenderRow = {\r\n  row1: [\r\n    {\r\n      key: 'firstName',\r\n      label: 'First Name'\r\n    },\r\n    {\r\n      key: 'lastName',\r\n      label: 'Last Name'\r\n    },\r\n    {\r\n      key: 'age',\r\n      label: 'Age'\r\n    }\r\n  ],\r\n  row2: [\r\n    {\r\n      key: 'email',\r\n      label: 'Email'\r\n    },\r\n    {\r\n      key: 'phone',\r\n      label: 'Phone'\r\n    }\r\n  ],\r\n  row3: [\r\n    {\r\n      key: 'address',\r\n      label: 'Address'\r\n    }\r\n  ],\r\n  row4: [\r\n    {\r\n      key: 'interviewTime',\r\n      label: 'Interview Time'\r\n    }\r\n  ]\r\n};\r\n\r\ntype dataKey = 'firstName' | 'lastName' | 'email' | 'phone' | 'address' | 'notes';\r\ntype rowKey = keyof typeof RenderRow;\r\n\r\ninterface Props {\r\n  applicantInfo: ApplicantInfo;\r\n}\r\n\r\nconst ApplicantInformation = ({ applicantInfo }: Props) => {\r\n  const theme = useTheme();\r\n  const matchDownSM = useMediaQuery(theme.breakpoints.down('md'));\r\n\r\n  return (\r\n    <Stack direction=\"column\" spacing={3}>\r\n      {Object.keys(RenderRow).map((row: string, index: number) => (\r\n        <Stack direction={matchDownSM ? 'column' : 'row'} spacing={3} key={index}>\r\n          {RenderRow[row as rowKey].map((data: { key: string; label: string }) => (\r\n            <Stack direction=\"row\" key={data.key} sx={{ flexGrow: 1 }}>\r\n              <Typography variant=\"h4\" component=\"h4\">\r\n                {data.label}: &nbsp;\r\n              </Typography>\r\n              <Typography variant=\"h4\" component=\"h4\" sx={{ fontWeight: '400' }}>\r\n                {applicantInfo[data.key as dataKey]}\r\n              </Typography>\r\n            </Stack>\r\n          ))}\r\n        </Stack>\r\n      ))}\r\n      <Stack direction={matchDownSM ? 'column' : 'row'}>\r\n        <Typography variant=\"h4\" component=\"h4\">\r\n          Apply Position:\r\n        </Typography>\r\n        {applicantInfo.applyPosition.map((data: { id: string; position: string; level: string }, index) => (\r\n          <Typography variant=\"h4\" component=\"h4\" sx={{ fontWeight: '400' }} key={index}>\r\n            &nbsp;{data.position} - {data.level}&nbsp;\r\n            {index < applicantInfo.applyPosition.length - 1 && !matchDownSM && '/'}\r\n          </Typography>\r\n        ))}\r\n      </Stack>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ApplicantInformation;\r\n","// THIRD-PARTY\r\nimport { Box, FormControl, InputLabel, MenuItem, OutlinedInput, Select, Stack, useMediaQuery, Button } from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Formik } from 'formik';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\n\r\nconst InterviewerResult = () => {\r\n  const theme = useTheme();\r\n  const matchDownSM = useMediaQuery(theme.breakpoints.down('md'));\r\n  return (\r\n    <Box>\r\n      <Formik\r\n        enableReinitialize\r\n        initialValues={{\r\n          applicantId: '',\r\n          expectedSalary: '',\r\n          passed: false,\r\n          salary: '',\r\n          level: '',\r\n          notes: ''\r\n        }}\r\n        onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {}}\r\n      >\r\n        {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n          <form noValidate onSubmit={handleSubmit}>\r\n            {console.log(values)}\r\n            <Stack direction={matchDownSM ? 'column' : 'row'} spacing={2}>\r\n              <FormControl fullWidth>\r\n                <InputLabel htmlFor=\"outlined-adornment-salary\">Expected Salary</InputLabel>\r\n                <OutlinedInput\r\n                  id=\"outlined-adornment-salary\"\r\n                  type=\"text\"\r\n                  value={Number(values.expectedSalary).toLocaleString()}\r\n                  name=\"expectedSalary\"\r\n                  onBlur={handleBlur}\r\n                  onChange={(e) => {\r\n                    const event = e;\r\n                    event.target.value = event.target.value.replace(/[^0-9]/g, '');\r\n                    handleChange(event);\r\n                  }}\r\n                  label=\"expected salary\"\r\n                />\r\n              </FormControl>\r\n              <FormControl fullWidth>\r\n                <InputLabel id=\"passed\">Status</InputLabel>\r\n                <Select id=\"passed\" name=\"passed\" label=\"Status\" value={+values.passed} onChange={handleChange}>\r\n                  <MenuItem value={0}>Fail</MenuItem>\r\n                  <MenuItem value={1}>Pass</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl fullWidth>\r\n                <InputLabel id=\"passed\">Level</InputLabel>\r\n                <Select id=\"level\" name=\"level\" label=\"Level\" value={values.level} onChange={handleChange}>\r\n                  <MenuItem value=\"J1\">J1</MenuItem>\r\n                  <MenuItem value=\"J2\">J2</MenuItem>\r\n                  <MenuItem value=\"S1\">S1</MenuItem>\r\n                  <MenuItem value=\"S2\">S2</MenuItem>\r\n                  <MenuItem value=\"S3\">S3</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl fullWidth>\r\n                <InputLabel htmlFor=\"outlined-adornment-salary\">Salary</InputLabel>\r\n                <OutlinedInput\r\n                  id=\"outlined-adornment-salary\"\r\n                  type=\"number\"\r\n                  value={Number(values.salary).toLocaleString()}\r\n                  name=\"salary\"\r\n                  onBlur={handleBlur}\r\n                  onChange={(e) => {\r\n                    const event = e;\r\n                    event.target.value = event.target.value.replace(/[^0-9]/g, '');\r\n                    handleChange(event);\r\n                  }}\r\n                  label=\"salary\"\r\n                />\r\n              </FormControl>\r\n            </Stack>\r\n            <Box sx={{ marginTop: 3 }}>\r\n              <AnimateButton>\r\n                <Button disableElevation fullWidth size=\"large\" type=\"submit\" variant=\"contained\" color=\"primary\">\r\n                  Submit\r\n                </Button>\r\n              </AnimateButton>\r\n            </Box>\r\n          </form>\r\n        )}\r\n      </Formik>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default InterviewerResult;\r\n","// THIRD-PARTY\r\nimport { Stack } from '@mui/material';\r\nimport { QuestionStackInterface } from 'types/interviewQuestion';\r\n\r\n// PROJECT IMPORTS\r\nimport QuestionStack from 'views/pages/add-new-applicant/questionList/questionStack';\r\n\r\ninterface Props {\r\n  interviewQuestions: QuestionStackInterface[];\r\n}\r\n\r\nconst InterviewQuestions = ({ interviewQuestions }: Props) => (\r\n  <Stack direction=\"column\" spacing={2}>\r\n    {interviewQuestions.map((type) => (\r\n      <QuestionStack questionStack={type} key={type.type} interviewing />\r\n    ))}\r\n  </Stack>\r\n);\r\n\r\nexport default InterviewQuestions;\r\n","// THIRD-PARTY\r\nimport { Stack, Typography } from '@mui/material';\r\nimport { Box } from '@mui/system';\r\n\r\n// PROJECT IMPORTS\r\nimport { ReferenceEvaluate } from 'types/applicantData';\r\n\r\nconst dataMapping = [\r\n  {\r\n    key: 'totalQuestions',\r\n    label: 'Total Questions'\r\n  },\r\n  {\r\n    key: 'passedQuestions',\r\n    label: 'Passed Questions'\r\n  },\r\n  {\r\n    key: 'failedQuestions',\r\n    label: 'Failed Questions'\r\n  },\r\n  {\r\n    key: 'passedPercentage',\r\n    label: 'Passed Percentage'\r\n  },\r\n  {\r\n    key: 'result',\r\n    label: 'Result'\r\n  },\r\n  {\r\n    key: 'salary',\r\n    label: 'Salary'\r\n  }\r\n];\r\n\r\ninterface Props {\r\n  result: ReferenceEvaluate;\r\n}\r\n\r\ntype keyType = keyof ReferenceEvaluate;\r\n\r\nconst ReferenceResult = ({ result }: Props) => (\r\n  <Box>\r\n    {dataMapping.map((element) => (\r\n      <Stack direction=\"row\" sx={{ alignItems: 'center', marginBottom: 1 }} key={element.key}>\r\n        <Typography variant=\"h4\" component=\"h4\" sx={{ lineHeight: 1 }}>\r\n          {element.label}:&nbsp;\r\n        </Typography>\r\n        <Typography variant=\"h4\" component=\"h4\" sx={{ lineHeight: 1.25, fontWeight: '400' }}>\r\n          {element.key === 'salary' ? Number(result[element.key as keyType]).toLocaleString() : result[element.key as keyType]}\r\n        </Typography>\r\n      </Stack>\r\n    ))}\r\n  </Box>\r\n);\r\n\r\nexport default ReferenceResult;\r\n","import { Box, Stack } from '@mui/material';\r\nimport { makeStyles } from '@mui/styles';\r\n\r\nconst useStyle = makeStyles({\r\n  '@keyframes pulse': {\r\n    '0%': {\r\n      backgroundColor: '#9880ff'\r\n    },\r\n    '100%': {\r\n      backgroundColor: '#ebe6ff'\r\n    }\r\n  },\r\n  root: {\r\n    position: 'relative',\r\n    width: 8,\r\n    height: 8,\r\n    borderRadius: '50%',\r\n    backgroundColor: '#9880ff',\r\n    animation: `$pulse 1.5s infinite`,\r\n    animationDelay: '0.3s'\r\n  },\r\n  dot2: {\r\n    position: 'relative',\r\n    width: 8,\r\n    height: 8,\r\n    borderRadius: '50%',\r\n    backgroundColor: '#9880ff',\r\n    animation: `$pulse 1.5s infinite`,\r\n    animationDelay: '0.4s'\r\n  },\r\n  dot3: {\r\n    position: 'relative',\r\n    width: 8,\r\n    height: 8,\r\n    borderRadius: '50%',\r\n    backgroundColor: '#9880ff',\r\n    animation: `$pulse 1.5s infinite`,\r\n    animationDelay: '0.5s'\r\n  }\r\n});\r\n\r\nconst Loading = () => {\r\n  const classes = useStyle();\r\n  return (\r\n    <Stack direction=\"row\" spacing={0.5} sx={{ height: 20, alignItems: 'center' }}>\r\n      <Box className={classes.root} />\r\n      <Box className={classes.dot2} />\r\n      <Box className={classes.dot3} />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","// THIRD-PARTY\r\nimport { useEffect } from 'react';\r\nimport { Box, Button, Stack, Divider } from '@mui/material';\r\nimport { useIntl } from 'react-intl';\r\n\r\n// PROJECT IMPORTS\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport ApplicantInformation from './applicantInfo';\r\nimport InterviewerResult from './interviewerResult';\r\nimport InterviewQuestions from './interviewQuestions';\r\nimport ReferenceResult from './referenceResult';\r\nimport { useSelector, useDispatch } from 'store';\r\nimport { getReferenceEvaluateThunk, applicantReferenceInit } from 'store/slices/applicant/applicantAsyncAction';\r\nimport { ApplicantDataInterface } from 'types/applicantData';\r\nimport { useParams } from 'react-router-dom';\r\nimport Loading from './loading';\r\n\r\nconst InterviewPage = () => {\r\n  const applicantReferences: ApplicantDataInterface = useSelector((state) => state.applicant);\r\n  const dispatch = useDispatch();\r\n  const intl = useIntl();\r\n  const { applicantId } = useParams();\r\n\r\n  useEffect(() => {\r\n    applicantId && dispatch(applicantReferenceInit(applicantId));\r\n  }, [dispatch, applicantId]);\r\n\r\n  const getReferenceEvaluate = async () => {\r\n    dispatch(getReferenceEvaluateThunk(applicantReferences));\r\n  };\r\n  return (\r\n    <Stack direction=\"column\" spacing={2}>\r\n      <MainCard title={intl.formatMessage({ id: 'applicant-information' })}>\r\n        {applicantReferences.applicantInfo.id ? <ApplicantInformation applicantInfo={applicantReferences.applicantInfo} /> : <Loading />}\r\n      </MainCard>\r\n      <MainCard title={intl.formatMessage({ id: 'interview-questions' })}>\r\n        {applicantReferences.interviewQuestions.length > 0 ? (\r\n          <>\r\n            <InterviewQuestions interviewQuestions={applicantReferences.interviewQuestions} />\r\n            <Box margin=\"2em 0\">\r\n              <Divider />\r\n            </Box>\r\n            <Box>\r\n              <AnimateButton>\r\n                <Button\r\n                  disableElevation\r\n                  onClick={getReferenceEvaluate}\r\n                  fullWidth\r\n                  size=\"large\"\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                >\r\n                  Send Interview Result\r\n                </Button>\r\n              </AnimateButton>\r\n            </Box>\r\n          </>\r\n        ) : (\r\n          <Loading />\r\n        )}\r\n      </MainCard>\r\n      {applicantReferences.referenceEvaluate && (\r\n        <>\r\n          <MainCard title={intl.formatMessage({ id: 'reference-results' })} sx={{ margin: '1em 0' }}>\r\n            <ReferenceResult result={applicantReferences.referenceEvaluate} />\r\n          </MainCard>\r\n          <MainCard title={intl.formatMessage({ id: 'interviewer-results' })} sx={{ margin: '1em 0' }}>\r\n            <InterviewerResult />\r\n          </MainCard>\r\n        </>\r\n      )}\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default InterviewPage;\r\n"],"sourceRoot":""}