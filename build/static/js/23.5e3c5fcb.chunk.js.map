{"version":3,"sources":["utils/regexHelper.ts","views/pages/add-new-applicant-reference/legend/index.tsx","views/pages/add-new-applicant-reference/applicantInfo/layoutMapping.ts","views/pages/add-new-applicant-reference/applicantInfo/formInput.tsx","views/pages/add-new-applicant-reference/applicantInfo/applicantReferenceForm.tsx","views/pages/add-new-applicant-reference/useStylesHook/makeStyle.ts","views/pages/add-new-applicant-reference/questionList/questionTag.tsx","views/pages/add-new-applicant-reference/questionList/questionStack.tsx","views/pages/add-new-applicant-reference/questionList/index.tsx","views/pages/add-new-applicant-reference/index.tsx"],"names":["isEmail","isPhone","isFullName","isUserName","emailRegEx","passwordRegEx","useStyles","makeStyles","root","position","width","margin","padding","border","borderColor","borderRadius","legend","zIndex","height","background","left","transform","LegendWrapper","children","classes","Box","className","Typography","variant","component","personalDetail","label","render","key","type","required","FormInput","errors","handleChange","handleBlur","touched","values","name","readOnly","FormControl","fullWidth","error","Boolean","TextField","id","split","join","InputProps","inputProps","min","max","value","onChange","placeholder","InputLabelProps","shrink","FormHelperText","React","memo","ApplicantForm","interviewing","setFieldValue","handleSubmit","intl","useIntl","theme","useTheme","dispatch","useDispatch","matchDownMD","useMediaQuery","breakpoints","down","language","useSelector","state","ranks","rank","languageOptions","setLanguageOptions","isSubmitting","setIsSubmitting","axios","all","axiosServices","get","then","res","getLanguageListSuccess","data","success","getRanksListSuccess","getInterviewQuestion","a","isReady","applyPosition","every","item","language_id","rank_id","rank_advanced_id","console","log","getInterviewQuestionThunk","alertError","languageSelected","map","length","remoteLanguageSelected","filter","includes","row","Stack","direction","spacing","sx","paddingBottom","formatMessage","index","alignItems","flexGrow","Autocomplete","options","sort","b","undefined","event","find","element","getOptionLabel","option","renderInput","params","Button","color","onClick","positionIndex","minWidth","uuidv4","justifyContent","concat","marginTop","mt","md","sm","AnimateButton","disableElevation","disabled","size","itemHovered","cursor","props","status","transition","backgroundColor","QuestionTag","Paper","textOverflow","overflow","question_content","RadioGroup","e","handleAnswerStatus","candidate_id","Number","target","FormControlLabel","control","Radio","labelPlacement","QuestionStack","questionStack","onClickAddButton","onClickDeleteButton","Object","keys","questions","toUpperCase","question","QuestionList","questionList","useState","searchQuestion","divRef","useRef","setValue","useEffect","getQuestionsThunk","TabContext","ref","borderBottom","TabList","newValue","Tab","toString","TabPanel","AddApplicantReference","applicant","useParams","navigate","useNavigate","activeItem","getInterviewDataThunk","applicantInit","enableReinitialize","initialValues","applicantInfo","validationSchema","yup","shape","trim","matches","age","email","phone","address","of","time","note","onSubmit","setSubmitting","candidateQuestions","axiosPut","process","axiosPost","noValidate","MainCard","title","interviewQuestions","TextareaAutosize","minRows","style"],"mappings":"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","file":"static/js/23.5e3c5fcb.chunk.js","sourcesContent":["// const isEmail =\r\n//   /^[A-Za-z0-9ĐÀÁẢẠÃẦẤẨẬẪÂẮẰẶẴĂẲÈÉẸẺẼỂẾỀỆỄÊỊÌÍĨỈÒÓỎỌÕÔỐỒỔỘỖỜỚỠỢỞƠÙÚỤỦŨỨỪỬỮỰƯÝỲỶỸỴđàáảạãầấẩậẫâắằặẵăẳèéẹẻẽểếềệễêịìíĩỉòóỏọõôốồổộỗờớỡợởơùúụủũứừửữựưýỳỷỹỵ]{1}[A-Za-z0-9ĐÀÁẢẠÃẦẤẨẬẪÂẮẰẶẴĂẲÈÉẸẺẼỂẾỀỆỄÊỊÌÍĨỈÒÓỎỌÕÔỐỒỔỘỖỜỚỠỢỞƠÙÚỤỦŨỨỪỬỮỰƯÝỲỶỸỴđàáảạãầấẩậẫâắằặẵăẳèéẹẻẽểếềệễêịìíĩỉòóỏọõôốồổộỗờớỡợởơùúụủũứừửữựưýỳỷỹỵ.@]{2,40}$$/i; // bat dau bang chu cai hoac so, theo sau la chu cai, so hoac dau .\r\nconst isEmail = /^[a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,4}$/;\r\nconst isPhone = /(84[3|5|7|8|9]|0[3|5|7|8|9])+([0-9]{8})\\b/g; // check dinh dang so dien thoai,\r\nconst isFullName =\r\n  /^[a-zA-ZÀÁÂÃÈÉÊÌÍÒÓÔÕÙÚĂĐĨŨƠàáâãèéêìíòóôõùúăđĩũơƯĂẠẢẤẦẨẪẬẮẰẲẴẶẸẺẼỀỀỂưăạảấầẩẫậắằẳẵặẹẻẽềềểỄỆỈỊỌỎỐỒỔỖỘỚỜỞỠỢỤỦỨỪễếệỉịọỏốồổỗộớờởỡợụủứừỬỮỰỲỴÝỶỸửữựỳỵỷỹ ]*$/; // check ten chi bao gom chu (a-z) hoac dau cach tu 2 - 40 ky tu\r\nconst isUserName = /^[a-zA-Z0-9_-]+$/;\r\n\r\nconst emailRegEx = /^[a-zA-Z0-9 @ .]+$/;\r\nconst passwordRegEx = /^.+$/;\r\n\r\nexport { isEmail, isPhone, isFullName, isUserName, emailRegEx, passwordRegEx };\r\n","// THIRD-PARTY\r\nimport { Box, Typography } from '@mui/material';\r\nimport { makeStyles } from '@mui/styles';\r\nimport { ReactElement } from 'react';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    position: 'relative',\r\n    width: '100%',\r\n    margin: '2em 0',\r\n    padding: '1em',\r\n    border: 'solid 1px',\r\n    borderColor: '#bdbdbd',\r\n    borderRadius: '4px'\r\n  },\r\n  legend: {\r\n    zIndex: 1,\r\n    position: 'absolute',\r\n    width: 'fit-content',\r\n    height: '24px',\r\n    background: 'white',\r\n    padding: '0.25em 0.5em',\r\n    left: '10px',\r\n    transform: 'translate(0, -125%)'\r\n  }\r\n});\r\n\r\ninterface Props {\r\n  children: ReactElement;\r\n  legend?: string;\r\n}\r\n\r\nconst LegendWrapper = ({ children, legend }: Props) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Box className={classes.root}>\r\n      {legend && (\r\n        <Typography variant=\"h4\" component=\"h4\" className={classes.legend}>\r\n          {legend}\r\n        </Typography>\r\n      )}\r\n      {children}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default LegendWrapper;\r\n","const personalDetail = [\r\n  {\r\n    label: 'Information',\r\n    render: [\r\n      {\r\n        key: 'name',\r\n        label: 'Full Name',\r\n        type: 'text',\r\n        required: true\r\n      },\r\n      {\r\n        key: 'age',\r\n        label: 'Age',\r\n        type: 'number',\r\n        required: true\r\n      },\r\n      {\r\n        key: 'phone',\r\n        label: 'Phone Number',\r\n        type: 'tel',\r\n        required: true\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: 'Contact',\r\n    render: [\r\n      {\r\n        key: 'email',\r\n        label: 'Email',\r\n        type: 'email',\r\n        required: true\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: 'Address',\r\n    render: [\r\n      {\r\n        key: 'address',\r\n        label: 'Address',\r\n        type: 'text'\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: 'Interview Time',\r\n    render: [\r\n      {\r\n        key: 'time',\r\n        label: 'Interview Time',\r\n        type: 'datetime-local',\r\n        required: true\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport default personalDetail;\r\n","import React from 'react';\r\nimport { FormControl, FormHelperText, InputLabel, OutlinedInput, TextField } from '@mui/material';\r\n\r\nconst FormInput = ({ errors, handleBlur, handleChange, touched, values, label, required, type, name, readOnly }: any) => (\r\n  <FormControl fullWidth error={Boolean(touched && errors && !readOnly)}>\r\n    <TextField\r\n      id={`outlined-adornment-${label.split(' ').join('-')}`}\r\n      type={type}\r\n      required={required}\r\n      InputProps={type === 'number' ? { inputProps: { min: 0, max: 10, readOnly } } : { readOnly }}\r\n      value={values}\r\n      name={name}\r\n      onChange={handleChange}\r\n      label={label}\r\n      placeholder={label}\r\n      InputLabelProps={type === 'datetime-local' ? { shrink: true } : {}}\r\n    />\r\n    {touched && errors && !readOnly && (\r\n      <FormHelperText error id=\"standard-weight-helper-text-last-name\">\r\n        {errors}\r\n      </FormHelperText>\r\n    )}\r\n  </FormControl>\r\n);\r\n\r\nexport default React.memo(FormInput);\r\n","// THIRD-PARTY\r\nimport * as React from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport axios from 'axios';\r\nimport { Box, Button, FormControl, FormHelperText, Stack, Autocomplete, TextField, useMediaQuery } from '@mui/material';\r\nimport { IconX } from '@tabler/icons';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { useIntl } from 'react-intl';\r\n\r\n// PROJECT IMPORTS\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport axiosServices from 'utils/axios';\r\nimport LegendWrapper from '../legend';\r\nimport { useDispatch, useSelector } from 'store';\r\nimport { getRanksListSuccess } from 'store/slices/rank';\r\nimport { getLanguageListSuccess } from 'store/slices/language';\r\nimport { getInterviewQuestionThunk } from 'store/slices/applicant/applicantAsyncAction';\r\nimport personalDetail from './layoutMapping';\r\n\r\n// TYPE IMPORTS\r\nimport { RankType } from 'types/rank';\r\nimport { Languages } from 'types/language';\r\nimport FormInput from './formInput';\r\nimport { alertError } from 'utils/helpers/axios/errorAlert';\r\n\r\ntype personalDetailType = 'name' | 'email' | 'phone' | 'address';\r\n\r\nconst ApplicantForm = ({ interviewing, errors, handleBlur, handleChange, handleSubmit, setFieldValue, touched, values }: any) => {\r\n  const intl = useIntl();\r\n  const theme = useTheme();\r\n  const dispatch = useDispatch();\r\n  const matchDownMD = useMediaQuery(theme.breakpoints.down('md'));\r\n  const { language } = useSelector((state) => state.language);\r\n  const { ranks } = useSelector((state) => state.rank);\r\n  const [languageOptions, setLanguageOptions] = React.useState<Languages[]>(language);\r\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\r\n  React.useEffect(() => {\r\n    axios.all([axiosServices.get('/v1/languages/all'), axiosServices.get('/v1/ranks/all')]).then((res) => {\r\n      dispatch(getLanguageListSuccess({ data: res[0].data.success }));\r\n      dispatch(getRanksListSuccess({ data: res[1].data.success }));\r\n    });\r\n  }, [dispatch]);\r\n  const getInterviewQuestion = async () => {\r\n    const isReady = values.applyPosition.every(\r\n      (item: { language_id: string; rank_id: string; rank_advanced_id: string }) =>\r\n        item.language_id && item.rank_id && item.rank_advanced_id\r\n    );\r\n    console.log(values.applyPosition);\r\n    if (isReady) {\r\n      setIsSubmitting(true);\r\n      await dispatch(getInterviewQuestionThunk(values));\r\n      setIsSubmitting(false);\r\n    } else {\r\n      alertError('Please select all field in apply position');\r\n    }\r\n  };\r\n  React.useEffect(() => {\r\n    setLanguageOptions(language);\r\n  }, [language]);\r\n  React.useEffect(() => {\r\n    const languageSelected = values.applyPosition.map((item: any) => item.language_id);\r\n    if (languageSelected.length > 0) {\r\n      const remoteLanguageSelected = language.filter((item: Languages) => !languageSelected.includes(item.id));\r\n      setLanguageOptions(remoteLanguageSelected);\r\n    }\r\n  }, [values, language]);\r\n  return (\r\n    <Box>\r\n      <>\r\n        {personalDetail.map((row: { label: string; render: { key: string; label: string; type: string; required?: boolean }[] }) => {\r\n          const { render } = row;\r\n          return (\r\n            <Stack direction={matchDownMD ? 'column' : 'row'} spacing={2} sx={{ paddingBottom: 2 }} key={row.label}>\r\n              {render.map((item: { key: string; label: string; type: string; required?: boolean }) => {\r\n                const key: personalDetailType = item.key as personalDetailType;\r\n                const { label, type, required } = item;\r\n                return (\r\n                  <FormInput\r\n                    key={`${row.label}-${label}`}\r\n                    touched={touched[key]}\r\n                    errors={errors[key]}\r\n                    label={label}\r\n                    type={type}\r\n                    values={values[key]}\r\n                    name={key}\r\n                    handleBlur={handleBlur}\r\n                    handleChange={handleChange}\r\n                    required={required}\r\n                    readOnly={interviewing}\r\n                  />\r\n                );\r\n              })}\r\n            </Stack>\r\n          );\r\n        })}\r\n\r\n        {!interviewing && (\r\n          <>\r\n            <LegendWrapper legend={intl.formatMessage({ id: 'apply-positions' })}>\r\n              <Box>\r\n                {values.applyPosition.map((item: { rank_advanced_id: string; language_id: string; rank_id: string }, index: number) => (\r\n                  <Stack direction=\"row\" alignItems=\"center\" spacing={2} sx={{ padding: '1em 0' }} key={uuidv4()}>\r\n                    <Stack direction={matchDownMD ? 'column' : 'row'} spacing={2} sx={{ flexGrow: 1 }}>\r\n                      <FormControl fullWidth error={Boolean(touched.applyPosition && errors.applyPosition)}>\r\n                        <Autocomplete\r\n                          options={[...languageOptions].sort((a: Languages, b: Languages) =>\r\n                            a.name !== undefined && b.name !== undefined && a.name > b.name ? 1 : -1\r\n                          )}\r\n                          onChange={(event, value) => {\r\n                            setFieldValue(`applyPosition[${index}].language_id`, (value && value.id) || '');\r\n                          }}\r\n                          value={language.find((element) => element.id === item.language_id)}\r\n                          getOptionLabel={(option: Languages) => option.name || ''}\r\n                          renderInput={(params) => (\r\n                            <TextField {...params} variant=\"standard\" label=\"Apply Position\" placeholder=\"Position\" />\r\n                          )}\r\n                          sx={{ flexGrow: 1 }}\r\n                        />\r\n                        {touched.applyPosition && errors.applyPosition && (\r\n                          <FormHelperText error id=\"standard-weight-helper-text-last-name\">\r\n                            {\r\n                              // @ts-ignore:next-line\r\n                              errors.applyPosition[index] && errors.applyPosition[index].language_id\r\n                            }\r\n                          </FormHelperText>\r\n                        )}\r\n                      </FormControl>\r\n                      <FormControl fullWidth error={Boolean(touched.applyPosition && errors.applyPosition)}>\r\n                        <Autocomplete\r\n                          options={[...ranks].sort((a: RankType, b: RankType) =>\r\n                            a.name !== undefined && b.name !== undefined && a.name > b.name ? 1 : -1\r\n                          )}\r\n                          onChange={(event, value) => {\r\n                            setFieldValue(`applyPosition[${index}].rank_id`, (value && value.id) || '');\r\n                          }}\r\n                          value={ranks.find((element) => element.id === item.rank_id)}\r\n                          getOptionLabel={(option: RankType) => option.name || ''}\r\n                          renderInput={(params) => <TextField {...params} variant=\"standard\" label=\"Rank\" placeholder=\"Rank\" />}\r\n                          sx={{ flexGrow: 1 }}\r\n                        />\r\n                        {touched.applyPosition && errors.applyPosition && (\r\n                          <FormHelperText error id=\"standard-weight-helper-text-last-name\">\r\n                            {\r\n                              // @ts-ignore:next-line\r\n                              errors.applyPosition[index] && errors.applyPosition[index].rank_id\r\n                            }\r\n                          </FormHelperText>\r\n                        )}\r\n                      </FormControl>\r\n                      <FormControl fullWidth error={Boolean(touched.applyPosition && errors.applyPosition)}>\r\n                        <Autocomplete\r\n                          options={[...ranks].sort((a: RankType, b: RankType) =>\r\n                            a.name !== undefined && b.name !== undefined && a.name > b.name ? 1 : -1\r\n                          )}\r\n                          onChange={(event, value) => {\r\n                            setFieldValue(`applyPosition[${index}].rank_advanced_id`, (value && value.id) || '');\r\n                          }}\r\n                          value={ranks.find((element) => element.id === item.rank_advanced_id)}\r\n                          getOptionLabel={(option: RankType) => option.name || ''}\r\n                          renderInput={(params) => (\r\n                            <TextField {...params} variant=\"standard\" label=\"Rank Advanced\" placeholder=\"Rank Advanced\" />\r\n                          )}\r\n                          sx={{ flexGrow: 1 }}\r\n                        />\r\n                        {touched.applyPosition && errors.applyPosition && (\r\n                          <FormHelperText error id=\"standard-weight-helper-text-last-name\">\r\n                            {\r\n                              // @ts-ignore:next-line\r\n                              errors.applyPosition[index] && errors.applyPosition[index].rank_advanced_id\r\n                            }\r\n                          </FormHelperText>\r\n                        )}\r\n                      </FormControl>\r\n                    </Stack>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      color=\"error\"\r\n                      onClick={() => {\r\n                        setFieldValue(\r\n                          'applyPosition',\r\n                          values.applyPosition.filter(\r\n                            (position: { rank_advanced_id: string; language_id: string; rank_id: string }, positionIndex: number) =>\r\n                              positionIndex !== index\r\n                          )\r\n                        );\r\n                      }}\r\n                      sx={{ borderRadius: 9999, width: '28px', height: '28px', padding: '3px', minWidth: 'auto' }}\r\n                    >\r\n                      <IconX />\r\n                    </Button>\r\n                  </Stack>\r\n                ))}\r\n                <Stack direction=\"row\" justifyContent=\"center\" alignItems=\"center\" spacing={2}>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    onClick={() => {\r\n                      setFieldValue('applyPosition', values.applyPosition.concat({ rank_advanced_id: '', language_id: '', rank_id: '' }));\r\n                    }}\r\n                    sx={{ marginTop: 2 }}\r\n                  >\r\n                    + Add more position\r\n                  </Button>\r\n                </Stack>\r\n              </Box>\r\n            </LegendWrapper>\r\n            <Box sx={{ mt: 2, width: { md: 'fit-content', sm: '100%' } }}>\r\n              <AnimateButton>\r\n                <Button\r\n                  disableElevation\r\n                  disabled={isSubmitting}\r\n                  onClick={getInterviewQuestion}\r\n                  fullWidth\r\n                  size=\"large\"\r\n                  // type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  sx={{ marginTop: 4 }}\r\n                >\r\n                  Get Interview Question\r\n                </Button>\r\n              </AnimateButton>\r\n            </Box>\r\n          </>\r\n        )}\r\n      </>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ApplicantForm;\r\n","import { makeStyles } from '@mui/styles';\r\n\r\nconst useStyles = makeStyles({\r\n  itemHovered: {\r\n    cursor: 'pointer',\r\n    border: 'solid 1px #e0e0e0',\r\n    borderColor: (props: any) => {\r\n      if (props.interviewing) {\r\n        switch (props.status) {\r\n          case 0:\r\n            return 'rgb(255, 0, 0)';\r\n          case 1:\r\n            return 'rgb(0, 255, 0)';\r\n          case 2:\r\n            return '#e0e0e0';\r\n          default:\r\n            return '#e0e0e0';\r\n        }\r\n      } else {\r\n        return '#e0e0e0';\r\n      }\r\n    },\r\n    transition: '0.3s',\r\n    '&:hover': {\r\n      backgroundColor: '#c6f9ff'\r\n    },\r\n    '&:hover button': {\r\n      transition: '0.7s',\r\n      transform: 'translate(-5px, 0)'\r\n    }\r\n  }\r\n});\r\n\r\nexport default useStyles;\r\n","// THIRD-PARTY\r\nimport React from 'react';\r\nimport { Paper, Stack, Typography, FormControl, FormControlLabel, Radio, RadioGroup } from '@mui/material';\r\n\r\n// PROJECT IMPORT\r\nimport useStyles from '../useStylesHook/makeStyle';\r\nimport { useDispatch } from 'store';\r\nimport { handleAnswerStatus } from 'store/slices/applicant/applicantReferences';\r\nimport { QuestionType } from 'types/question';\r\n\r\ninterface Props {\r\n  value: QuestionType;\r\n  interviewing?: boolean;\r\n  index: number;\r\n}\r\n\r\nconst QuestionTag = ({ value, interviewing = false, index }: Props) => {\r\n  const classes = useStyles({ interviewing, status: value.status });\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <Paper className={classes.itemHovered} variant=\"outlined\" sx={{ padding: '1em' }}>\r\n      <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\r\n        <Typography variant=\"body1\" component=\"span\" sx={{ flexGrow: 1, textOverflow: 'ellipsis', overflow: 'hidden' }}>\r\n          {value.question_content}\r\n        </Typography>\r\n        {interviewing && (\r\n          <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\r\n            <FormControl>\r\n              <RadioGroup\r\n                aria-labelledby=\"demo-radio-buttons-group-label\"\r\n                value={typeof value.status === 'number' ? value.status + 1 : 3}\r\n                onChange={(e) => {\r\n                  dispatch(handleAnswerStatus({ id: value.candidate_id || 0, status: Number(e.target.value) - 1 }));\r\n                }}\r\n                name=\"radio-buttons-group\"\r\n              >\r\n                <Stack direction=\"row\">\r\n                  <FormControlLabel value={3} control={<Radio />} label=\"Skip\" labelPlacement=\"top\" />\r\n                  <FormControlLabel value={1} control={<Radio />} label=\"Fail\" labelPlacement=\"top\" />\r\n                  <FormControlLabel value={2} control={<Radio />} label=\"Pass\" labelPlacement=\"top\" />\r\n                </Stack>\r\n              </RadioGroup>\r\n            </FormControl>\r\n          </Stack>\r\n        )}\r\n      </Stack>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default React.memo(QuestionTag);\r\n","// THIRD-PARTY\r\nimport { Stack, Typography, Box } from '@mui/material';\r\nimport React from 'react';\r\n\r\n// PROJECT IMPORTS\r\n\r\n// TYPE IMPORTS\r\nimport { QuestionStackInterface } from 'types/interviewQuestion';\r\nimport { QuestionType } from 'types/question';\r\nimport QuestionTag from './questionTag';\r\n\r\ninterface Props {\r\n  questionStack: QuestionStackInterface;\r\n  onClickAddButton?: (type: string) => void;\r\n  onClickDeleteButton?: (type: string, id: number) => void;\r\n  interviewing?: boolean;\r\n}\r\n\r\nconst QuestionStack = ({ questionStack, interviewing, onClickAddButton, onClickDeleteButton }: Props) => (\r\n  <Box>\r\n    <Stack direction=\"column\" spacing={2}>\r\n      {Object.keys(questionStack.questions).map((key: string) => (\r\n        <Box key={`${questionStack.language}-${key}`}>\r\n          {!interviewing && (\r\n            <Typography variant=\"h5\" component=\"h5\" sx={{ flexGrow: 1, padding: '8px 0' }}>\r\n              {key.toUpperCase()}\r\n            </Typography>\r\n          )}\r\n          <Stack direction=\"column\" spacing={1}>\r\n            {questionStack.questions[key as 'base' | 'advanced' | 'focus'].map((question: QuestionType) => (\r\n              <QuestionTag value={question} key={`${questionStack.language}-${question.id}-${key}`} interviewing={interviewing} index={0} />\r\n            ))}\r\n          </Stack>\r\n        </Box>\r\n      ))}\r\n    </Stack>\r\n  </Box>\r\n);\r\n\r\nexport default React.memo(QuestionStack);\r\n","// THIRD-PARTY\r\nimport { Box, Stack, Tab, Typography } from '@mui/material';\r\nimport React, { useEffect, useState } from 'react';\r\n// PROJECT IMPORTS\r\nimport QuestionStack from './questionStack';\r\nimport { getQuestionsThunk } from 'store/slices/applicant/applicantAsyncAction';\r\nimport { useDispatch } from 'store';\r\n\r\n// TYPE IMPORTS\r\nimport { QuestionStackInterface } from 'types/interviewQuestion';\r\nimport TabContext from '@mui/lab/TabContext';\r\nimport TabList from '@mui/lab/TabList';\r\nimport TabPanel from '@mui/lab/TabPanel';\r\nimport { makeStyles } from '@mui/styles';\r\n\r\ninterface Props {\r\n  questionList: QuestionStackInterface[];\r\n  interviewing: boolean;\r\n}\r\n\r\nconst QuestionList = ({ questionList, interviewing }: Props) => {\r\n  const [searchQuestion] = useState({\r\n    rank_id: 0,\r\n    language_id: 0\r\n  });\r\n  const divRef = React.useRef<HTMLDivElement>(null);\r\n  const dispatch = useDispatch();\r\n  const [value, setValue] = useState('0');\r\n  const handleChange = (event: React.SyntheticEvent, newValue: string) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const getQuestions = (language_id: number, rank_id: number) => {\r\n    dispatch(getQuestionsThunk({ language_id, rank_id }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    searchQuestion.language_id && searchQuestion.rank_id && getQuestions(searchQuestion.language_id, searchQuestion.rank_id);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [searchQuestion]);\r\n\r\n  return (\r\n    <>\r\n      <Stack direction=\"column\" spacing={2} sx={{ border: 'solid 1px #e9e9e9', borderRadius: 5, padding: 2 }}>\r\n        <TabContext value={value}>\r\n          <Box ref={divRef} sx={{ borderBottom: 1, borderColor: 'divider', position: 'relative' }}>\r\n            <TabList onChange={handleChange} aria-label=\"lab API tabs example\">\r\n              {questionList.map((question, index) => (\r\n                <Tab\r\n                  value={index.toString()}\r\n                  label={\r\n                    <Typography variant=\"h4\" component=\"h4\">\r\n                      {question.language}\r\n                    </Typography>\r\n                  }\r\n                  key={index}\r\n                />\r\n              ))}\r\n            </TabList>\r\n          </Box>\r\n          {questionList.map((question, index) => (\r\n            <TabPanel value={index.toString()} key={index}>\r\n              <QuestionStack questionStack={question} key={question.language} interviewing={interviewing} />\r\n            </TabPanel>\r\n          ))}\r\n        </TabContext>\r\n      </Stack>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuestionList;\r\n","// THIRD-PARTY\r\nimport { Box, Button, TextareaAutosize, Stack } from '@mui/material';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useEffect } from 'react';\r\nimport { useIntl } from 'react-intl';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { Formik, FormikProps } from 'formik';\r\nimport * as yup from 'yup';\r\n// PROJECT IMPORTS\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport ApplicantForm from './applicantInfo/applicantReferenceForm';\r\nimport QuestionList from './questionList/index';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport { activeItem } from 'store/slices/menu';\r\nimport { useSelector } from 'store';\r\nimport { applicantInit } from 'store/slices/applicant/applicantReferences';\r\nimport { ApplicantInfo } from 'types/applicantData';\r\nimport { axiosPost, axiosPut } from 'utils/helpers/axios';\r\nimport { getInterviewDataThunk } from 'store/slices/applicant/applicantAsyncAction';\r\nimport { isPhone, isFullName, emailRegEx } from 'utils/regexHelper';\r\n\r\nconst AddApplicantReference = () => {\r\n  const dispatch = useDispatch();\r\n  const applicant = useSelector((state) => state.applicant);\r\n  const { id } = useParams();\r\n  const intl = useIntl();\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      dispatch(activeItem(['interview']));\r\n\r\n      dispatch(getInterviewDataThunk(id));\r\n    } else {\r\n      dispatch(activeItem(['applicant']));\r\n      dispatch(applicantInit());\r\n    }\r\n  }, [id, dispatch]);\r\n\r\n  return (\r\n    <Box>\r\n      <Formik\r\n        enableReinitialize\r\n        initialValues={applicant.applicantInfo}\r\n        validationSchema={yup.object().shape({\r\n          name: yup\r\n            .string()\r\n            .trim()\r\n            .min(3, 'Name must have at least 3 characters')\r\n            .max(50, `Maximum characters allowed is 50`)\r\n            .matches(isFullName, 'Sorry, only letters (a-z) are allowed')\r\n            .required('Name is required'),\r\n          age: yup.number().max(100, 'Too old').min(0, 'Too young').required('Age is required'),\r\n          email: yup\r\n            .string()\r\n            .trim()\r\n            .email('Email is not valid')\r\n            .matches(emailRegEx, 'Email is not valid')\r\n            .max(50)\r\n            .required('Email is required'),\r\n          phone: yup\r\n            .string()\r\n            .trim()\r\n            .max(11)\r\n            .matches(isPhone, 'Please enter the correct phone number format')\r\n            .required('Phone number is required'),\r\n          address: yup.string().trim().max(150),\r\n          applyPosition: yup.array().of(\r\n            yup.object().shape({\r\n              language_id: yup.string().required('Language is required'),\r\n              rank_id: yup.string().required('Rank is required'),\r\n              rank_advanced_id: yup.string().required('Rank advanced is required')\r\n            })\r\n          ),\r\n          time: yup.string().required('Time is required'),\r\n          note: yup.string().trim().max(255)\r\n        })}\r\n        onSubmit={async (values, { setSubmitting }) => {\r\n          setSubmitting(true);\r\n          if (id) {\r\n            const data = {\r\n              ...values,\r\n              status: 1,\r\n              candidateQuestions: values.questions\r\n            };\r\n            await axiosPut(`${process.env.REACT_APP_API_URL}/v1/client/candidates/${id}`, data, 'Complete').then(() =>\r\n              navigate('/history')\r\n            );\r\n          } else {\r\n            await axiosPost(`${process.env.REACT_APP_API_URL}/v1/client/candidates`, values, 'Add applicant success').then((res: any) => {\r\n              res && res.success.id && navigate(`/interview/${res.success.id}`);\r\n            });\r\n          }\r\n          await setSubmitting(false);\r\n        }}\r\n      >\r\n        {(props: FormikProps<ApplicantInfo>) => (\r\n          <form noValidate onSubmit={props.handleSubmit}>\r\n            <MainCard title={intl.formatMessage({ id: 'applicant-reference-form' })}>\r\n              <ApplicantForm interviewing={!!id} {...props} />\r\n            </MainCard>\r\n            {applicant.interviewQuestions.length > 0 && (\r\n              <>\r\n                <MainCard title={intl.formatMessage({ id: 'interview-questions' })} sx={{ margin: '1em 0' }}>\r\n                  <Stack direction=\"column\" spacing={2}>\r\n                    <QuestionList questionList={applicant.interviewQuestions} interviewing={!!id} />\r\n                  </Stack>\r\n                </MainCard>\r\n                {id && (\r\n                  <MainCard>\r\n                    <TextareaAutosize\r\n                      name=\"note\"\r\n                      onChange={props.handleChange}\r\n                      aria-label=\"minimum height\"\r\n                      minRows={3}\r\n                      placeholder=\"Note\"\r\n                      value={props.values.note}\r\n                      style={{ width: '100%', padding: '8px' }}\r\n                    />\r\n                  </MainCard>\r\n                )}\r\n\r\n                <MainCard sx={{ margin: '1em 0' }}>\r\n                  <AnimateButton>\r\n                    <Button\r\n                      disableElevation\r\n                      disabled={props.isSubmitting}\r\n                      type=\"submit\"\r\n                      fullWidth\r\n                      size=\"large\"\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                    >\r\n                      {id\r\n                        ? `Send Interview Result (${\r\n                            applicant.applicantInfo.questions &&\r\n                            applicant.applicantInfo.questions.filter((item) => item.status && item.status !== 2).length\r\n                          }/${applicant.applicantInfo.questions && applicant.applicantInfo.questions.length} answered)`\r\n                        : 'Submit'}\r\n                    </Button>\r\n                  </AnimateButton>\r\n                </MainCard>\r\n              </>\r\n            )}\r\n          </form>\r\n        )}\r\n      </Formik>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AddApplicantReference;\r\n"],"sourceRoot":""}