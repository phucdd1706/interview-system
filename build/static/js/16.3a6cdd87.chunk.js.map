{"version":3,"sources":["ui-component/extended/AnimateButton.tsx","views/pages/add-new-applicant-reference/buttonRounded.tsx","views/pages/add-new-applicant-reference/useStylesHook/makeStyle.ts","views/pages/add-new-applicant-reference/questionList/questionTag.tsx","views/pages/add-new-applicant-reference/questionList/questionStack.tsx","views/pages/interview/applicantInfo.tsx","views/pages/interview/interviewerResult.tsx","views/pages/interview/interviewQuestions.tsx","views/pages/interview/referenceResult.tsx","views/pages/interview/index.tsx"],"names":["AnimateButton","React","forwardRef","ref","offset1","offset2","children","type","direction","offset","scale","useCycle","x","cycleX","y","cycleY","div","animate","rotate","transition","repeat","Infinity","repeatType","duration","repeatDelay","undefined","onHoverEnd","onHoverStart","hover","tap","whileHover","whileTap","defaultProps","useStyles","makeStyles","buttonRounded","borderRadius","padding","minWidth","width","height","background","props","backgroundColor","color","opacity","ButtonRounded","classes","className","onClick","itemHovered","cursor","transform","QuestionTag","value","interviewing","onDeleteTag","onAddTag","useState","showNote","setShowNote","dispatch","useDispatch","Paper","variant","sx","Stack","alignItems","spacing","Typography","component","flexGrow","question","Button","questionId","FormControl","m","Select","labelId","id","label","answerScore","onChange","e","handleAnswerScore","target","MenuItem","notes","handleInterviewQuestionNotes","rows","style","resize","marginTop","placeholder","memo","QuestionStack","questionStack","onClickAddButton","onClickDeleteButton","marginBottom","questions","map","data","RenderRow","row1","key","row2","row3","row4","ApplicantInformation","applicantInfo","theme","useTheme","matchDownSM","useMediaQuery","breakpoints","down","Object","keys","row","index","fontWeight","applyPosition","position","level","length","InterviewerResult","Box","enableReinitialize","initialValues","applicantId","expectedSalary","passed","salary","onSubmit","values","a","setErrors","setStatus","setSubmitting","console","log","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","noValidate","fullWidth","InputLabel","htmlFor","OutlinedInput","name","onBlur","disableElevation","size","InterviewQuestions","interviewQuestions","dataMapping","ReferenceResult","result","element","lineHeight","InterviewPage","applicantReferences","useSelector","state","applicant","intl","useIntl","useEffect","applicantReferenceInit","getReferenceEvaluate","getReferenceEvaluateThunk","MainCard","title","formatMessage","margin","Divider","referenceEvaluate"],"mappings":"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","file":"static/js/16.3a6cdd87.chunk.js","sourcesContent":["// THIRD-PARTY\nimport React, { Ref } from 'react';\nimport { motion, useCycle } from 'framer-motion';\n\ninterface ScaleProps {\n  hover: number | string | undefined;\n  tap: number | string | undefined;\n}\n\ninterface AnimateButtonProps {\n  children?: React.ReactNode;\n  type?: 'slide' | 'scale' | 'rotate';\n  direction?: 'up' | 'down' | 'left' | 'right';\n  offset?: number;\n  scale?: ScaleProps;\n}\n\nconst AnimateButton = React.forwardRef(({ children, type, direction, offset, scale }: AnimateButtonProps, ref: Ref<HTMLDivElement>) => {\n  let offset1;\n  let offset2;\n  switch (direction) {\n    case 'up':\n    case 'left':\n      offset1 = offset;\n      offset2 = 0;\n      break;\n    case 'right':\n    case 'down':\n    default:\n      offset1 = 0;\n      offset2 = offset;\n      break;\n  }\n\n  const [x, cycleX] = useCycle(offset1, offset2);\n  const [y, cycleY] = useCycle(offset1, offset2);\n\n  switch (type) {\n    case 'rotate':\n      return (\n        <motion.div\n          ref={ref}\n          animate={{ rotate: 360 }}\n          transition={{\n            repeat: Infinity,\n            repeatType: 'loop',\n            duration: 2,\n            repeatDelay: 0\n          }}\n        >\n          {children}\n        </motion.div>\n      );\n    case 'slide':\n      if (direction === 'up' || direction === 'down') {\n        return (\n          <motion.div ref={ref} animate={{ y: y !== undefined ? y : '' }} onHoverEnd={() => cycleY()} onHoverStart={() => cycleY()}>\n            {children}\n          </motion.div>\n        );\n      }\n      return (\n        <motion.div ref={ref} animate={{ x: x !== undefined ? x : '' }} onHoverEnd={() => cycleX()} onHoverStart={() => cycleX()}>\n          {children}\n        </motion.div>\n      );\n\n    case 'scale':\n    default:\n      if (typeof scale === 'number') {\n        scale = {\n          hover: scale,\n          tap: scale\n        };\n      }\n      return (\n        <motion.div ref={ref} whileHover={{ scale: scale?.hover }} whileTap={{ scale: scale?.tap }}>\n          {children}\n        </motion.div>\n      );\n  }\n});\n\nAnimateButton.defaultProps = {\n  type: 'scale',\n  offset: 10,\n  direction: 'right',\n  scale: {\n    hover: 1,\n    tap: 0.9\n  }\n};\n\nexport default AnimateButton;\n","import { Button } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\n\ninterface Props {\n  children?: React.ReactNode;\n  onClick?: (...arg: any[]) => void;\n  backgroundColor?: string;\n  width?: string;\n  height?: string;\n  color?: string;\n}\n\nconst useStyles = makeStyles({\n  buttonRounded: {\n    borderRadius: '50%',\n    padding: 0,\n    minWidth: 'auto',\n    width: '32px',\n    height: '32px',\n    background: (props: Props) => props.backgroundColor || '#1E88E5',\n    color: (props: Props) => props.color || '#fff',\n    '&:hover': {\n      transition: 'all 0.2s ease-in-out',\n      opacity: 0.8,\n      background: (props: Props) => props.backgroundColor || '#1E88E5'\n    }\n  }\n});\n\nconst ButtonRounded = ({ children, ...props }: Props) => {\n  const classes = useStyles(props);\n  return (\n    <Button className={classes.buttonRounded} onClick={props.onClick}>\n      {children}\n    </Button>\n  );\n};\n\nexport default ButtonRounded;\n","import { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles({\n  itemHovered: {\n    cursor: 'pointer',\n    transition: '0.3s',\n    '&:hover': {\n      backgroundColor: '#c6f9ff'\n    },\n    '&:hover button': {\n      transition: '0.7s',\n      transform: 'translate(-5px, 0)'\n    }\n  }\n});\n\nexport default useStyles;\n","// THIRD-PARTY\nimport React from 'react';\nimport { Paper, Stack, Typography, Button, FormControl, MenuItem, Select } from '@mui/material';\nimport { IconX, IconPlus, IconDotsVertical } from '@tabler/icons';\n\n// PROJECT IMPORT\nimport useStyles from '../useStylesHook/makeStyle';\nimport { useDispatch } from 'store';\nimport { handleAnswerScore, handleInterviewQuestionNotes } from 'store/slices/applicantReferences';\nimport ButtonRounded from 'views/pages/add-new-applicant-reference/buttonRounded';\n\ninterface Props {\n  value: {\n    questionId: string;\n    question: string;\n    notes?: string;\n    answerScore?: string;\n  };\n  type: string;\n  interviewing?: boolean;\n  onDeleteTag?: (type: string, questionId: string) => void;\n  onAddTag?: (type: string, question: { questionId: string; question: string }) => void;\n}\n\nconst QuestionTag = ({ value, interviewing = false, type, onDeleteTag, onAddTag }: Props) => {\n  const classes = useStyles();\n  const [showNote, setShowNote] = React.useState(false);\n  const dispatch = useDispatch();\n  return (\n    <Paper className={classes.itemHovered} variant=\"outlined\" sx={{ padding: '1em' }}>\n      <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n        <Typography variant=\"body1\" component=\"span\" sx={{ flexGrow: 1 }}>\n          {value.question}\n        </Typography>\n        {onDeleteTag && (\n          <Button\n            color=\"error\"\n            sx={{ width: '24px', height: '24px', padding: 0, minWidth: 'auto', borderRadius: 99 }}\n            onClick={() => {\n              onDeleteTag(type, value.questionId);\n            }}\n          >\n            <IconX height={22} />\n          </Button>\n        )}\n        {onAddTag && (\n          <ButtonRounded\n            onClick={() => {\n              onAddTag(type, value);\n            }}\n          >\n            <IconPlus height={22} />\n          </ButtonRounded>\n        )}\n        {interviewing && (\n          <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n            <FormControl variant=\"standard\" sx={{ m: 1, minWidth: 100, height: 30 }}>\n              <Select\n                labelId=\"demo-simple-select-standard-label\"\n                id=\"demo-simple-select-standard\"\n                label=\"Evaluate\"\n                value={value.answerScore || ''}\n                onChange={(e) => {\n                  dispatch(handleAnswerScore({ questionId: value.questionId, answerScore: e.target.value }));\n                }}\n              >\n                <MenuItem value=\"\">\n                  <em>Do not enter</em>\n                </MenuItem>\n                <MenuItem value=\"bad\">Bad</MenuItem>\n                <MenuItem value=\"good\">Good</MenuItem>\n                <MenuItem value=\"excellent\">Excellent</MenuItem>\n              </Select>\n            </FormControl>\n            <Button\n              color=\"success\"\n              sx={{ width: '24px', height: '24px', padding: 0, minWidth: 'auto', borderRadius: 99 }}\n              onClick={() => {\n                setShowNote(!showNote);\n              }}\n            >\n              <IconDotsVertical height={22} />\n            </Button>\n          </Stack>\n        )}\n      </Stack>\n      {showNote && (\n        <textarea\n          value={value.notes}\n          onChange={(e) => {\n            dispatch(handleInterviewQuestionNotes({ questionId: value.questionId, notes: e.target.value }));\n          }}\n          rows={3}\n          style={{ width: '100%', resize: 'none', marginTop: '1em', padding: '0.5em' }}\n          placeholder=\"Notes\"\n        />\n      )}\n    </Paper>\n  );\n};\n\nexport default React.memo(QuestionTag);\n","// THIRD-PARTY\nimport { Stack, Typography, Box } from '@mui/material';\nimport { IconPlus } from '@tabler/icons';\nimport React from 'react';\n\n// PROJECT IMPORTS\nimport QuestionTag from './questionTag';\n\n// TYPE IMPORTS\nimport { QuestionStackInterface } from 'types/interviewQuestion';\nimport ButtonRounded from '../buttonRounded';\n\ninterface Props {\n  questionStack: QuestionStackInterface;\n  onClickAddButton?: (type: string) => void;\n  onClickDeleteButton?: (type: string, questionId: string) => void;\n  interviewing?: boolean;\n}\n\nconst QuestionStack = ({ questionStack, interviewing, onClickAddButton, onClickDeleteButton }: Props) => (\n  <Box>\n    <Stack direction=\"row\" marginBottom={2}>\n      <Typography variant=\"h3\" component=\"h3\" sx={{ flexGrow: 1 }}>\n        {questionStack.type}\n      </Typography>\n      {onClickAddButton && (\n        <ButtonRounded\n          onClick={() => {\n            onClickAddButton(questionStack.type);\n          }}\n        >\n          <IconPlus />\n        </ButtonRounded>\n      )}\n    </Stack>\n    <Stack direction=\"column\" spacing={2}>\n      {questionStack.questions.map((data) => {\n        const { questionId } = data;\n        return (\n          <QuestionTag\n            value={data}\n            type={questionStack.type}\n            onDeleteTag={onClickDeleteButton}\n            interviewing={interviewing}\n            key={questionId}\n          />\n        );\n      })}\n    </Stack>\n  </Box>\n);\n\nexport default React.memo(QuestionStack);\n","// THIRD-PARTY\nimport { Stack, Typography, useMediaQuery } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\nimport { ApplicantInfo } from 'types/applicantData';\n\nconst RenderRow = {\n  row1: [\n    {\n      key: 'firstName',\n      label: 'First Name'\n    },\n    {\n      key: 'lastName',\n      label: 'Last Name'\n    },\n    {\n      key: 'age',\n      label: 'Age'\n    }\n  ],\n  row2: [\n    {\n      key: 'email',\n      label: 'Email'\n    },\n    {\n      key: 'phone',\n      label: 'Phone'\n    }\n  ],\n  row3: [\n    {\n      key: 'address',\n      label: 'Address'\n    }\n  ],\n  row4: [\n    {\n      key: 'interviewTime',\n      label: 'Interview Time'\n    }\n  ]\n};\n\ntype dataKey = 'firstName' | 'lastName' | 'email' | 'phone' | 'address' | 'notes';\ntype rowKey = keyof typeof RenderRow;\n\ninterface Props {\n  applicantInfo: ApplicantInfo;\n}\n\nconst ApplicantInformation = ({ applicantInfo }: Props) => {\n  const theme = useTheme();\n  const matchDownSM = useMediaQuery(theme.breakpoints.down('md'));\n\n  return (\n    <Stack direction=\"column\" spacing={3}>\n      {Object.keys(RenderRow).map((row: string, index: number) => (\n        <Stack direction={matchDownSM ? 'column' : 'row'} spacing={3} key={index}>\n          {RenderRow[row as rowKey].map((data: { key: string; label: string }) => (\n            <Stack direction=\"row\" key={data.key} sx={{ flexGrow: 1 }}>\n              <Typography variant=\"h4\" component=\"h4\">\n                {data.label}: &nbsp;\n              </Typography>\n              <Typography variant=\"h4\" component=\"h4\" sx={{ fontWeight: '400' }}>\n                {applicantInfo[data.key as dataKey]}\n              </Typography>\n            </Stack>\n          ))}\n        </Stack>\n      ))}\n      <Stack direction={matchDownSM ? 'column' : 'row'}>\n        <Typography variant=\"h4\" component=\"h4\">\n          Apply Position:\n        </Typography>\n        {applicantInfo.applyPosition.map((data: { id: string; position: string; level: string }, index) => (\n          <Typography variant=\"h4\" component=\"h4\" sx={{ fontWeight: '400' }} key={index}>\n            &nbsp;{data.position} - {data.level}&nbsp;\n            {index < applicantInfo.applyPosition.length - 1 && !matchDownSM && '/'}\n          </Typography>\n        ))}\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default ApplicantInformation;\n","// THIRD-PARTY\nimport { Box, FormControl, InputLabel, MenuItem, OutlinedInput, Select, Stack, useMediaQuery, Button } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\n\nconst InterviewerResult = () => {\n  const theme = useTheme();\n  const matchDownSM = useMediaQuery(theme.breakpoints.down('md'));\n  return (\n    <Box>\n      <Formik\n        enableReinitialize\n        initialValues={{\n          applicantId: '',\n          expectedSalary: '',\n          passed: false,\n          salary: '',\n          level: '',\n          notes: ''\n        }}\n        onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\n          console.log('values', values);\n        }}\n      >\n        {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\n          <form noValidate onSubmit={handleSubmit}>\n            <Stack direction={matchDownSM ? 'column' : 'row'} spacing={2}>\n              <FormControl fullWidth>\n                <InputLabel htmlFor=\"outlined-adornment-salary\">Expected Salary</InputLabel>\n                <OutlinedInput\n                  id=\"outlined-adornment-salary\"\n                  type=\"number\"\n                  value={values.expectedSalary}\n                  name=\"expectedSalary\"\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                  label=\"expected salary\"\n                />\n              </FormControl>\n              <FormControl fullWidth>\n                <InputLabel id=\"passed\">Status</InputLabel>\n                <Select id=\"passed\" name=\"passed\" label=\"Status\" value={+values.passed} onChange={handleChange}>\n                  <MenuItem value={0}>Fail</MenuItem>\n                  <MenuItem value={1}>Pass</MenuItem>\n                </Select>\n              </FormControl>\n              <FormControl fullWidth>\n                <InputLabel id=\"passed\">Level</InputLabel>\n                <Select id=\"level\" name=\"level\" label=\"Level\" value={values.level} onChange={handleChange}>\n                  <MenuItem value=\"J1\">J1</MenuItem>\n                  <MenuItem value=\"J2\">J2</MenuItem>\n                  <MenuItem value=\"S1\">S1</MenuItem>\n                  <MenuItem value=\"S2\">S2</MenuItem>\n                  <MenuItem value=\"S3\">S3</MenuItem>\n                </Select>\n              </FormControl>\n              <FormControl fullWidth>\n                <InputLabel htmlFor=\"outlined-adornment-salary\">Salary</InputLabel>\n                <OutlinedInput\n                  id=\"outlined-adornment-salary\"\n                  type=\"number\"\n                  value={values.salary}\n                  name=\"salary\"\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                  label=\"salary\"\n                />\n              </FormControl>\n            </Stack>\n            <Box sx={{ marginTop: 3 }}>\n              <AnimateButton>\n                <Button disableElevation fullWidth size=\"large\" type=\"submit\" variant=\"contained\" color=\"secondary\">\n                  Submit\n                </Button>\n              </AnimateButton>\n            </Box>\n          </form>\n        )}\n      </Formik>\n    </Box>\n  );\n};\n\nexport default InterviewerResult;\n","// THIRD-PARTY\nimport { Stack } from '@mui/material';\nimport { useSelector } from 'store';\nimport { QuestionStackInterface } from 'types/interviewQuestion';\n\n// PROJECT IMPORTS\nimport QuestionStack from 'views/pages/add-new-applicant-reference/questionList/questionStack';\n\ninterface Props {\n  interviewQuestions: QuestionStackInterface[];\n}\n\nconst InterviewQuestions = ({ interviewQuestions }: Props) => (\n  <Stack direction=\"column\" spacing={2}>\n    {interviewQuestions.map((type) => (\n      <QuestionStack questionStack={type} key={type.type} interviewing />\n    ))}\n  </Stack>\n);\n\nexport default InterviewQuestions;\n","// THIRD-PARTY\nimport { Stack, Typography } from '@mui/material';\nimport { Box } from '@mui/system';\nimport { useState } from 'react';\n\n// PROJECT IMPORTS\nimport { ReferenceEvaluate } from 'types/applicantData';\n\nconst dataMapping = [\n  {\n    key: 'totalQuestions',\n    label: 'Total Questions'\n  },\n  {\n    key: 'passedQuestions',\n    label: 'Passed Questions'\n  },\n  {\n    key: 'failedQuestions',\n    label: 'Failed Questions'\n  },\n  {\n    key: 'passedPercentage',\n    label: 'Passed Percentage'\n  },\n  {\n    key: 'result',\n    label: 'Result'\n  },\n  {\n    key: 'salary',\n    label: 'Salary'\n  }\n];\n\ninterface Props {\n  result: ReferenceEvaluate;\n}\n\ntype keyType = keyof ReferenceEvaluate;\n\nconst ReferenceResult = ({ result }: Props) => (\n  <Box>\n    {dataMapping.map((element) => (\n      <Stack direction=\"row\" sx={{ alignItems: 'center', marginBottom: 1 }} key={element.key}>\n        <Typography variant=\"h4\" component=\"h4\" sx={{ lineHeight: 1 }}>\n          {element.label}:&nbsp;\n        </Typography>\n        <Typography variant=\"h4\" component=\"h4\" sx={{ lineHeight: 1.25, fontWeight: '400' }}>\n          {result[element.key as keyType]}\n        </Typography>\n      </Stack>\n    ))}\n  </Box>\n);\n\nexport default ReferenceResult;\n","// THIRD-PARTY\nimport { useEffect } from 'react';\nimport { Box, Button, Stack, Divider } from '@mui/material';\nimport { useIntl } from 'react-intl';\n\n// PROJECT IMPORTS\nimport MainCard from 'ui-component/cards/MainCard';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport ApplicantInformation from './applicantInfo';\nimport InterviewerResult from './interviewerResult';\nimport InterviewQuestions from './interviewQuestions';\nimport ReferenceResult from './referenceResult';\nimport { useSelector, useDispatch } from 'store';\nimport { getReferenceEvaluateThunk, applicantReferenceInit } from 'store/slices/applicantReferences';\nimport { ApplicantDataInterface } from 'types/applicantData';\n\nconst InterviewPage = () => {\n  const applicantReferences: ApplicantDataInterface = useSelector((state) => state.applicant);\n  const dispatch = useDispatch();\n  const intl = useIntl();\n\n  useEffect(() => {\n    dispatch(applicantReferenceInit());\n  }, [dispatch]);\n\n  const getReferenceEvaluate = async () => {\n    dispatch(getReferenceEvaluateThunk(applicantReferences));\n  };\n  return (\n    <Stack direction=\"column\" spacing={2}>\n      <MainCard title={intl.formatMessage({ id: 'applicant information' })}>\n        <ApplicantInformation applicantInfo={applicantReferences.applicantInfo} />\n      </MainCard>\n      <MainCard title={intl.formatMessage({ id: 'interview questions' })}>\n        {applicantReferences.interviewQuestions.length > 0 && (\n          <>\n            <InterviewQuestions interviewQuestions={applicantReferences.interviewQuestions} />\n            <Box margin=\"2em 0\">\n              <Divider />\n            </Box>\n            <Box>\n              <AnimateButton>\n                <Button\n                  disableElevation\n                  onClick={getReferenceEvaluate}\n                  fullWidth\n                  size=\"large\"\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"secondary\"\n                >\n                  Send Interview Result\n                </Button>\n              </AnimateButton>\n            </Box>\n          </>\n        )}\n      </MainCard>\n      {applicantReferences.referenceEvaluate && (\n        <>\n          <MainCard title={intl.formatMessage({ id: 'reference results' })} sx={{ margin: '1em 0' }}>\n            <ReferenceResult result={applicantReferences.referenceEvaluate} />\n          </MainCard>\n          <MainCard title={intl.formatMessage({ id: 'interviewer results' })} sx={{ margin: '1em 0' }}>\n            <InterviewerResult />\n          </MainCard>\n        </>\n      )}\n    </Stack>\n  );\n};\n\nexport default InterviewPage;\n"],"sourceRoot":""}