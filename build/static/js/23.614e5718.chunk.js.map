{"version":3,"sources":["utils/regexHelper.ts","views/pages/add-new-applicant-reference/legend/index.tsx","views/pages/add-new-applicant-reference/applicantInfo/layoutMapping.ts","views/pages/add-new-applicant-reference/applicantInfo/formInput.tsx","views/pages/add-new-applicant-reference/applicantInfo/applicantReferenceForm.tsx","views/pages/add-new-applicant-reference/useStylesHook/makeStyle.ts","views/pages/add-new-applicant-reference/questionList/questionTag.tsx","views/pages/add-new-applicant-reference/questionList/questionStack.tsx","views/pages/add-new-applicant-reference/questionList/index.tsx","views/pages/add-new-applicant-reference/index.tsx"],"names":["isEmail","isPhone","isFullName","isUserName","emailRegEx","passwordRegEx","useStyles","makeStyles","root","position","width","margin","padding","border","borderColor","borderRadius","legend","zIndex","height","background","left","transform","LegendWrapper","children","classes","Box","className","Typography","variant","component","personalDetail","label","render","key","type","required","FormInput","errors","handleChange","handleBlur","touched","values","name","readOnly","FormControl","fullWidth","error","Boolean","TextField","id","split","join","InputProps","inputProps","min","max","value","onChange","placeholder","InputLabelProps","shrink","FormHelperText","React","memo","ApplicantForm","interviewing","setFieldValue","handleSubmit","intl","useIntl","theme","useTheme","dispatch","useDispatch","matchDownMD","useMediaQuery","breakpoints","down","language","useSelector","state","ranks","rank","isSubmitting","setIsSubmitting","axios","all","axiosServices","get","then","res","getLanguageListSuccess","data","success","getRanksListSuccess","getInterviewQuestion","a","applyPosition","every","item","language_id","rank_id","rank_advanced_id","getInterviewQuestionThunk","alertError","map","row","Stack","direction","spacing","sx","paddingBottom","formatMessage","index","alignItems","flexGrow","Autocomplete","options","event","find","element","getOptionLabel","option","renderInput","params","Button","color","onClick","filter","positionIndex","minWidth","uuidv4","justifyContent","concat","marginTop","mt","md","sm","AnimateButton","disableElevation","disabled","size","itemHovered","cursor","props","status","transition","backgroundColor","QuestionTag","Paper","textOverflow","overflow","question_content","RadioGroup","e","handleAnswerStatus","candidate_id","Number","target","FormControlLabel","control","Radio","labelPlacement","QuestionStack","questionStack","onClickAddButton","onClickDeleteButton","marginBottom","Object","keys","questions","toUpperCase","question","QuestionList","questionList","useState","searchQuestion","useEffect","getQuestionsThunk","AddApplicantReference","applicant","useParams","navigate","useNavigate","activeItem","getInterviewDataThunk","applicantInit","enableReinitialize","initialValues","applicantInfo","validationSchema","yup","shape","trim","matches","age","email","phone","address","of","time","note","onSubmit","setSubmitting","candidateQuestions","axiosPut","process","axiosPost","noValidate","MainCard","title","interviewQuestions","length","TextareaAutosize","minRows","style"],"mappings":"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","file":"static/js/23.614e5718.chunk.js","sourcesContent":["// const isEmail =\n//   /^[A-Za-z0-9ĐÀÁẢẠÃẦẤẨẬẪÂẮẰẶẴĂẲÈÉẸẺẼỂẾỀỆỄÊỊÌÍĨỈÒÓỎỌÕÔỐỒỔỘỖỜỚỠỢỞƠÙÚỤỦŨỨỪỬỮỰƯÝỲỶỸỴđàáảạãầấẩậẫâắằặẵăẳèéẹẻẽểếềệễêịìíĩỉòóỏọõôốồổộỗờớỡợởơùúụủũứừửữựưýỳỷỹỵ]{1}[A-Za-z0-9ĐÀÁẢẠÃẦẤẨẬẪÂẮẰẶẴĂẲÈÉẸẺẼỂẾỀỆỄÊỊÌÍĨỈÒÓỎỌÕÔỐỒỔỘỖỜỚỠỢỞƠÙÚỤỦŨỨỪỬỮỰƯÝỲỶỸỴđàáảạãầấẩậẫâắằặẵăẳèéẹẻẽểếềệễêịìíĩỉòóỏọõôốồổộỗờớỡợởơùúụủũứừửữựưýỳỷỹỵ.@]{2,40}$$/i; // bat dau bang chu cai hoac so, theo sau la chu cai, so hoac dau .\nconst isEmail = /^[a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,4}$/;\nconst isPhone = /(84[3|5|7|8|9]|0[3|5|7|8|9])+([0-9]{8})\\b/g; // check dinh dang so dien thoai,\nconst isFullName =\n  /^[a-zA-ZÀÁÂÃÈÉÊÌÍÒÓÔÕÙÚĂĐĨŨƠàáâãèéêìíòóôõùúăđĩũơƯĂẠẢẤẦẨẪẬẮẰẲẴẶẸẺẼỀỀỂưăạảấầẩẫậắằẳẵặẹẻẽềềểỄỆỈỊỌỎỐỒỔỖỘỚỜỞỠỢỤỦỨỪễếệỉịọỏốồổỗộớờởỡợụủứừỬỮỰỲỴÝỶỸửữựỳỵỷỹ ]*$/; // check ten chi bao gom chu (a-z) hoac dau cach tu 2 - 40 ky tu\nconst isUserName = /^[a-zA-Z0-9_-]+$/;\n\nconst emailRegEx = /^[a-zA-Z0-9 @ .]+$/;\nconst passwordRegEx = /^.+$/;\n\nexport { isEmail, isPhone, isFullName, isUserName, emailRegEx, passwordRegEx };\n","// THIRD-PARTY\nimport { Box, Typography } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport { ReactElement } from 'react';\n\nconst useStyles = makeStyles({\n  root: {\n    position: 'relative',\n    width: '100%',\n    margin: '2em 0',\n    padding: '1em',\n    border: 'solid 1px',\n    borderColor: '#bdbdbd',\n    borderRadius: '4px'\n  },\n  legend: {\n    zIndex: 1,\n    position: 'absolute',\n    width: 'fit-content',\n    height: '24px',\n    background: 'white',\n    padding: '0.25em 0.5em',\n    left: '10px',\n    transform: 'translate(0, -125%)'\n  }\n});\n\ninterface Props {\n  children: ReactElement;\n  legend?: string;\n}\n\nconst LegendWrapper = ({ children, legend }: Props) => {\n  const classes = useStyles();\n  return (\n    <Box className={classes.root}>\n      {legend && (\n        <Typography variant=\"h4\" component=\"h4\" className={classes.legend}>\n          {legend}\n        </Typography>\n      )}\n      {children}\n    </Box>\n  );\n};\n\nexport default LegendWrapper;\n","const personalDetail = [\n  {\n    label: 'Information',\n    render: [\n      {\n        key: 'name',\n        label: 'Full Name',\n        type: 'text',\n        required: true\n      },\n      {\n        key: 'age',\n        label: 'Age',\n        type: 'number',\n        required: true\n      },\n      {\n        key: 'phone',\n        label: 'Phone Number',\n        type: 'tel',\n        required: true\n      }\n    ]\n  },\n  {\n    label: 'Contact',\n    render: [\n      {\n        key: 'email',\n        label: 'Email',\n        type: 'email',\n        required: true\n      }\n    ]\n  },\n  {\n    label: 'Address',\n    render: [\n      {\n        key: 'address',\n        label: 'Address',\n        type: 'text'\n      }\n    ]\n  },\n  {\n    label: 'Interview Time',\n    render: [\n      {\n        key: 'time',\n        label: 'Interview Time',\n        type: 'datetime-local',\n        required: true\n      }\n    ]\n  }\n];\n\nexport default personalDetail;\n","import React from 'react';\nimport { FormControl, FormHelperText, InputLabel, OutlinedInput, TextField } from '@mui/material';\n\nconst FormInput = ({ errors, handleBlur, handleChange, touched, values, label, required, type, name, readOnly }: any) => (\n  <FormControl fullWidth error={Boolean(touched && errors && !readOnly)}>\n    <TextField\n      id={`outlined-adornment-${label.split(' ').join('-')}`}\n      type={type}\n      required={required}\n      InputProps={type === 'number' ? { inputProps: { min: 0, max: 10, readOnly } } : { readOnly }}\n      value={values}\n      name={name}\n      onChange={handleChange}\n      label={label}\n      placeholder={label}\n      InputLabelProps={type === 'datetime-local' ? { shrink: true } : {}}\n    />\n    {touched && errors && !readOnly && (\n      <FormHelperText error id=\"standard-weight-helper-text-last-name\">\n        {errors}\n      </FormHelperText>\n    )}\n  </FormControl>\n);\n\nexport default React.memo(FormInput);\n","// THIRD-PARTY\nimport * as React from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport axios from 'axios';\nimport { Box, Button, FormControl, FormHelperText, Stack, Autocomplete, TextField, useMediaQuery } from '@mui/material';\nimport { IconX } from '@tabler/icons';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useIntl } from 'react-intl';\n\n// PROJECT IMPORTS\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport axiosServices from 'utils/axios';\nimport LegendWrapper from '../legend';\nimport { useDispatch, useSelector } from 'store';\nimport { getRanksListSuccess } from 'store/slices/rank';\nimport { getLanguageListSuccess } from 'store/slices/language';\nimport { getInterviewQuestionThunk } from 'store/slices/applicant/applicantAsyncAction';\nimport personalDetail from './layoutMapping';\n\n// TYPE IMPORTS\nimport { RankType } from 'types/rank';\nimport { Languages } from 'types/language';\nimport FormInput from './formInput';\nimport { alertError } from 'utils/helpers/axios/errorAlert';\n\ntype personalDetailType = 'name' | 'email' | 'phone' | 'address';\n\nconst ApplicantForm = ({ interviewing, errors, handleBlur, handleChange, handleSubmit, setFieldValue, touched, values }: any) => {\n  const intl = useIntl();\n  const theme = useTheme();\n  const dispatch = useDispatch();\n  const matchDownMD = useMediaQuery(theme.breakpoints.down('md'));\n  const { language } = useSelector((state) => state.language);\n  const { ranks } = useSelector((state) => state.rank);\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  React.useEffect(() => {\n    axios.all([axiosServices.get('/v1/languages/all'), axiosServices.get('/v1/ranks/all')]).then((res) => {\n      dispatch(getLanguageListSuccess({ data: res[0].data.success }));\n      dispatch(getRanksListSuccess({ data: res[1].data.success }));\n    });\n  }, [dispatch]);\n  const getInterviewQuestion = async () => {\n    const isReady = values.applyPosition.every(\n      (item: { language_id: string; rank_id: string; rank_advanced_id: string }) =>\n        item.language_id && item.rank_id && item.rank_advanced_id\n    );\n    if (isReady) {\n      setIsSubmitting(true);\n      await dispatch(getInterviewQuestionThunk(values));\n      setIsSubmitting(false);\n    } else {\n      alertError('Please select all field in apply position');\n    }\n  };\n  return (\n    <Box>\n      <>\n        {personalDetail.map((row: { label: string; render: { key: string; label: string; type: string; required?: boolean }[] }) => {\n          const { render } = row;\n          return (\n            <Stack direction={matchDownMD ? 'column' : 'row'} spacing={2} sx={{ paddingBottom: 2 }} key={row.label}>\n              {render.map((item: { key: string; label: string; type: string; required?: boolean }) => {\n                const key: personalDetailType = item.key as personalDetailType;\n                const { label, type, required } = item;\n                return (\n                  <FormInput\n                    key={`${row.label}-${label}`}\n                    touched={touched[key]}\n                    errors={errors[key]}\n                    label={label}\n                    type={type}\n                    values={values[key]}\n                    name={key}\n                    handleBlur={handleBlur}\n                    handleChange={handleChange}\n                    required={required}\n                    readOnly={interviewing}\n                  />\n                );\n              })}\n            </Stack>\n          );\n        })}\n\n        {!interviewing && (\n          <>\n            <LegendWrapper legend={intl.formatMessage({ id: 'apply-positions' })}>\n              <Box>\n                {values.applyPosition.map((item: { rank_advanced_id: string; language_id: string; rank_id: string }, index: number) => (\n                  <Stack direction=\"row\" alignItems=\"center\" spacing={2} sx={{ padding: '1em 0' }} key={uuidv4()}>\n                    <Stack direction={matchDownMD ? 'column' : 'row'} spacing={2} sx={{ flexGrow: 1 }}>\n                      <FormControl fullWidth error={Boolean(touched.applyPosition && errors.applyPosition)}>\n                        <Autocomplete\n                          options={language}\n                          onChange={(event, value) => {\n                            setFieldValue(`applyPosition[${index}].language_id`, (value && value.id) || '');\n                          }}\n                          value={language.find((element) => element.id === item.language_id)}\n                          getOptionLabel={(option: Languages) => option.name || ''}\n                          renderInput={(params) => (\n                            <TextField {...params} variant=\"standard\" label=\"Apply Position\" placeholder=\"Position\" />\n                          )}\n                          sx={{ flexGrow: 1 }}\n                        />\n                        {touched.applyPosition && errors.applyPosition && (\n                          <FormHelperText error id=\"standard-weight-helper-text-last-name\">\n                            {\n                              // @ts-ignore:next-line\n                              errors.applyPosition[index] && errors.applyPosition[index].language_id\n                            }\n                          </FormHelperText>\n                        )}\n                      </FormControl>\n                      <FormControl fullWidth error={Boolean(touched.applyPosition && errors.applyPosition)}>\n                        <Autocomplete\n                          options={ranks}\n                          onChange={(event, value) => {\n                            setFieldValue(`applyPosition[${index}].rank_id`, (value && value.id) || '');\n                          }}\n                          value={ranks.find((element) => element.id === item.rank_id)}\n                          getOptionLabel={(option: RankType) => option.name || ''}\n                          renderInput={(params) => <TextField {...params} variant=\"standard\" label=\"Rank\" placeholder=\"Rank\" />}\n                          sx={{ flexGrow: 1 }}\n                        />\n                        {touched.applyPosition && errors.applyPosition && (\n                          <FormHelperText error id=\"standard-weight-helper-text-last-name\">\n                            {\n                              // @ts-ignore:next-line\n                              errors.applyPosition[index] && errors.applyPosition[index].rank_id\n                            }\n                          </FormHelperText>\n                        )}\n                      </FormControl>\n                      <FormControl fullWidth error={Boolean(touched.applyPosition && errors.applyPosition)}>\n                        <Autocomplete\n                          options={ranks}\n                          onChange={(event, value) => {\n                            setFieldValue(`applyPosition[${index}].rank_advanced_id`, (value && value.id) || '');\n                          }}\n                          value={ranks.find((element) => element.id === item.rank_advanced_id)}\n                          getOptionLabel={(option: RankType) => option.name || ''}\n                          renderInput={(params) => (\n                            <TextField {...params} variant=\"standard\" label=\"Rank Advanced\" placeholder=\"Rank Advanced\" />\n                          )}\n                          sx={{ flexGrow: 1 }}\n                        />\n                        {touched.applyPosition && errors.applyPosition && (\n                          <FormHelperText error id=\"standard-weight-helper-text-last-name\">\n                            {\n                              // @ts-ignore:next-line\n                              errors.applyPosition[index] && errors.applyPosition[index].rank_advanced_id\n                            }\n                          </FormHelperText>\n                        )}\n                      </FormControl>\n                    </Stack>\n                    <Button\n                      variant=\"outlined\"\n                      color=\"error\"\n                      onClick={() => {\n                        setFieldValue(\n                          'applyPosition',\n                          values.applyPosition.filter(\n                            (position: { rank_advanced_id: string; language_id: string; rank_id: string }, positionIndex: number) =>\n                              positionIndex !== index\n                          )\n                        );\n                      }}\n                      sx={{ borderRadius: 9999, width: '28px', height: '28px', padding: '3px', minWidth: 'auto' }}\n                    >\n                      <IconX />\n                    </Button>\n                  </Stack>\n                ))}\n                <Stack direction=\"row\" justifyContent=\"center\" alignItems=\"center\" spacing={2}>\n                  <Button\n                    variant=\"outlined\"\n                    onClick={() => {\n                      setFieldValue('applyPosition', values.applyPosition.concat({ rank_advanced_id: '', language_id: '', rank_id: '' }));\n                    }}\n                    sx={{ marginTop: 2 }}\n                  >\n                    + Add more position\n                  </Button>\n                </Stack>\n              </Box>\n            </LegendWrapper>\n            <Box sx={{ mt: 2, width: { md: 'fit-content', sm: '100%' } }}>\n              <AnimateButton>\n                <Button\n                  disableElevation\n                  disabled={isSubmitting}\n                  onClick={getInterviewQuestion}\n                  fullWidth\n                  size=\"large\"\n                  // type=\"submit\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  sx={{ marginTop: 4 }}\n                >\n                  Get Interview Question\n                </Button>\n              </AnimateButton>\n            </Box>\n          </>\n        )}\n      </>\n    </Box>\n  );\n};\n\nexport default ApplicantForm;\n","import { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles({\n  itemHovered: {\n    cursor: 'pointer',\n    border: 'solid 1px #e0e0e0',\n    borderColor: (props: any) => {\n      if (props.interviewing) {\n        switch (props.status) {\n          case 0:\n            return 'rgb(255, 0, 0)';\n          case 1:\n            return 'rgb(0, 255, 0)';\n          case 2:\n            return '#e0e0e0';\n          default:\n            return '#e0e0e0';\n        }\n      } else {\n        return '#e0e0e0';\n      }\n    },\n    transition: '0.3s',\n    '&:hover': {\n      backgroundColor: '#c6f9ff'\n    },\n    '&:hover button': {\n      transition: '0.7s',\n      transform: 'translate(-5px, 0)'\n    }\n  }\n});\n\nexport default useStyles;\n","// THIRD-PARTY\nimport React from 'react';\nimport { Paper, Stack, Typography, FormControl, FormControlLabel, Radio, RadioGroup } from '@mui/material';\n\n// PROJECT IMPORT\nimport useStyles from '../useStylesHook/makeStyle';\nimport { useDispatch } from 'store';\nimport { handleAnswerStatus } from 'store/slices/applicant/applicantReferences';\nimport { QuestionType } from 'types/question';\n\ninterface Props {\n  value: QuestionType;\n  interviewing?: boolean;\n  index: number;\n}\n\nconst QuestionTag = ({ value, interviewing = false, index }: Props) => {\n  const classes = useStyles({ interviewing, status: value.status });\n  const dispatch = useDispatch();\n  return (\n    <Paper className={classes.itemHovered} variant=\"outlined\" sx={{ padding: '1em' }}>\n      <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n        <Typography variant=\"body1\" component=\"span\" sx={{ flexGrow: 1, textOverflow: 'ellipsis', overflow: 'hidden' }}>\n          {value.question_content}\n        </Typography>\n        {interviewing && (\n          <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n            <FormControl>\n              <RadioGroup\n                aria-labelledby=\"demo-radio-buttons-group-label\"\n                value={typeof value.status === 'number' ? value.status + 1 : 3}\n                onChange={(e) => {\n                  dispatch(handleAnswerStatus({ id: value.candidate_id || 0, status: Number(e.target.value) - 1 }));\n                }}\n                name=\"radio-buttons-group\"\n              >\n                <Stack direction=\"row\">\n                  <FormControlLabel value={3} control={<Radio />} label=\"Skip\" labelPlacement=\"top\" />\n                  <FormControlLabel value={1} control={<Radio />} label=\"Fail\" labelPlacement=\"top\" />\n                  <FormControlLabel value={2} control={<Radio />} label=\"Pass\" labelPlacement=\"top\" />\n                </Stack>\n              </RadioGroup>\n            </FormControl>\n          </Stack>\n        )}\n      </Stack>\n    </Paper>\n  );\n};\n\nexport default React.memo(QuestionTag);\n","// THIRD-PARTY\nimport { Stack, Typography, Box } from '@mui/material';\nimport React from 'react';\n\n// PROJECT IMPORTS\n\n// TYPE IMPORTS\nimport { QuestionStackInterface } from 'types/interviewQuestion';\nimport { QuestionType } from 'types/question';\nimport QuestionTag from './questionTag';\n\ninterface Props {\n  questionStack: QuestionStackInterface;\n  onClickAddButton?: (type: string) => void;\n  onClickDeleteButton?: (type: string, id: number) => void;\n  interviewing?: boolean;\n}\n\nconst QuestionStack = ({ questionStack, interviewing, onClickAddButton, onClickDeleteButton }: Props) => (\n  <Box>\n    <Stack direction=\"row\" marginBottom={2}>\n      <Typography variant=\"h3\" component=\"h3\" sx={{ flexGrow: 1 }}>\n        {questionStack.language}\n      </Typography>\n    </Stack>\n    <Stack direction=\"column\" spacing={2}>\n      {Object.keys(questionStack.questions).map((key: string) => (\n        <Box key={`${questionStack.language}-${key}`}>\n          {!interviewing && (\n            <Typography variant=\"h5\" component=\"h5\" sx={{ flexGrow: 1, padding: '8px 0' }}>\n              {key.toUpperCase()}\n            </Typography>\n          )}\n          <Stack direction=\"column\" spacing={1}>\n            {questionStack.questions[key as 'base' | 'advanced' | 'focus'].map((question: QuestionType) => (\n              <QuestionTag value={question} key={`${questionStack.language}-${question.id}-${key}`} interviewing={interviewing} index={0} />\n            ))}\n          </Stack>\n        </Box>\n      ))}\n    </Stack>\n  </Box>\n);\n\nexport default React.memo(QuestionStack);\n","// THIRD-PARTY\nimport { Stack } from '@mui/material';\nimport { useEffect, useState } from 'react';\n// PROJECT IMPORTS\nimport QuestionStack from './questionStack';\nimport { getQuestionsThunk } from 'store/slices/applicant/applicantAsyncAction';\nimport { useDispatch } from 'store';\n\n// TYPE IMPORTS\nimport { QuestionStackInterface } from 'types/interviewQuestion';\n\ninterface Props {\n  questionList: QuestionStackInterface[];\n  interviewing: boolean;\n}\n\nconst QuestionList = ({ questionList, interviewing }: Props) => {\n  const [searchQuestion] = useState({\n    rank_id: 0,\n    language_id: 0\n  });\n  const dispatch = useDispatch();\n\n  const getQuestions = (language_id: number, rank_id: number) => {\n    dispatch(getQuestionsThunk({ language_id, rank_id }));\n  };\n\n  useEffect(() => {\n    searchQuestion.language_id && searchQuestion.rank_id && getQuestions(searchQuestion.language_id, searchQuestion.rank_id);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [searchQuestion]);\n\n  return (\n    <>\n      <Stack direction=\"column\" spacing={2} sx={{ border: 'solid 1px #e9e9e9', borderRadius: 5, padding: 2 }}>\n        {questionList.map((question, index) => (\n          <QuestionStack questionStack={question} key={question.language} interviewing={interviewing} />\n        ))}\n      </Stack>\n    </>\n  );\n};\n\nexport default QuestionList;\n","// THIRD-PARTY\nimport { Box, Button, TextareaAutosize, Stack } from '@mui/material';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Formik, FormikProps } from 'formik';\nimport * as yup from 'yup';\n// PROJECT IMPORTS\nimport MainCard from 'ui-component/cards/MainCard';\nimport ApplicantForm from './applicantInfo/applicantReferenceForm';\nimport QuestionList from './questionList/index';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport { activeItem } from 'store/slices/menu';\nimport { useSelector } from 'store';\nimport { applicantInit } from 'store/slices/applicant/applicantReferences';\nimport { ApplicantInfo } from 'types/applicantData';\nimport { axiosPost, axiosPut } from 'utils/helpers/axios';\nimport { getInterviewDataThunk } from 'store/slices/applicant/applicantAsyncAction';\nimport { isPhone, isFullName, emailRegEx } from 'utils/regexHelper';\n\nconst AddApplicantReference = () => {\n  const dispatch = useDispatch();\n  const applicant = useSelector((state) => state.applicant);\n  const { id } = useParams();\n  const intl = useIntl();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (id) {\n      dispatch(activeItem(['interview']));\n\n      dispatch(getInterviewDataThunk(id));\n    } else {\n      dispatch(activeItem(['applicant']));\n      dispatch(applicantInit());\n    }\n  }, [id, dispatch]);\n\n  return (\n    <Box>\n      <Formik\n        enableReinitialize\n        initialValues={applicant.applicantInfo}\n        validationSchema={yup.object().shape({\n          name: yup\n            .string()\n            .trim()\n            .min(3, 'Name must have at least 3 characters')\n            .max(50, `Maximum characters allowed is 50`)\n            .matches(isFullName, 'Sorry, only letters (a-z) are allowed')\n            .required('Name is required'),\n          age: yup.number().max(100, 'Too old').min(0, 'Too young').required('Age is required'),\n          email: yup\n            .string()\n            .trim()\n            .email('Email is not valid')\n            .matches(emailRegEx, 'Email is not valid')\n            .max(50)\n            .required('Email is required'),\n          phone: yup\n            .string()\n            .trim()\n            .max(11)\n            .matches(isPhone, 'Please enter the correct phone number format')\n            .required('Phone number is required'),\n          address: yup.string().trim().max(255),\n          applyPosition: yup.array().of(\n            yup.object().shape({\n              language_id: yup.string().required('Language is required'),\n              rank_id: yup.string().required('Rank is required'),\n              rank_advanced_id: yup.string().required('Rank advanced is required')\n            })\n          ),\n          time: yup.string().required('Time is required'),\n          note: yup.string().trim().max(255)\n        })}\n        onSubmit={async (values, { setSubmitting }) => {\n          setSubmitting(true);\n          if (id) {\n            const data = {\n              ...values,\n              status: 1,\n              candidateQuestions: values.questions\n            };\n            await axiosPut(`${process.env.REACT_APP_API_URL}/v1/client/candidates/${id}`, data, 'Complete').then(() =>\n              navigate('/history')\n            );\n          } else {\n            await axiosPost(`${process.env.REACT_APP_API_URL}/v1/client/candidates`, values, 'Add applicant success').then((res: any) => {\n              res && res.success.id && navigate(`/interview/${res.success.id}`);\n            });\n          }\n          await setSubmitting(false);\n        }}\n      >\n        {(props: FormikProps<ApplicantInfo>) => (\n          <form noValidate onSubmit={props.handleSubmit}>\n            <MainCard title={intl.formatMessage({ id: 'applicant-reference-form' })}>\n              <ApplicantForm interviewing={!!id} {...props} />\n            </MainCard>\n            {applicant.interviewQuestions.length > 0 && (\n              <>\n                <MainCard title={intl.formatMessage({ id: 'interview-questions' })} sx={{ margin: '1em 0' }}>\n                  <Stack direction=\"column\" spacing={2}>\n                    <QuestionList questionList={applicant.interviewQuestions} interviewing={!!id} />\n                  </Stack>\n                </MainCard>\n                {id && (\n                  <MainCard>\n                    <TextareaAutosize\n                      name=\"note\"\n                      onChange={props.handleChange}\n                      aria-label=\"minimum height\"\n                      minRows={3}\n                      placeholder=\"Note\"\n                      value={props.values.note}\n                      style={{ width: '100%', padding: '8px' }}\n                    />\n                  </MainCard>\n                )}\n\n                <MainCard sx={{ margin: '1em 0' }}>\n                  <AnimateButton>\n                    <Button\n                      disableElevation\n                      disabled={props.isSubmitting}\n                      type=\"submit\"\n                      fullWidth\n                      size=\"large\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                    >\n                      {id\n                        ? `Send Interview Result (${\n                            applicant.applicantInfo.questions &&\n                            applicant.applicantInfo.questions.filter((item) => item.status && item.status !== 2).length\n                          }/${applicant.applicantInfo.questions && applicant.applicantInfo.questions.length} answered)`\n                        : 'Submit'}\n                    </Button>\n                  </AnimateButton>\n                </MainCard>\n              </>\n            )}\n          </form>\n        )}\n      </Formik>\n    </Box>\n  );\n};\n\nexport default AddApplicantReference;\n"],"sourceRoot":""}