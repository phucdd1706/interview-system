{"version":3,"sources":["ui-component/extended/AnimateButton.tsx","views/pages/add-new-applicant-reference/legend/index.tsx","store/slices/applicant/applicantAsyncAction.ts","views/pages/add-new-applicant-reference/applicantInfo/layoutMapping.ts","views/pages/add-new-applicant-reference/applicantInfo/formInput.tsx","views/pages/add-new-applicant-reference/applicantInfo/applicantReferenceForm.tsx","views/pages/add-new-applicant-reference/useStylesHook/makeStyle.ts","views/pages/add-new-applicant-reference/questionList/questionTag.tsx","views/pages/add-new-applicant-reference/questionList/questionStack.tsx","views/pages/add-new-applicant-reference/questionList/index.tsx","views/pages/add-new-applicant-reference/index.tsx"],"names":["AnimateButton","React","forwardRef","ref","offset1","offset2","children","type","direction","offset","scale","useCycle","x","cycleX","y","cycleY","div","animate","rotate","transition","repeat","Infinity","repeatType","duration","repeatDelay","undefined","onHoverEnd","onHoverStart","hover","tap","whileHover","whileTap","defaultProps","useStyles","makeStyles","root","position","width","margin","padding","border","borderColor","borderRadius","legend","zIndex","height","background","left","transform","LegendWrapper","classes","Box","className","Typography","variant","component","getQuestionsThunk","createAsyncThunk","params","a","applicantAPI","language_id","rank_id","getInterviewQuestionThunk","thunkAPI","data","applyPosition","console","log","success","dispatch","setApplicantInfo","applicant","questions","getInterviewDataThunk","id","applicantDataInit","name","age","email","phone","address","time","status","note","applicantInfo","candidate_question","interviewQuestions","map","element","question","candidate_id","questionStack","language","base","focus","advanced","Object","keys","forEach","key","question_id","split","setInterviewData","personalDetail","label","render","required","FormInput","errors","handleChange","handleBlur","touched","values","readOnly","FormControl","fullWidth","error","Boolean","InputLabel","htmlFor","join","OutlinedInput","value","onChange","FormHelperText","memo","ApplicantForm","interviewing","setFieldValue","handleSubmit","intl","useIntl","theme","useTheme","useDispatch","matchDownMD","useMediaQuery","breakpoints","down","useSelector","state","ranks","rank","isSubmitting","setIsSubmitting","axios","all","axiosServices","get","then","res","getLanguageListSuccess","getRanksListSuccess","getInterviewQuestion","every","item","rank_advanced_id","alertError","row","Stack","spacing","sx","paddingBottom","formatMessage","index","alignItems","flexGrow","Autocomplete","options","event","find","getOptionLabel","option","renderInput","TextField","placeholder","Button","color","onClick","filter","minWidth","uuidv4","justifyContent","concat","marginTop","mt","md","sm","disableElevation","disabled","size","itemHovered","cursor","props","backgroundColor","QuestionTag","Paper","question_content","RadioGroup","e","handleAnswerStatus","Number","target","FormControlLabel","control","Radio","labelPlacement","QuestionStack","onClickAddButton","onClickDeleteButton","marginBottom","QuestionList","questionList","useState","searchQuestion","useEffect","AddApplicantReference","useParams","navigate","useNavigate","activeItem","applicantInit","enableReinitialize","initialValues","validationSchema","Yup","shape","of","onSubmit","setSubmitting","candidateQuestions","axiosPut","process","axiosPost","noValidate","MainCard","title","length"],"mappings":"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","file":"static/js/20.c056c94e.chunk.js","sourcesContent":["// THIRD-PARTY\nimport React, { Ref } from 'react';\nimport { motion, useCycle } from 'framer-motion';\n\ninterface ScaleProps {\n  hover: number | string | undefined;\n  tap: number | string | undefined;\n}\n\ninterface AnimateButtonProps {\n  children?: React.ReactNode;\n  type?: 'slide' | 'scale' | 'rotate';\n  direction?: 'up' | 'down' | 'left' | 'right';\n  offset?: number;\n  scale?: ScaleProps;\n}\n\nconst AnimateButton = React.forwardRef(({ children, type, direction, offset, scale }: AnimateButtonProps, ref: Ref<HTMLDivElement>) => {\n  let offset1;\n  let offset2;\n  switch (direction) {\n    case 'up':\n    case 'left':\n      offset1 = offset;\n      offset2 = 0;\n      break;\n    case 'right':\n    case 'down':\n    default:\n      offset1 = 0;\n      offset2 = offset;\n      break;\n  }\n\n  const [x, cycleX] = useCycle(offset1, offset2);\n  const [y, cycleY] = useCycle(offset1, offset2);\n\n  switch (type) {\n    case 'rotate':\n      return (\n        <motion.div\n          ref={ref}\n          animate={{ rotate: 360 }}\n          transition={{\n            repeat: Infinity,\n            repeatType: 'loop',\n            duration: 2,\n            repeatDelay: 0\n          }}\n        >\n          {children}\n        </motion.div>\n      );\n    case 'slide':\n      if (direction === 'up' || direction === 'down') {\n        return (\n          <motion.div ref={ref} animate={{ y: y !== undefined ? y : '' }} onHoverEnd={() => cycleY()} onHoverStart={() => cycleY()}>\n            {children}\n          </motion.div>\n        );\n      }\n      return (\n        <motion.div ref={ref} animate={{ x: x !== undefined ? x : '' }} onHoverEnd={() => cycleX()} onHoverStart={() => cycleX()}>\n          {children}\n        </motion.div>\n      );\n\n    case 'scale':\n    default:\n      if (typeof scale === 'number') {\n        scale = {\n          hover: scale,\n          tap: scale\n        };\n      }\n      return (\n        <motion.div ref={ref} whileHover={{ scale: scale?.hover }} whileTap={{ scale: scale?.tap }}>\n          {children}\n        </motion.div>\n      );\n  }\n});\n\nAnimateButton.defaultProps = {\n  type: 'scale',\n  offset: 10,\n  direction: 'right',\n  scale: {\n    hover: 1,\n    tap: 0.9\n  }\n};\n\nexport default AnimateButton;\n","// THIRD-PARTY\nimport { Box, Typography } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport { ReactElement } from 'react';\n\nconst useStyles = makeStyles({\n  root: {\n    position: 'relative',\n    width: '100%',\n    margin: '2em 0',\n    padding: '1em',\n    border: 'solid 1px',\n    borderColor: '#bdbdbd',\n    borderRadius: '4px'\n  },\n  legend: {\n    zIndex: 1,\n    position: 'absolute',\n    width: 'fit-content',\n    height: '24px',\n    background: 'white',\n    padding: '0.25em 0.5em',\n    left: '10px',\n    transform: 'translate(0, -125%)'\n  }\n});\n\ninterface Props {\n  children: ReactElement;\n  legend?: string;\n}\n\nconst LegendWrapper = ({ children, legend }: Props) => {\n  const classes = useStyles();\n  return (\n    <Box className={classes.root}>\n      {legend && (\n        <Typography variant=\"h4\" component=\"h4\" className={classes.legend}>\n          {legend}\n        </Typography>\n      )}\n      {children}\n    </Box>\n  );\n};\n\nexport default LegendWrapper;\n","import { dispatch } from 'store';\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { applicantAPI, setApplicantInfo, setInterviewData } from './applicantReferences';\nimport { ApplicantInfo } from 'types/applicantData';\nimport { QuestionType } from 'types/question';\n\nexport const getQuestionsThunk = createAsyncThunk(\n  'applicantReferences/getQuestionsThunk',\n  async (params: { language_id: number; rank_id: number }) => {\n    const data = await applicantAPI.getQuestionsThunk(params.language_id, params.rank_id);\n    // return data && dispatch(setQuestions(data.success));\n  }\n);\n\nexport const getInterviewQuestionThunk = createAsyncThunk(\n  'applicant/getInterviewQuestionThunk',\n  async (params: ApplicantInfo, thunkAPI) => {\n    const data = await applicantAPI.getInterviewQuestionThunk({ data: params.applyPosition });\n    console.log(params.applyPosition);\n    console.log('data', data.success);\n    return data && dispatch(setApplicantInfo({ applicant: params, questions: data.success }));\n  }\n);\n\nexport const getInterviewDataThunk = createAsyncThunk('applicant/getInterviewDataThunk', async (id: string | number) => {\n  const applicantDataInit: ApplicantInfo = {\n    name: '',\n    age: '',\n    email: '',\n    phone: '',\n    address: '',\n    time: '',\n    applyPosition: [],\n    questions: [],\n    status: 1,\n    note: ''\n  };\n  type Keys = 'id' | 'name' | 'age' | 'email' | 'note' | 'time' | 'status';\n  const data = await applicantAPI.getInterviewDataThunk(id);\n  const applicantInfo = { ...data.success };\n  const { candidate_question } = applicantInfo;\n  const interviewQuestions: QuestionType[] =\n    candidate_question.map((element: any) => ({ ...element.question, status: element.status, candidate_id: element.id })) || [];\n  console.log(candidate_question);\n  const questionStack = {\n    language: '',\n    questions: {\n      base: interviewQuestions,\n      focus: [],\n      advanced: []\n    }\n  };\n  Object.keys(applicantDataInit).forEach((key) => {\n    if (applicantInfo && applicantInfo[key as Keys]) {\n      // @ts-ignore\n      applicantDataInit[key] = applicantInfo[key];\n    }\n  });\n  const questions = candidate_question.map((element: any) => ({\n    question_id: element.id,\n    status: element.status\n  }));\n  applicantDataInit.time = applicantDataInit.time.split('.')[0];\n  return data && dispatch(setInterviewData({ applicant: { ...applicantDataInit }, interviewQuestions: [{ ...questionStack }], questions }));\n});\n","const personalDetail = [\n  {\n    label: 'Information',\n    render: [\n      {\n        key: 'name',\n        label: 'Full Name',\n        type: 'text',\n        required: true\n      },\n      {\n        key: 'age',\n        label: 'Age',\n        type: 'number',\n        required: true\n      },\n      {\n        key: 'phone',\n        label: 'Phone Number',\n        type: 'tel',\n        required: true\n      }\n    ]\n  },\n  {\n    label: 'Contact',\n    render: [\n      {\n        key: 'email',\n        label: 'Email',\n        type: 'email',\n        required: true\n      }\n    ]\n  },\n  {\n    label: 'Address',\n    render: [\n      {\n        key: 'address',\n        label: 'Address',\n        type: 'text',\n        required: true\n      }\n    ]\n  },\n  {\n    label: 'Interview Time',\n    render: [\n      {\n        key: 'time',\n        label: 'Interview Time',\n        type: 'datetime-local',\n        required: true\n      }\n    ]\n  },\n  {\n    label: 'Note',\n    render: [\n      {\n        key: 'note',\n        label: 'Note',\n        type: 'text'\n      }\n    ]\n  }\n];\n\nexport default personalDetail;\n","import React from 'react';\nimport { FormControl, FormHelperText, InputLabel, OutlinedInput } from '@mui/material';\n\nconst FormInput = ({ errors, handleBlur, handleChange, touched, values, label, required, type, name, readOnly }: any) => (\n  <FormControl fullWidth error={Boolean(touched && errors && !readOnly)}>\n    <InputLabel htmlFor={`outlined-adornment-${label.split(' ').join('-')}`} required={required}>\n      {label}\n    </InputLabel>\n    <OutlinedInput\n      id={`outlined-adornment-${label.split(' ').join('-')}`}\n      type={type}\n      value={values}\n      name={name}\n      onChange={handleChange}\n      label={label}\n      readOnly={readOnly}\n    />\n    {touched && errors && !readOnly && (\n      <FormHelperText error id=\"standard-weight-helper-text-last-name\">\n        {errors}\n      </FormHelperText>\n    )}\n  </FormControl>\n);\n\nexport default React.memo(FormInput);\n","// THIRD-PARTY\nimport * as React from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport axios from 'axios';\nimport { Box, Button, FormControl, FormHelperText, Stack, Autocomplete, TextField, useMediaQuery } from '@mui/material';\nimport { IconX } from '@tabler/icons';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useIntl } from 'react-intl';\n\n// PROJECT IMPORTS\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport axiosServices from 'utils/axios';\nimport LegendWrapper from '../legend';\nimport { useDispatch, useSelector } from 'store';\nimport { getRanksListSuccess } from 'store/slices/rank';\nimport { getLanguageListSuccess } from 'store/slices/language';\nimport { getInterviewQuestionThunk } from 'store/slices/applicant/applicantAsyncAction';\nimport personalDetail from './layoutMapping';\n\n// TYPE IMPORTS\nimport { RankType } from 'types/rank';\nimport { Languages } from 'types/language';\nimport FormInput from './formInput';\nimport { alertError } from 'utils/helpers/axios/errorAlert';\n\ntype personalDetailType = 'name' | 'email' | 'phone' | 'address' | 'note';\n\nconst ApplicantForm = ({ interviewing, errors, handleBlur, handleChange, handleSubmit, setFieldValue, touched, values }: any) => {\n  const intl = useIntl();\n  const theme = useTheme();\n  const dispatch = useDispatch();\n  const matchDownMD = useMediaQuery(theme.breakpoints.down('md'));\n  const { language } = useSelector((state) => state.language);\n  const { ranks } = useSelector((state) => state.rank);\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  React.useEffect(() => {\n    axios.all([axiosServices.get('/v1/languages/all'), axiosServices.get('/v1/ranks/all')]).then((res) => {\n      dispatch(getLanguageListSuccess({ data: res[0].data.success }));\n      dispatch(getRanksListSuccess({ data: res[1].data.success }));\n    });\n  }, [dispatch]);\n  const getInterviewQuestion = async () => {\n    const isReady = values.applyPosition.every(\n      (item: { language_id: string; rank_id: string; rank_advanced_id: string }) =>\n        item.language_id && item.rank_id && item.rank_advanced_id\n    );\n    if (isReady) {\n      setIsSubmitting(true);\n      await dispatch(getInterviewQuestionThunk(values));\n      setIsSubmitting(false);\n    } else {\n      alertError('Please select all field in apply position');\n    }\n  };\n  return (\n    <Box>\n      <>\n        {personalDetail.map((row: { label: string; render: { key: string; label: string; type: string; required?: boolean }[] }) => {\n          const { render } = row;\n          return (\n            <Stack direction={matchDownMD ? 'column' : 'row'} spacing={2} sx={{ paddingBottom: 2 }} key={row.label}>\n              {render.map((item: { key: string; label: string; type: string; required?: boolean }) => {\n                const key: personalDetailType = item.key as personalDetailType;\n                const { label, type, required } = item;\n                return (\n                  <FormInput\n                    key={`${row.label}-${label}`}\n                    touched={touched[key]}\n                    errors={errors[key]}\n                    label={label}\n                    type={type}\n                    values={values[key]}\n                    name={key}\n                    handleBlur={handleBlur}\n                    handleChange={handleChange}\n                    required={required}\n                    readOnly={interviewing}\n                  />\n                );\n              })}\n            </Stack>\n          );\n        })}\n\n        {!interviewing && (\n          <>\n            <LegendWrapper legend={intl.formatMessage({ id: 'apply-positions' })}>\n              <Box>\n                {values.applyPosition.map((item: { rank_advanced_id: string; language_id: string; rank_id: string }, index: number) => (\n                  <Stack direction=\"row\" alignItems=\"center\" spacing={2} sx={{ padding: '1em 0' }} key={uuidv4()}>\n                    <Stack direction={matchDownMD ? 'column' : 'row'} spacing={2} sx={{ flexGrow: 1 }}>\n                      <FormControl fullWidth error={Boolean(touched.applyPosition && errors.applyPosition)}>\n                        <Autocomplete\n                          options={language}\n                          onChange={(event, value) => {\n                            setFieldValue(`applyPosition[${index}].language_id`, (value && value.id) || '');\n                          }}\n                          value={language.find((element) => element.id == item.language_id)}\n                          getOptionLabel={(option: Languages) => option.name || ''}\n                          renderInput={(params) => (\n                            <TextField {...params} variant=\"standard\" label=\"Apply Position\" placeholder=\"Position\" />\n                          )}\n                          sx={{ flexGrow: 1 }}\n                        />\n                        {touched.applyPosition && errors.applyPosition && (\n                          <FormHelperText error id=\"standard-weight-helper-text-last-name\">\n                            {\n                              // @ts-ignore:next-line\n                              errors.applyPosition[index] && errors.applyPosition[index].language_id\n                            }\n                          </FormHelperText>\n                        )}\n                      </FormControl>\n                      <FormControl fullWidth error={Boolean(touched.applyPosition && errors.applyPosition)}>\n                        <Autocomplete\n                          options={ranks}\n                          onChange={(event, value) => {\n                            setFieldValue(`applyPosition[${index}].rank_id`, (value && value.id) || '');\n                          }}\n                          value={ranks.find((element) => element.id == item.rank_id)}\n                          getOptionLabel={(option: RankType) => option.name || ''}\n                          renderInput={(params) => <TextField {...params} variant=\"standard\" label=\"Rank\" placeholder=\"Rank\" />}\n                          sx={{ flexGrow: 1 }}\n                        />\n                        {touched.applyPosition && errors.applyPosition && (\n                          <FormHelperText error id=\"standard-weight-helper-text-last-name\">\n                            {\n                              // @ts-ignore:next-line\n                              errors.applyPosition[index] && errors.applyPosition[index].rank_id\n                            }\n                          </FormHelperText>\n                        )}\n                      </FormControl>\n                      <FormControl fullWidth error={Boolean(touched.applyPosition && errors.applyPosition)}>\n                        <Autocomplete\n                          options={ranks}\n                          onChange={(event, value) => {\n                            setFieldValue(`applyPosition[${index}].rank_advanced_id`, (value && value.id) || '');\n                          }}\n                          value={ranks.find((element) => element.id == item.rank_advanced_id)}\n                          getOptionLabel={(option: RankType) => option.name || ''}\n                          renderInput={(params) => (\n                            <TextField {...params} variant=\"standard\" label=\"Rank Advanced\" placeholder=\"Rank Advanced\" />\n                          )}\n                          sx={{ flexGrow: 1 }}\n                        />\n                        {touched.applyPosition && errors.applyPosition && (\n                          <FormHelperText error id=\"standard-weight-helper-text-last-name\">\n                            {\n                              // @ts-ignore:next-line\n                              errors.applyPosition[index] && errors.applyPosition[index].rank_advanced_id\n                            }\n                          </FormHelperText>\n                        )}\n                      </FormControl>\n                    </Stack>\n                    <Button\n                      variant=\"outlined\"\n                      color=\"error\"\n                      onClick={() => {\n                        setFieldValue(\n                          'applyPosition',\n                          values.applyPosition.filter(\n                            (position: { rank_advanced_id: string; language_id: string; rank_id: string }) =>\n                              position.language_id !== item.language_id\n                          )\n                        );\n                      }}\n                      sx={{ borderRadius: 9999, width: '28px', height: '28px', padding: '3px', minWidth: 'auto' }}\n                    >\n                      <IconX />\n                    </Button>\n                  </Stack>\n                ))}\n                <Stack direction=\"row\" justifyContent=\"center\" alignItems=\"center\" spacing={2}>\n                  <Button\n                    variant=\"outlined\"\n                    onClick={() => {\n                      setFieldValue('applyPosition', values.applyPosition.concat({ rank_advanced_id: '', language_id: '', rank_id: '' }));\n                    }}\n                    sx={{ marginTop: 2 }}\n                  >\n                    + Add more position\n                  </Button>\n                </Stack>\n              </Box>\n            </LegendWrapper>\n            <Box sx={{ mt: 2, width: { md: 'fit-content', sm: '100%' } }}>\n              <AnimateButton>\n                <Button\n                  disableElevation\n                  disabled={isSubmitting}\n                  onClick={getInterviewQuestion}\n                  fullWidth\n                  size=\"large\"\n                  // type=\"submit\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  sx={{ marginTop: 4 }}\n                >\n                  Get Interview Question\n                </Button>\n              </AnimateButton>\n            </Box>\n          </>\n        )}\n      </>\n    </Box>\n  );\n};\n\nexport default ApplicantForm;\n","import { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles({\n  itemHovered: {\n    cursor: 'pointer',\n    border: 'solid 1px #e0e0e0',\n    borderColor: (props: any) => {\n      if (props.interviewing) {\n        switch (props.status) {\n          case 0:\n            return 'rgb(255, 0, 0)';\n          case 1:\n            return 'rgb(0, 255, 0)';\n          case 2:\n            return '#e0e0e0';\n          default:\n            return '#e0e0e0';\n        }\n      } else {\n        return '#e0e0e0';\n      }\n    },\n    transition: '0.3s',\n    '&:hover': {\n      backgroundColor: '#c6f9ff'\n    },\n    '&:hover button': {\n      transition: '0.7s',\n      transform: 'translate(-5px, 0)'\n    }\n  }\n});\n\nexport default useStyles;\n","// THIRD-PARTY\nimport React from 'react';\nimport { Paper, Stack, Typography, FormControl, FormControlLabel, Radio, RadioGroup } from '@mui/material';\n\n// PROJECT IMPORT\nimport useStyles from '../useStylesHook/makeStyle';\nimport { useDispatch } from 'store';\nimport { handleAnswerStatus } from 'store/slices/applicant/applicantReferences';\nimport { QuestionType } from 'types/question';\n\ninterface Props {\n  value: QuestionType;\n  interviewing?: boolean;\n  index: number;\n}\n\nconst QuestionTag = ({ value, interviewing = false, index }: Props) => {\n  const classes = useStyles({ interviewing, status: value.status });\n  const dispatch = useDispatch();\n  return (\n    <Paper className={classes.itemHovered} variant=\"outlined\" sx={{ padding: '1em' }}>\n      <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n        <Typography variant=\"body1\" component=\"span\" sx={{ flexGrow: 1 }}>\n          Câu hỏi {index + 1}: {value.question_content}?\n        </Typography>\n        {interviewing && (\n          <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n            <FormControl>\n              <RadioGroup\n                aria-labelledby=\"demo-radio-buttons-group-label\"\n                value={typeof value.status === 'number' ? value.status + 1 : 3}\n                onChange={(e) => {\n                  dispatch(handleAnswerStatus({ id: value.candidate_id || 0, status: Number(e.target.value) - 1 }));\n                }}\n                name=\"radio-buttons-group\"\n              >\n                <Stack direction=\"row\">\n                  <FormControlLabel value={3} control={<Radio />} label=\"Skip\" labelPlacement=\"top\" />\n                  <FormControlLabel value={1} control={<Radio />} label=\"Fail\" labelPlacement=\"top\" />\n                  <FormControlLabel value={2} control={<Radio />} label=\"Pass\" labelPlacement=\"top\" />\n                </Stack>\n              </RadioGroup>\n            </FormControl>\n          </Stack>\n        )}\n      </Stack>\n    </Paper>\n  );\n};\n\nexport default React.memo(QuestionTag);\n","// THIRD-PARTY\nimport { Stack, Typography, Box } from '@mui/material';\nimport React from 'react';\n\n// PROJECT IMPORTS\nimport { useDispatch } from 'store';\n\n// TYPE IMPORTS\nimport { QuestionStackInterface } from 'types/interviewQuestion';\nimport { QuestionType } from 'types/question';\nimport QuestionTag from './questionTag';\n\ninterface Props {\n  questionStack: QuestionStackInterface;\n  onClickAddButton?: (type: string) => void;\n  onClickDeleteButton?: (type: string, id: number) => void;\n  interviewing?: boolean;\n}\n\nconst QuestionStack = ({ questionStack, interviewing, onClickAddButton, onClickDeleteButton }: Props) => (\n  <Box>\n    <Stack direction=\"row\" marginBottom={2}>\n      <Typography variant=\"h3\" component=\"h3\" sx={{ flexGrow: 1 }}>\n        {questionStack.language}\n      </Typography>\n    </Stack>\n    <Stack direction=\"column\" spacing={2}>\n      {Object.keys(questionStack.questions).map((key: string) =>\n        questionStack.questions[key as 'base' | 'advanced' | 'focus'].map((question: QuestionType) => (\n          <QuestionTag value={question} key={`${questionStack.language}-${question.id}`} interviewing={interviewing} index={0} />\n        ))\n      )}\n    </Stack>\n  </Box>\n);\n\nexport default React.memo(QuestionStack);\n","// THIRD-PARTY\nimport { Stack } from '@mui/material';\nimport { useEffect, useState } from 'react';\n\n// PROJECT IMPORTS\nimport QuestionTag from './questionTag';\nimport QuestionStack from './questionStack';\nimport { getQuestionsThunk } from 'store/slices/applicant/applicantAsyncAction';\nimport { deleteInterviewQuestions, addInterviewQuestions } from 'store/slices/applicant/applicantReferences';\nimport { useDispatch } from 'store';\n\n// TYPE IMPORTS\nimport { QuestionType } from 'types/question';\nimport { QuestionStackInterface } from 'types/interviewQuestion';\n\ninterface Props {\n  questionList: QuestionStackInterface[];\n  interviewing: boolean;\n}\n\nconst QuestionList = ({ questionList, interviewing }: Props) => {\n  const [searchQuestion, setSearchQuestion] = useState({\n    rank_id: 0,\n    language_id: 0\n  });\n  const dispatch = useDispatch();\n  const deleteQuestion = (questionType: string, id: number) => {\n    dispatch(deleteInterviewQuestions({ questionType, id }));\n  };\n  const addQuestion = (questionType: string, languageT: string, question: QuestionType) => {\n    dispatch(addInterviewQuestions({ questionType, language: languageT, question }));\n  };\n  const getQuestions = (language_id: number, rank_id: number) => {\n    dispatch(getQuestionsThunk({ language_id, rank_id }));\n  };\n\n  useEffect(() => {\n    searchQuestion.language_id && searchQuestion.rank_id && getQuestions(searchQuestion.language_id, searchQuestion.rank_id);\n  }, [searchQuestion]);\n\n  return (\n    <>\n      <Stack direction=\"column\" spacing={2} sx={{ border: 'solid 1px #e9e9e9', borderRadius: 5, padding: 2 }}>\n        {questionList.map((question, index) => (\n          <QuestionStack questionStack={question} key={question.language} interviewing={interviewing} />\n        ))}\n      </Stack>\n    </>\n  );\n};\n\nexport default QuestionList;\n","// THIRD-PARTY\nimport { Box, Button, Stack } from '@mui/material';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Formik, FormikProps } from 'formik';\nimport * as Yup from 'yup';\n// PROJECT IMPORTS\nimport MainCard from 'ui-component/cards/MainCard';\nimport ApplicantForm from './applicantInfo/applicantReferenceForm';\nimport QuestionList from './questionList/index';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport { activeItem } from 'store/slices/menu';\nimport { useSelector } from 'store';\nimport { applicantInit } from 'store/slices/applicant/applicantReferences';\nimport { ApplicantInfo } from 'types/applicantData';\nimport { axiosPost, axiosPut } from 'utils/helpers/axios';\nimport { getInterviewDataThunk } from 'store/slices/applicant/applicantAsyncAction';\n\nconst AddApplicantReference = () => {\n  const dispatch = useDispatch();\n  const applicant = useSelector((state) => state.applicant);\n  const { id } = useParams();\n  const intl = useIntl();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (id) {\n      dispatch(getInterviewDataThunk(id));\n      dispatch(activeItem(['']));\n    } else {\n      dispatch(applicantInit());\n      dispatch(activeItem(['applicant']));\n    }\n  }, [id, dispatch]);\n  return (\n    <Box>\n      <Formik\n        enableReinitialize\n        initialValues={applicant.applicantInfo}\n        validationSchema={Yup.object().shape({\n          name: Yup.string().required('First name is required'),\n          age: Yup.number().required('Age is required'),\n          email: Yup.string().email('Email is invalid').required('Email is required'),\n          phone: Yup.string().required('Phone is required'),\n          address: Yup.string().required('Address is required'),\n          applyPosition: Yup.array().of(\n            Yup.object().shape({\n              language_id: Yup.string().required('Language is required'),\n              rank_id: Yup.string().required('Rank is required'),\n              rank_advanced_id: Yup.string().required('Rank advanced is required')\n            })\n          )\n        })}\n        onSubmit={async (values, { setSubmitting }) => {\n          setSubmitting(true);\n          if (id) {\n            const data = {\n              ...values,\n              status: 1,\n              candidateQuestions: values.questions\n            };\n            await axiosPut(`${process.env.REACT_APP_API_URL}/v1/client/candidates/${id}`, data, 'Success').then(() => navigate('/history'));\n          } else {\n            await axiosPost(`${process.env.REACT_APP_API_URL}/v1/client/candidates`, values, 'Add applicant success').then((res: any) => {\n              res && res.success.id && navigate(`/applicant/${res.success.id}`);\n            });\n          }\n          await setSubmitting(false);\n        }}\n      >\n        {(props: FormikProps<ApplicantInfo>) => (\n          <form noValidate onSubmit={props.handleSubmit}>\n            <MainCard title={intl.formatMessage({ id: 'applicant-reference-form' })}>\n              <ApplicantForm interviewing={!!id} {...props} />\n            </MainCard>\n            {applicant.interviewQuestions.length > 0 && (\n              <>\n                <MainCard title={intl.formatMessage({ id: 'interview-questions' })} sx={{ margin: '1em 0' }}>\n                  <Stack direction=\"column\" spacing={2}>\n                    <QuestionList questionList={applicant.interviewQuestions} interviewing={!!id} />\n                  </Stack>\n                </MainCard>\n                <MainCard sx={{ margin: '1em 0' }}>\n                  <AnimateButton>\n                    <Button\n                      disableElevation\n                      disabled={props.isSubmitting}\n                      type=\"submit\"\n                      fullWidth\n                      size=\"large\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                    >\n                      {id ? 'Send Interview Result' : 'Submit'}\n                    </Button>\n                  </AnimateButton>\n                </MainCard>\n              </>\n            )}\n          </form>\n        )}\n      </Formik>\n    </Box>\n  );\n};\n\nexport default AddApplicantReference;\n"],"sourceRoot":""}