{"version":3,"sources":["ui-component/extended/AnimateButton.tsx","views/pages/add-new-applicant-reference/legend/index.tsx","store/slices/applicant/applicantAsyncAction.ts","views/pages/add-new-applicant-reference/applicantInfo/layoutMapping.ts","views/pages/add-new-applicant-reference/applicantInfo/formInput.tsx","views/pages/add-new-applicant-reference/applicantInfo/applicantReferenceForm.tsx","views/pages/add-new-applicant-reference/useStylesHook/makeStyle.ts","views/pages/add-new-applicant-reference/questionList/questionTag.tsx","views/pages/add-new-applicant-reference/questionList/questionStack.tsx","views/pages/add-new-applicant-reference/modal/index.tsx","views/pages/add-new-applicant-reference/questionList/index.tsx","views/pages/add-new-applicant-reference/index.tsx"],"names":["AnimateButton","React","forwardRef","ref","offset1","offset2","children","type","direction","offset","scale","useCycle","x","cycleX","y","cycleY","div","animate","rotate","transition","repeat","Infinity","repeatType","duration","repeatDelay","undefined","onHoverEnd","onHoverStart","hover","tap","whileHover","whileTap","defaultProps","useStyles","makeStyles","root","position","width","margin","padding","border","borderColor","borderRadius","legend","zIndex","height","background","left","transform","LegendWrapper","classes","Box","className","Typography","variant","component","getQuestionsThunk","createAsyncThunk","params","a","applicantAPI","language_id","rank_id","data","dispatch","setQuestions","success","getInterviewQuestionThunk","thunkAPI","applyPosition","setApplicantInfo","applicant","questions","personalDetail","label","render","key","required","FormInput","errors","handleBlur","handleChange","touched","values","name","FormControl","fullWidth","error","Boolean","InputLabel","htmlFor","split","join","OutlinedInput","id","value","onBlur","onChange","inputProps","FormHelperText","memo","initialApplicantInfo","age","email","phone","address","time","Date","toISOString","note","rank_advanced_id","ApplicantForm","intl","useIntl","theme","useTheme","useDispatch","matchDownMD","useMediaQuery","breakpoints","down","language","useSelector","state","ranks","rank","axios","all","axiosServices","get","then","res","getCompleteListSuccess","getRanksListSuccess","initialValues","validationSchema","Yup","shape","of","onSubmit","setSubmitting","handleSubmit","setFieldValue","isSubmitting","noValidate","map","row","Stack","spacing","sx","paddingBottom","item","formatMessage","index","alignItems","flexGrow","Autocomplete","options","event","find","element","getOptionLabel","option","renderInput","TextField","placeholder","Button","color","onClick","filter","minWidth","uuidv4","justifyContent","concat","marginTop","mt","md","sm","disableElevation","disabled","size","itemHovered","cursor","backgroundColor","QuestionTag","interviewing","onDeleteTag","onAddTag","useState","showNote","setShowNote","Paper","question_content","Fab","minHeight","m","Select","labelId","answerScore","e","MenuItem","QuestionStack","questionStack","stackType","onClickAddButton","onClickDeleteButton","marginBottom","toUpperCase","questionsInit","question","style","top","bgcolor","boxShadow","overFlow","ModalStyled","open","onModalClose","modalTitle","Modal","onClose","MainCard","title","QuestionList","questionList","setOpen","selectedType","searchQuestion","setSearchQuestion","useEffect","Object","keys","Number","Divider","overflowY","AddApplicantReference","useNavigate","activeItem","applicantFormInit","interviewQuestions","length","applicantInfo","status","axiosPost","process"],"mappings":"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","file":"static/js/20.85fc8d79.chunk.js","sourcesContent":["// THIRD-PARTY\r\nimport React, { Ref } from 'react';\r\nimport { motion, useCycle } from 'framer-motion';\r\n\r\ninterface ScaleProps {\r\n  hover: number | string | undefined;\r\n  tap: number | string | undefined;\r\n}\r\n\r\ninterface AnimateButtonProps {\r\n  children?: React.ReactNode;\r\n  type?: 'slide' | 'scale' | 'rotate';\r\n  direction?: 'up' | 'down' | 'left' | 'right';\r\n  offset?: number;\r\n  scale?: ScaleProps;\r\n}\r\n\r\nconst AnimateButton = React.forwardRef(({ children, type, direction, offset, scale }: AnimateButtonProps, ref: Ref<HTMLDivElement>) => {\r\n  let offset1;\r\n  let offset2;\r\n  switch (direction) {\r\n    case 'up':\r\n    case 'left':\r\n      offset1 = offset;\r\n      offset2 = 0;\r\n      break;\r\n    case 'right':\r\n    case 'down':\r\n    default:\r\n      offset1 = 0;\r\n      offset2 = offset;\r\n      break;\r\n  }\r\n\r\n  const [x, cycleX] = useCycle(offset1, offset2);\r\n  const [y, cycleY] = useCycle(offset1, offset2);\r\n\r\n  switch (type) {\r\n    case 'rotate':\r\n      return (\r\n        <motion.div\r\n          ref={ref}\r\n          animate={{ rotate: 360 }}\r\n          transition={{\r\n            repeat: Infinity,\r\n            repeatType: 'loop',\r\n            duration: 2,\r\n            repeatDelay: 0\r\n          }}\r\n        >\r\n          {children}\r\n        </motion.div>\r\n      );\r\n    case 'slide':\r\n      if (direction === 'up' || direction === 'down') {\r\n        return (\r\n          <motion.div ref={ref} animate={{ y: y !== undefined ? y : '' }} onHoverEnd={() => cycleY()} onHoverStart={() => cycleY()}>\r\n            {children}\r\n          </motion.div>\r\n        );\r\n      }\r\n      return (\r\n        <motion.div ref={ref} animate={{ x: x !== undefined ? x : '' }} onHoverEnd={() => cycleX()} onHoverStart={() => cycleX()}>\r\n          {children}\r\n        </motion.div>\r\n      );\r\n\r\n    case 'scale':\r\n    default:\r\n      if (typeof scale === 'number') {\r\n        scale = {\r\n          hover: scale,\r\n          tap: scale\r\n        };\r\n      }\r\n      return (\r\n        <motion.div ref={ref} whileHover={{ scale: scale?.hover }} whileTap={{ scale: scale?.tap }}>\r\n          {children}\r\n        </motion.div>\r\n      );\r\n  }\r\n});\r\n\r\nAnimateButton.defaultProps = {\r\n  type: 'scale',\r\n  offset: 10,\r\n  direction: 'right',\r\n  scale: {\r\n    hover: 1,\r\n    tap: 0.9\r\n  }\r\n};\r\n\r\nexport default AnimateButton;\r\n","// THIRD-PARTY\r\nimport { Box, Typography } from '@mui/material';\r\nimport { makeStyles } from '@mui/styles';\r\nimport { ReactElement } from 'react';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    position: 'relative',\r\n    width: '100%',\r\n    margin: '2em 0',\r\n    padding: '1em',\r\n    border: 'solid 1px',\r\n    borderColor: '#bdbdbd',\r\n    borderRadius: '4px'\r\n  },\r\n  legend: {\r\n    zIndex: 1,\r\n    position: 'absolute',\r\n    width: 'fit-content',\r\n    height: '24px',\r\n    background: 'white',\r\n    padding: '0.25em 0.5em',\r\n    left: '10px',\r\n    transform: 'translate(0, -125%)'\r\n  }\r\n});\r\n\r\ninterface Props {\r\n  children: ReactElement;\r\n  legend?: string;\r\n}\r\n\r\nconst LegendWrapper = ({ children, legend }: Props) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Box className={classes.root}>\r\n      {legend && (\r\n        <Typography variant=\"h4\" component=\"h4\" className={classes.legend}>\r\n          {legend}\r\n        </Typography>\r\n      )}\r\n      {children}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default LegendWrapper;\r\n","import { dispatch } from 'store';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { applicantAPI, setApplicantInfo, setQuestions } from './applicantReferences';\r\nimport { ApplicantInfo } from 'types/applicantData';\r\n\r\n// export const applicantReferenceInit = createAsyncThunk('applicantReferences/applicantReferenceInit', async (applicantId: string) => {\r\n//   const data = await applicantAPI.applicantReferenceInit(applicantId);\r\n//   return data && dispatch(setApplicantInfo(data));\r\n// });\r\n\r\nexport const getQuestionsThunk = createAsyncThunk(\r\n  'applicantReferences/getQuestionsThunk',\r\n  async (params: { language_id: number; rank_id: number }) => {\r\n    const data = await applicantAPI.getQuestionsThunk(params.language_id, params.rank_id);\r\n    return data && dispatch(setQuestions(data.success));\r\n  }\r\n);\r\n\r\nexport const getInterviewQuestionThunk = createAsyncThunk(\r\n  'applicant/getInterviewQuestionThunk',\r\n  async (params: ApplicantInfo, thunkAPI) => {\r\n    const data = await applicantAPI.getInterviewQuestionThunk({ data: params.applyPosition });\r\n    return data && dispatch(setApplicantInfo({ applicant: params, questions: data.success }));\r\n  }\r\n);\r\n\r\n// export const getReferenceEvaluateThunk = createAsyncThunk(\r\n//   'applicant/getReferenceEvaluateThunk',\r\n//   async (params: ApplicantDataInterface, thunkAPI) => {\r\n//     const data = await applicantAPI.getReferenceEvaluateThunk(params);\r\n//     return data && dispatch(setReferenceEvaluate(data));\r\n//   }\r\n// );\r\n","const personalDetail = [\r\n  {\r\n    label: 'Information',\r\n    render: [\r\n      {\r\n        key: 'name',\r\n        label: 'Full Name',\r\n        type: 'text',\r\n        required: true\r\n      },\r\n      {\r\n        key: 'age',\r\n        label: 'Age',\r\n        type: 'number',\r\n        required: true\r\n      },\r\n      {\r\n        key: 'phone',\r\n        label: 'Phone Number',\r\n        type: 'tel',\r\n        required: true\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: 'Contact',\r\n    render: [\r\n      {\r\n        key: 'email',\r\n        label: 'Email',\r\n        type: 'email',\r\n        required: true\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: 'Address',\r\n    render: [\r\n      {\r\n        key: 'address',\r\n        label: 'Address',\r\n        type: 'text',\r\n        required: true\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: 'Interview Time',\r\n    render: [\r\n      {\r\n        key: 'time',\r\n        label: 'Interview Time',\r\n        type: 'datetime-local',\r\n        required: true\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: 'Note',\r\n    render: [\r\n      {\r\n        key: 'note',\r\n        label: 'Note',\r\n        type: 'text'\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport default personalDetail;\r\n","import React from 'react';\r\nimport {\r\n  Box,\r\n  Button,\r\n  FormControl,\r\n  FormHelperText,\r\n  InputLabel,\r\n  OutlinedInput,\r\n  Stack,\r\n  Autocomplete,\r\n  TextField,\r\n  useMediaQuery\r\n} from '@mui/material';\r\n\r\nconst FormInput = ({ errors, handleBlur, handleChange, touched, values, label, required, type, name }: any) => (\r\n  <FormControl fullWidth error={Boolean(touched && errors)}>\r\n    <InputLabel htmlFor={`outlined-adornment-${label.split(' ').join('-')}`} required={required}>\r\n      {label}\r\n    </InputLabel>\r\n    <OutlinedInput\r\n      id={`outlined-adornment-${label.split(' ').join('-')}`}\r\n      type={type}\r\n      value={values}\r\n      name={name}\r\n      onBlur={handleBlur}\r\n      onChange={handleChange}\r\n      label={label}\r\n      inputProps={{}}\r\n    />\r\n    {touched && errors && (\r\n      <FormHelperText error id=\"standard-weight-helper-text-last-name\">\r\n        {errors}\r\n      </FormHelperText>\r\n    )}\r\n  </FormControl>\r\n);\r\n\r\nexport default React.memo(FormInput);\r\n","// THIRD-PARTY\r\nimport * as React from 'react';\r\nimport { Formik } from 'formik';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport axios from 'axios';\r\nimport {\r\n  Box,\r\n  Button,\r\n  FormControl,\r\n  FormHelperText,\r\n  InputLabel,\r\n  OutlinedInput,\r\n  Stack,\r\n  Autocomplete,\r\n  TextField,\r\n  useMediaQuery\r\n} from '@mui/material';\r\nimport { IconX } from '@tabler/icons';\r\nimport * as Yup from 'yup';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { useIntl } from 'react-intl';\r\n\r\n// PROJECT IMPORTS\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport axiosServices from 'utils/axios';\r\nimport LegendWrapper from '../legend';\r\nimport { useDispatch, useSelector } from 'store';\r\nimport { getRanksListSuccess } from 'store/slices/rank';\r\nimport { getCompleteListSuccess } from 'store/slices/language';\r\nimport { ApplicantInfo } from 'types/applicantData';\r\nimport { getInterviewQuestionThunk } from 'store/slices/applicant/applicantAsyncAction';\r\nimport personalDetail from './layoutMapping';\r\n\r\n// TYPE IMPORTS\r\nimport { RankType } from 'types/rank';\r\nimport { Languages } from 'types/language';\r\nimport FormInput from './formInput';\r\n\r\ntype personalDetailType = 'name' | 'email' | 'phone' | 'address' | 'note';\r\n\r\nconst initialApplicantInfo: ApplicantInfo = {\r\n  name: '',\r\n  age: '',\r\n  email: 'denvl585@gmail.com',\r\n  phone: '',\r\n  address: '',\r\n  time: `${new Date().toISOString().split('T')[0]}T09:00`,\r\n  note: '',\r\n  applyPosition: [\r\n    {\r\n      rank_advanced_id: '',\r\n      language_id: '',\r\n      rank_id: ''\r\n    }\r\n  ]\r\n};\r\n\r\nconst ApplicantForm = () => {\r\n  const intl = useIntl();\r\n  const theme = useTheme();\r\n  const dispatch = useDispatch();\r\n  const matchDownMD = useMediaQuery(theme.breakpoints.down('md'));\r\n  const { language } = useSelector((state) => state.language);\r\n  const { ranks } = useSelector((state) => state.rank);\r\n  React.useEffect(() => {\r\n    axios.all([axiosServices.get('/v1/languages/all'), axiosServices.get('/v1/ranks/all')]).then((res) => {\r\n      dispatch(getCompleteListSuccess({ data: res[0].data.success }));\r\n      dispatch(getRanksListSuccess({ data: res[1].data.success }));\r\n    });\r\n  }, [dispatch]);\r\n  return (\r\n    <Box>\r\n      <Formik\r\n        initialValues={initialApplicantInfo}\r\n        validationSchema={Yup.object().shape({\r\n          name: Yup.string().required('First name is required'),\r\n          age: Yup.number().required('Age is required'),\r\n          email: Yup.string().email('Email is invalid').required('Email is required'),\r\n          phone: Yup.string().required('Phone is required'),\r\n          address: Yup.string().required('Address is required'),\r\n          applyPosition: Yup.array().of(\r\n            Yup.object().shape({\r\n              language_id: Yup.string().required('Position is required'),\r\n              rank_id: Yup.string().required('Level is required')\r\n            })\r\n          )\r\n        })}\r\n        onSubmit={async (values, { setSubmitting }) => {\r\n          setSubmitting(true);\r\n          await dispatch(getInterviewQuestionThunk(values));\r\n          setSubmitting(false);\r\n        }}\r\n      >\r\n        {({ errors, handleBlur, handleChange, handleSubmit, setFieldValue, isSubmitting, touched, values }) => (\r\n          <form noValidate onSubmit={handleSubmit}>\r\n            {personalDetail.map((row: { label: string; render: { key: string; label: string; type: string; required?: boolean }[] }) => {\r\n              const { render } = row;\r\n              return (\r\n                <Stack direction={matchDownMD ? 'column' : 'row'} spacing={2} sx={{ paddingBottom: 2 }} key={row.label}>\r\n                  {render.map((item: { key: string; label: string; type: string; required?: boolean }) => {\r\n                    const key: personalDetailType = item.key as personalDetailType;\r\n                    const { label, type, required } = item;\r\n                    return (\r\n                      <FormInput\r\n                        key={`${row.label}-${label}`}\r\n                        touched={touched[key]}\r\n                        errors={errors[key]}\r\n                        label={label}\r\n                        type={type}\r\n                        values={values[key]}\r\n                        name={key}\r\n                        handleBlur={handleBlur}\r\n                        handleChange={handleChange}\r\n                        required={required}\r\n                      />\r\n                    );\r\n                  })}\r\n                </Stack>\r\n              );\r\n            })}\r\n\r\n            <LegendWrapper legend={intl.formatMessage({ id: 'apply-positions' })}>\r\n              <Box>\r\n                {values.applyPosition.map((item: { rank_advanced_id: string; language_id: string; rank_id: string }, index: number) => (\r\n                  <Stack direction=\"row\" alignItems=\"center\" spacing={2} sx={{ padding: '1em 0' }} key={uuidv4()}>\r\n                    <Stack direction={matchDownMD ? 'column' : 'row'} spacing={2} sx={{ flexGrow: 1 }}>\r\n                      <FormControl fullWidth error={Boolean(touched.applyPosition && errors.applyPosition)}>\r\n                        <Autocomplete\r\n                          options={language}\r\n                          onChange={(event, value) => {\r\n                            setFieldValue(`applyPosition[${index}].language_id`, (value && value.id) || '');\r\n                          }}\r\n                          value={language.find((element) => element.id == item.language_id)}\r\n                          getOptionLabel={(option: Languages) => option.name || ''}\r\n                          renderInput={(params) => (\r\n                            <TextField {...params} variant=\"standard\" label=\"Apply Position\" placeholder=\"Position\" />\r\n                          )}\r\n                          sx={{ flexGrow: 1 }}\r\n                        />\r\n                        {touched.applyPosition && errors.applyPosition && (\r\n                          <FormHelperText error id=\"standard-weight-helper-text-last-name\">\r\n                            {\r\n                              // @ts-ignore:next-line\r\n                              errors.applyPosition[index] && errors.applyPosition[index].language_id\r\n                            }\r\n                          </FormHelperText>\r\n                        )}\r\n                      </FormControl>\r\n                      <FormControl fullWidth error={Boolean(touched.applyPosition && errors.applyPosition)}>\r\n                        <Autocomplete\r\n                          options={ranks}\r\n                          onChange={(event, value) => {\r\n                            setFieldValue(`applyPosition[${index}].rank_id`, (value && value.id) || '');\r\n                          }}\r\n                          value={ranks.find((element) => element.id == item.rank_id)}\r\n                          getOptionLabel={(option: RankType) => option.name || ''}\r\n                          renderInput={(params) => <TextField {...params} variant=\"standard\" label=\"Rank\" placeholder=\"Rank\" />}\r\n                          sx={{ flexGrow: 1 }}\r\n                        />\r\n                        {touched.applyPosition && errors.applyPosition && (\r\n                          <FormHelperText error id=\"standard-weight-helper-text-last-name\">\r\n                            {\r\n                              // @ts-ignore:next-line\r\n                              errors.applyPosition[index] && errors.applyPosition[index].rank_id\r\n                            }\r\n                          </FormHelperText>\r\n                        )}\r\n                      </FormControl>\r\n                      <FormControl fullWidth error={Boolean(touched.applyPosition && errors.applyPosition)}>\r\n                        <Autocomplete\r\n                          options={ranks}\r\n                          onChange={(event, value) => {\r\n                            setFieldValue(`applyPosition[${index}].rank_advanced_id`, (value && value.id) || '');\r\n                          }}\r\n                          value={ranks.find((element) => element.id == item.rank_advanced_id)}\r\n                          getOptionLabel={(option: RankType) => option.name || ''}\r\n                          renderInput={(params) => (\r\n                            <TextField {...params} variant=\"standard\" label=\"Rank Advanced\" placeholder=\"Rank Advanced\" />\r\n                          )}\r\n                          sx={{ flexGrow: 1 }}\r\n                        />\r\n                        {touched.applyPosition && errors.applyPosition && (\r\n                          <FormHelperText error id=\"standard-weight-helper-text-last-name\">\r\n                            {\r\n                              // @ts-ignore:next-line\r\n                              errors.applyPosition[index] && errors.applyPosition[index].rank_advanced_id\r\n                            }\r\n                          </FormHelperText>\r\n                        )}\r\n                      </FormControl>\r\n                    </Stack>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      color=\"error\"\r\n                      onClick={() => {\r\n                        setFieldValue(\r\n                          'applyPosition',\r\n                          values.applyPosition.filter((position) => position.language_id !== item.language_id)\r\n                        );\r\n                      }}\r\n                      sx={{ borderRadius: 9999, width: '28px', height: '28px', padding: '3px', minWidth: 'auto' }}\r\n                    >\r\n                      <IconX />\r\n                    </Button>\r\n                  </Stack>\r\n                ))}\r\n                <Stack direction=\"row\" justifyContent=\"center\" alignItems=\"center\" spacing={2}>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    onClick={() => {\r\n                      setFieldValue('applyPosition', values.applyPosition.concat({ rank_advanced_id: '', language_id: '', rank_id: '' }));\r\n                    }}\r\n                    sx={{ marginTop: 2 }}\r\n                  >\r\n                    + Add more position\r\n                  </Button>\r\n                </Stack>\r\n              </Box>\r\n            </LegendWrapper>\r\n            <Box sx={{ mt: 2, width: { md: 'fit-content', sm: '100%' } }}>\r\n              <AnimateButton>\r\n                <Button\r\n                  disableElevation\r\n                  disabled={isSubmitting}\r\n                  fullWidth\r\n                  size=\"large\"\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  sx={{ marginTop: 4 }}\r\n                >\r\n                  Get Interview Question\r\n                </Button>\r\n              </AnimateButton>\r\n            </Box>\r\n          </form>\r\n        )}\r\n      </Formik>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ApplicantForm;\r\n","import { makeStyles } from '@mui/styles';\r\n\r\nconst useStyles = makeStyles({\r\n  itemHovered: {\r\n    cursor: 'pointer',\r\n    transition: '0.3s',\r\n    '&:hover': {\r\n      backgroundColor: '#c6f9ff'\r\n    },\r\n    '&:hover button': {\r\n      transition: '0.7s',\r\n      transform: 'translate(-5px, 0)'\r\n    }\r\n  }\r\n});\r\n\r\nexport default useStyles;\r\n","// THIRD-PARTY\r\nimport React from 'react';\r\nimport { Paper, Stack, Typography, Button, FormControl, MenuItem, Select, Fab } from '@mui/material';\r\nimport { IconX, IconDotsVertical } from '@tabler/icons';\r\n\r\n// PROJECT IMPORT\r\nimport useStyles from '../useStylesHook/makeStyle';\r\nimport { useDispatch } from 'store';\r\n// import { handleAnswerScore, handleInterviewQuestionNotes, questionsInit } from 'store/slices/applicant/applicantReferences';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport { QuestionType } from 'types/question';\r\n\r\ninterface Props {\r\n  value: QuestionType;\r\n  type: string;\r\n  interviewing?: boolean;\r\n  onDeleteTag?: (questionType: string, id: number) => void;\r\n  onAddTag?: (questionType: string, language: string, question: QuestionType) => void;\r\n}\r\n\r\nconst QuestionTag = ({ value, interviewing = false, type, onDeleteTag, onAddTag }: Props) => {\r\n  const classes = useStyles();\r\n  const [showNote, setShowNote] = React.useState(false);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <Paper className={classes.itemHovered} variant=\"outlined\" sx={{ padding: '1em' }}>\r\n      <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\r\n        <Typography variant=\"body1\" component=\"span\" sx={{ flexGrow: 1 }}>\r\n          {value.question_content}\r\n        </Typography>\r\n        {onDeleteTag && (\r\n          <Button\r\n            color=\"error\"\r\n            sx={{ width: '24px', height: '24px', padding: 0, minWidth: 'auto', borderRadius: 99 }}\r\n            onClick={() => {\r\n              onDeleteTag(type, value.id || -1);\r\n            }}\r\n          >\r\n            <IconX height={22} />\r\n          </Button>\r\n        )}\r\n        {onAddTag && (\r\n          <Fab\r\n            sx={{ width: '28px', height: '28px', minHeight: 'auto', minWidth: '28px', padding: 0 }}\r\n            color=\"primary\"\r\n            aria-label=\"add\"\r\n            onClick={() => {\r\n              onAddTag(type, 'reactjs', value);\r\n            }}\r\n          >\r\n            <AddIcon height={22} />\r\n          </Fab>\r\n        )}\r\n        {interviewing && (\r\n          <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\r\n            <FormControl variant=\"standard\" sx={{ m: 1, minWidth: 100, height: 30 }}>\r\n              <Select\r\n                labelId=\"demo-simple-select-standard-label\"\r\n                id=\"demo-simple-select-standard\"\r\n                label=\"Evaluate\"\r\n                value={value.answerScore || ''}\r\n                onChange={(e) => {\r\n                  // dispatch(handleAnswerScore({ id: value.id, answerScore: e.target.value }));\r\n                }}\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>Do not enter</em>\r\n                </MenuItem>\r\n                <MenuItem value=\"bad\">Bad</MenuItem>\r\n                <MenuItem value=\"good\">Good</MenuItem>\r\n                <MenuItem value=\"excellent\">Excellent</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            <Button\r\n              color=\"success\"\r\n              sx={{ width: '24px', height: '24px', padding: 0, minWidth: 'auto', borderRadius: 99 }}\r\n              onClick={() => {\r\n                setShowNote(!showNote);\r\n              }}\r\n            >\r\n              <IconDotsVertical height={22} />\r\n            </Button>\r\n          </Stack>\r\n        )}\r\n      </Stack>\r\n      {/* {showNote && (\r\n        <textarea\r\n          value={value.notes}\r\n          onChange={(e) => {\r\n            // dispatch(handleInterviewQuestionNotes({ id: value.id, notes: e.target.value }));\r\n          }}\r\n          rows={3}\r\n          style={{ width: '100%', resize: 'none', marginTop: '1em', padding: '0.5em' }}\r\n          placeholder=\"Notes\"\r\n        />\r\n      )} */}\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default React.memo(QuestionTag);\r\n","// THIRD-PARTY\r\nimport { Stack, Typography, Box, Fab } from '@mui/material';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport React from 'react';\r\n\r\n// PROJECT IMPORTS\r\nimport QuestionTag from './questionTag';\r\nimport { useDispatch } from 'store';\r\nimport { questionsInit } from 'store/slices/applicant/applicantReferences';\r\n\r\n// TYPE IMPORTS\r\nimport { InterviewQuestions, QuestionStackInterface } from 'types/interviewQuestion';\r\nimport { QuestionType } from 'types/question';\r\n\r\ninterface Props {\r\n  questionStack: QuestionType[];\r\n  onClickAddButton?: (type: string) => void;\r\n  onClickDeleteButton?: (type: string, id: number) => void;\r\n  interviewing?: boolean;\r\n  stackType: string;\r\n}\r\n\r\nconst QuestionStack = ({ questionStack, interviewing, stackType, onClickAddButton, onClickDeleteButton }: Props) => {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <Box>\r\n      <Stack direction=\"row\" marginBottom={2}>\r\n        <Typography variant=\"h4\" component=\"h4\" sx={{ flexGrow: 1 }}>\r\n          {stackType?.toUpperCase()}\r\n        </Typography>\r\n        {onClickAddButton && (\r\n          <Fab\r\n            sx={{ width: '30px', height: '30px', minHeight: 'auto', minWidth: 'auto', padding: 0 }}\r\n            color=\"primary\"\r\n            aria-label=\"add\"\r\n            onClick={() => {\r\n              onClickAddButton(stackType);\r\n              dispatch(questionsInit());\r\n            }}\r\n          >\r\n            <AddIcon />\r\n          </Fab>\r\n        )}\r\n      </Stack>\r\n      <Stack direction=\"column\" spacing={2}>\r\n        {questionStack.map((question, index) => (\r\n          <QuestionTag value={question} type={stackType} onDeleteTag={onClickDeleteButton} interviewing={interviewing} key={index} />\r\n        ))}\r\n      </Stack>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default React.memo(QuestionStack);\r\n","// THIRD-PARTY\r\nimport { Modal } from '@mui/material';\r\nimport { ReactNode } from 'react';\r\n\r\n// PROJECT IMPORTS\r\nimport MainCard from 'ui-component/cards/MainCard';\r\n\r\ninterface ModalProps {\r\n  open: boolean;\r\n  onModalClose: () => void;\r\n  children: ReactNode;\r\n  modalTitle?: string;\r\n}\r\n\r\nconst style = {\r\n  position: 'absolute' as 'absolute',\r\n  top: '5vh',\r\n  left: '50%',\r\n  transform: 'translate(-50%)',\r\n  minWidth: 280,\r\n  width: '80vw',\r\n  height: '90vh',\r\n  bgcolor: 'background.paper',\r\n  border: '2px solid #000',\r\n  boxShadow: 24,\r\n  overFlow: 'hidden'\r\n};\r\n\r\nconst ModalStyled = ({ open, onModalClose, modalTitle, children }: ModalProps) => (\r\n  <Modal open={open} onClose={onModalClose}>\r\n    <MainCard title={modalTitle && modalTitle} sx={{ ...style }}>\r\n      {children}\r\n    </MainCard>\r\n  </Modal>\r\n);\r\n\r\nexport default ModalStyled;\r\n","// THIRD-PARTY\r\nimport { Autocomplete, Divider, Stack, TextField, Typography } from '@mui/material';\r\nimport { useEffect, useState } from 'react';\r\n\r\n// PROJECT IMPORTS\r\nimport QuestionStack from './questionStack';\r\nimport ModalStyled from '../modal';\r\nimport QuestionTag from './questionTag';\r\nimport { getQuestionsThunk } from 'store/slices/applicant/applicantAsyncAction';\r\nimport { deleteInterviewQuestions, addInterviewQuestions } from 'store/slices/applicant/applicantReferences';\r\nimport { jobPosition, jobLevel } from '../constants';\r\nimport { useDispatch, useSelector } from 'store';\r\n\r\n// TYPE IMPORTS\r\nimport { QuestionStackInterface } from 'types/interviewQuestion';\r\nimport { QuestionType } from 'types/question';\r\nimport { Languages } from 'types/language';\r\n\r\ninterface Props {\r\n  questionList: QuestionStackInterface;\r\n  type: string;\r\n}\r\n\r\nconst QuestionList = ({ questionList, type }: Props) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [selectedType, setSelectedType] = useState('basic');\r\n  const { questions } = useSelector((state) => state.applicant);\r\n  const { language } = useSelector((state) => state.language);\r\n  const { ranks } = useSelector((state) => state.rank);\r\n  const [searchQuestion, setSearchQuestion] = useState({\r\n    rank_id: 0,\r\n    language_id: 0\r\n  });\r\n  const dispatch = useDispatch();\r\n  const handleModalOpen = (questionType: string) => {\r\n    setSelectedType(questionType);\r\n    setOpen(true);\r\n  };\r\n  const handleModalClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const deleteQuestion = (questionType: string, id: number) => {\r\n    dispatch(deleteInterviewQuestions({ questionType, id }));\r\n  };\r\n  const addQuestion = (questionType: string, languageT: string, question: QuestionType) => {\r\n    dispatch(addInterviewQuestions({ questionType, language: languageT, question }));\r\n  };\r\n  const getQuestions = (language_id: number, rank_id: number) => {\r\n    dispatch(getQuestionsThunk({ language_id, rank_id }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    searchQuestion.language_id && searchQuestion.rank_id && getQuestions(searchQuestion.language_id, searchQuestion.rank_id);\r\n  }, [searchQuestion]);\r\n\r\n  return (\r\n    <>\r\n      <Stack direction=\"column\" spacing={2} sx={{ border: 'solid 1px #e9e9e9', borderRadius: 5, padding: 2 }}>\r\n        <Typography variant=\"h3\" component=\"h3\" sx={{ flexGrow: 1, marginBottom: 1 }}>\r\n          {type.toUpperCase()}\r\n        </Typography>\r\n        {Object.keys(questionList.questions).map((key) => (\r\n          <QuestionStack stackType={key} questionStack={questionList.questions[key]} key={key} />\r\n        ))}\r\n      </Stack>\r\n      <ModalStyled open={open} onModalClose={handleModalClose} modalTitle=\"Add Questions\">\r\n        <Stack direction=\"row\" alignItems=\"center\" spacing={2} sx={{ padding: '1em 0' }}>\r\n          <Autocomplete\r\n            options={language}\r\n            getOptionLabel={(option) => option.name || ''}\r\n            onChange={(event, value) => setSearchQuestion({ ...searchQuestion, language_id: (value && Number(value.id)) || -1 })}\r\n            renderInput={(params) => <TextField {...params} variant=\"standard\" label=\"Language\" placeholder=\"Language\" />}\r\n            sx={{ flexGrow: 1 }}\r\n          />\r\n          <Autocomplete\r\n            options={ranks}\r\n            onChange={(event, value) => setSearchQuestion({ ...searchQuestion, rank_id: (value && Number(value.id)) || -1 })}\r\n            getOptionLabel={(option) => option.name || ''}\r\n            renderInput={(params) => <TextField {...params} variant=\"standard\" label=\"Rank\" placeholder=\"Rank\" />}\r\n            sx={{ flexGrow: 1 }}\r\n          />\r\n        </Stack>\r\n        <Divider />\r\n        <Stack direction=\"column\" spacing={1} sx={{ padding: '1em 0', overflowY: 'auto', marginBottom: 2, height: 'calc(90vh - 200px)' }}>\r\n          {questions && questions.map((data: QuestionType, index: number) => <QuestionTag key={index} type={selectedType} value={data} />)}\r\n        </Stack>\r\n      </ModalStyled>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuestionList;\r\n","// THIRD-PARTY\r\nimport { Box, Button, Stack } from '@mui/material';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useEffect, useState } from 'react';\r\nimport { useIntl } from 'react-intl';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n// PROJECT IMPORTS\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport ApplicantForm from './applicantInfo/applicantReferenceForm';\r\nimport QuestionList from './questionList/index';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport { activeItem } from 'store/slices/menu';\r\nimport { useSelector } from 'store';\r\nimport axiosServices from 'utils/axios';\r\nimport { applicantFormInit } from 'store/slices/applicant/applicantReferences';\r\nimport { ApplicantDataAPI } from 'types/applicantData';\r\nimport { axiosPost } from 'utils/helpers/axios';\r\n\r\nconst AddApplicantReference = () => {\r\n  const dispatch = useDispatch();\r\n  const applicant = useSelector((state) => state.applicant);\r\n\r\n  const intl = useIntl();\r\n  const navigate = useNavigate();\r\n  const [isSubmitting, setSubmitting] = useState(false);\r\n  useEffect(() => {\r\n    dispatch(activeItem(['applicant']));\r\n    dispatch(applicantFormInit());\r\n  }, [dispatch]);\r\n  const submitInfo = () => {\r\n    const data: ApplicantDataAPI = { ...applicant.applicantInfo };\r\n    delete data.applyPosition;\r\n    data.status = 0;\r\n    setSubmitting(true);\r\n    axiosPost(`${process.env.REACT_APP_API_URL}/v1/client/candidates`, data, 'Add applicant success', () => setSubmitting(false));\r\n  };\r\n  return (\r\n    <Box>\r\n      <MainCard title={intl.formatMessage({ id: 'applicant-reference-form' })}>\r\n        <ApplicantForm />\r\n      </MainCard>\r\n      {applicant.interviewQuestions.length > 0 && (\r\n        <>\r\n          <MainCard title={intl.formatMessage({ id: 'interview-questions' })} sx={{ margin: '1em 0' }}>\r\n            <Stack direction=\"column\" spacing={2}>\r\n              {applicant.interviewQuestions.map((question, index) => (\r\n                <QuestionList questionList={question} type={question.type} key={index} />\r\n              ))}\r\n            </Stack>\r\n          </MainCard>\r\n          <MainCard sx={{ margin: '1em 0' }}>\r\n            <AnimateButton>\r\n              <Button\r\n                disableElevation\r\n                disabled={isSubmitting}\r\n                onClick={submitInfo}\r\n                fullWidth\r\n                size=\"large\"\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                Submit\r\n              </Button>\r\n            </AnimateButton>\r\n          </MainCard>\r\n        </>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AddApplicantReference;\r\n"],"sourceRoot":""}