{"version":3,"sources":["utils/regexHelper.ts","views/pages/add-new-applicant-reference/legend/index.tsx","views/pages/add-new-applicant-reference/applicantInfo/layoutMapping.ts","views/pages/add-new-applicant-reference/applicantInfo/formInput.tsx","views/pages/add-new-applicant-reference/applicantInfo/applicantReferenceForm.tsx","views/pages/add-new-applicant-reference/useStylesHook/makeStyle.ts","views/pages/add-new-applicant-reference/questionList/questionTag.tsx","views/pages/add-new-applicant-reference/questionList/questionStack.tsx","views/pages/add-new-applicant-reference/questionList/index.tsx","views/pages/add-new-applicant-reference/index.tsx"],"names":["isEmail","isPhone","isFullName","isUserName","useStyles","makeStyles","root","position","width","margin","padding","border","borderColor","borderRadius","legend","zIndex","height","background","left","transform","LegendWrapper","children","classes","Box","className","Typography","variant","component","personalDetail","label","render","key","type","required","FormInput","errors","handleChange","handleBlur","touched","values","name","readOnly","FormControl","fullWidth","error","Boolean","TextField","id","split","join","onBlur","e","console","log","target","value","InputProps","inputProps","min","max","onChange","placeholder","InputLabelProps","shrink","FormHelperText","React","memo","ApplicantForm","interviewing","setFieldValue","handleSubmit","intl","useIntl","theme","useTheme","dispatch","useDispatch","matchDownMD","useMediaQuery","breakpoints","down","language","useSelector","state","ranks","rank","isSubmitting","setIsSubmitting","axios","all","axiosServices","get","then","res","getLanguageListSuccess","data","success","getRanksListSuccess","getInterviewQuestion","a","applyPosition","every","item","language_id","rank_id","rank_advanced_id","getInterviewQuestionThunk","alertError","map","row","Stack","direction","spacing","sx","paddingBottom","formatMessage","index","alignItems","flexGrow","Autocomplete","options","event","find","element","getOptionLabel","option","renderInput","params","Button","color","onClick","filter","positionIndex","minWidth","uuidv4","justifyContent","concat","marginTop","mt","md","sm","AnimateButton","disableElevation","disabled","size","itemHovered","cursor","props","status","transition","backgroundColor","QuestionTag","Paper","textOverflow","overflow","question_content","RadioGroup","handleAnswerStatus","candidate_id","Number","FormControlLabel","control","Radio","labelPlacement","QuestionStack","questionStack","onClickAddButton","onClickDeleteButton","marginBottom","Object","keys","questions","toUpperCase","question","QuestionList","questionList","useState","searchQuestion","useEffect","getQuestionsThunk","AddApplicantReference","applicant","useParams","navigate","useNavigate","getInterviewDataThunk","applicantInit","activeItem","enableReinitialize","initialValues","applicantInfo","validationSchema","Yup","shape","trim","matches","age","email","phone","address","of","time","note","onSubmit","setSubmitting","candidateQuestions","axiosPut","process","axiosPost","noValidate","MainCard","title","interviewQuestions","length","TextareaAutosize","minRows","style"],"mappings":"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","file":"static/js/22.b2df470c.chunk.js","sourcesContent":["// const isEmail =\n//   /^[A-Za-z0-9ĐÀÁẢẠÃẦẤẨẬẪÂẮẰẶẴĂẲÈÉẸẺẼỂẾỀỆỄÊỊÌÍĨỈÒÓỎỌÕÔỐỒỔỘỖỜỚỠỢỞƠÙÚỤỦŨỨỪỬỮỰƯÝỲỶỸỴđàáảạãầấẩậẫâắằặẵăẳèéẹẻẽểếềệễêịìíĩỉòóỏọõôốồổộỗờớỡợởơùúụủũứừửữựưýỳỷỹỵ]{1}[A-Za-z0-9ĐÀÁẢẠÃẦẤẨẬẪÂẮẰẶẴĂẲÈÉẸẺẼỂẾỀỆỄÊỊÌÍĨỈÒÓỎỌÕÔỐỒỔỘỖỜỚỠỢỞƠÙÚỤỦŨỨỪỬỮỰƯÝỲỶỸỴđàáảạãầấẩậẫâắằặẵăẳèéẹẻẽểếềệễêịìíĩỉòóỏọõôốồổộỗờớỡợởơùúụủũứừửữựưýỳỷỹỵ.@]{2,40}$$/i; // bat dau bang chu cai hoac so, theo sau la chu cai, so hoac dau .\nconst isEmail = /^[a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,4}$/;\nconst isPhone = /^(\\+84[9|8|7|5|3]|0[9|8|7|5|3]|84[9|8|7|5|3])+([0-9]{2})+([ ]?)+([0-9]{3})+([ ]?)+([0-9]{3})\\b$/i; // check dinh dang so dien thoai,\nconst isFullName =\n  /^[a-zA-ZÀÁÂÃÈÉÊÌÍÒÓÔÕÙÚĂĐĨŨƠàáâãèéêìíòóôõùúăđĩũơƯĂẠẢẤẦẨẪẬẮẰẲẴẶẸẺẼỀỀỂưăạảấầẩẫậắằẳẵặẹẻẽềềểỄỆỈỊỌỎỐỒỔỖỘỚỜỞỠỢỤỦỨỪễếệỉịọỏốồổỗộớờởỡợụủứừỬỮỰỲỴÝỶỸửữựỳỵỷỹ ]*$/; // check ten chi bao gom chu (a-z) hoac dau cach tu 2 - 40 ky tu\nconst isUserName = /^[a-zA-Z0-9_-]+$/;\n\nexport { isEmail, isPhone, isFullName, isUserName };\n","// THIRD-PARTY\nimport { Box, Typography } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport { ReactElement } from 'react';\n\nconst useStyles = makeStyles({\n  root: {\n    position: 'relative',\n    width: '100%',\n    margin: '2em 0',\n    padding: '1em',\n    border: 'solid 1px',\n    borderColor: '#bdbdbd',\n    borderRadius: '4px'\n  },\n  legend: {\n    zIndex: 1,\n    position: 'absolute',\n    width: 'fit-content',\n    height: '24px',\n    background: 'white',\n    padding: '0.25em 0.5em',\n    left: '10px',\n    transform: 'translate(0, -125%)'\n  }\n});\n\ninterface Props {\n  children: ReactElement;\n  legend?: string;\n}\n\nconst LegendWrapper = ({ children, legend }: Props) => {\n  const classes = useStyles();\n  return (\n    <Box className={classes.root}>\n      {legend && (\n        <Typography variant=\"h4\" component=\"h4\" className={classes.legend}>\n          {legend}\n        </Typography>\n      )}\n      {children}\n    </Box>\n  );\n};\n\nexport default LegendWrapper;\n","const personalDetail = [\n  {\n    label: 'Information',\n    render: [\n      {\n        key: 'name',\n        label: 'Full Name',\n        type: 'text',\n        required: true\n      },\n      {\n        key: 'age',\n        label: 'Age',\n        type: 'number',\n        required: true\n      },\n      {\n        key: 'phone',\n        label: 'Phone Number',\n        type: 'tel',\n        required: true\n      }\n    ]\n  },\n  {\n    label: 'Contact',\n    render: [\n      {\n        key: 'email',\n        label: 'Email',\n        type: 'email',\n        required: true\n      }\n    ]\n  },\n  {\n    label: 'Address',\n    render: [\n      {\n        key: 'address',\n        label: 'Address',\n        type: 'text'\n      }\n    ]\n  },\n  {\n    label: 'Interview Time',\n    render: [\n      {\n        key: 'time',\n        label: 'Interview Time',\n        type: 'datetime-local',\n        required: true\n      }\n    ]\n  }\n];\n\nexport default personalDetail;\n","import React from 'react';\nimport { FormControl, FormHelperText, InputLabel, OutlinedInput, TextField } from '@mui/material';\n\nconst FormInput = ({ errors, handleBlur, handleChange, touched, values, label, required, type, name, readOnly }: any) => (\n  <FormControl fullWidth error={Boolean(touched && errors && !readOnly)}>\n    <TextField\n      id={`outlined-adornment-${label.split(' ').join('-')}`}\n      type={type}\n      required={required}\n      onBlur={(e) => {\n        console.log(e.target.value);\n      }}\n      InputProps={type === 'number' ? { inputProps: { min: 0, max: 10, readOnly } } : { readOnly }}\n      value={values}\n      name={name}\n      onChange={handleChange}\n      label={label}\n      placeholder={label}\n      InputLabelProps={type === 'datetime-local' ? { shrink: true } : {}}\n    />\n    {touched && errors && !readOnly && (\n      <FormHelperText error id=\"standard-weight-helper-text-last-name\">\n        {errors}\n      </FormHelperText>\n    )}\n  </FormControl>\n);\n\nexport default React.memo(FormInput);\n","// THIRD-PARTY\nimport * as React from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport axios from 'axios';\nimport { Box, Button, FormControl, FormHelperText, Stack, Autocomplete, TextField, useMediaQuery } from '@mui/material';\nimport { IconX } from '@tabler/icons';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useIntl } from 'react-intl';\n\n// PROJECT IMPORTS\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport axiosServices from 'utils/axios';\nimport LegendWrapper from '../legend';\nimport { useDispatch, useSelector } from 'store';\nimport { getRanksListSuccess } from 'store/slices/rank';\nimport { getLanguageListSuccess } from 'store/slices/language';\nimport { getInterviewQuestionThunk } from 'store/slices/applicant/applicantAsyncAction';\nimport personalDetail from './layoutMapping';\n\n// TYPE IMPORTS\nimport { RankType } from 'types/rank';\nimport { Languages } from 'types/language';\nimport FormInput from './formInput';\nimport { alertError } from 'utils/helpers/axios/errorAlert';\n\ntype personalDetailType = 'name' | 'email' | 'phone' | 'address';\n\nconst ApplicantForm = ({ interviewing, errors, handleBlur, handleChange, handleSubmit, setFieldValue, touched, values }: any) => {\n  const intl = useIntl();\n  const theme = useTheme();\n  const dispatch = useDispatch();\n  const matchDownMD = useMediaQuery(theme.breakpoints.down('md'));\n  const { language } = useSelector((state) => state.language);\n  const { ranks } = useSelector((state) => state.rank);\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  React.useEffect(() => {\n    axios.all([axiosServices.get('/v1/languages/all'), axiosServices.get('/v1/ranks/all')]).then((res) => {\n      dispatch(getLanguageListSuccess({ data: res[0].data.success }));\n      dispatch(getRanksListSuccess({ data: res[1].data.success }));\n    });\n  }, [dispatch]);\n  const getInterviewQuestion = async () => {\n    const isReady = values.applyPosition.every(\n      (item: { language_id: string; rank_id: string; rank_advanced_id: string }) =>\n        item.language_id && item.rank_id && item.rank_advanced_id\n    );\n    if (isReady) {\n      setIsSubmitting(true);\n      await dispatch(getInterviewQuestionThunk(values));\n      setIsSubmitting(false);\n    } else {\n      alertError('Please select all field in apply position');\n    }\n  };\n  return (\n    <Box>\n      <>\n        {personalDetail.map((row: { label: string; render: { key: string; label: string; type: string; required?: boolean }[] }) => {\n          const { render } = row;\n          return (\n            <Stack direction={matchDownMD ? 'column' : 'row'} spacing={2} sx={{ paddingBottom: 2 }} key={row.label}>\n              {render.map((item: { key: string; label: string; type: string; required?: boolean }) => {\n                const key: personalDetailType = item.key as personalDetailType;\n                const { label, type, required } = item;\n                return (\n                  <FormInput\n                    key={`${row.label}-${label}`}\n                    touched={touched[key]}\n                    errors={errors[key]}\n                    label={label}\n                    type={type}\n                    values={values[key]}\n                    name={key}\n                    handleBlur={handleBlur}\n                    handleChange={handleChange}\n                    required={required}\n                    readOnly={interviewing}\n                  />\n                );\n              })}\n            </Stack>\n          );\n        })}\n\n        {!interviewing && (\n          <>\n            <LegendWrapper legend={intl.formatMessage({ id: 'apply-positions' })}>\n              <Box>\n                {values.applyPosition.map((item: { rank_advanced_id: string; language_id: string; rank_id: string }, index: number) => (\n                  <Stack direction=\"row\" alignItems=\"center\" spacing={2} sx={{ padding: '1em 0' }} key={uuidv4()}>\n                    <Stack direction={matchDownMD ? 'column' : 'row'} spacing={2} sx={{ flexGrow: 1 }}>\n                      <FormControl fullWidth error={Boolean(touched.applyPosition && errors.applyPosition)}>\n                        <Autocomplete\n                          options={language}\n                          onChange={(event, value) => {\n                            setFieldValue(`applyPosition[${index}].language_id`, (value && value.id) || '');\n                          }}\n                          value={language.find((element) => element.id === item.language_id)}\n                          getOptionLabel={(option: Languages) => option.name || ''}\n                          renderInput={(params) => (\n                            <TextField {...params} variant=\"standard\" label=\"Apply Position\" placeholder=\"Position\" />\n                          )}\n                          sx={{ flexGrow: 1 }}\n                        />\n                        {touched.applyPosition && errors.applyPosition && (\n                          <FormHelperText error id=\"standard-weight-helper-text-last-name\">\n                            {\n                              // @ts-ignore:next-line\n                              errors.applyPosition[index] && errors.applyPosition[index].language_id\n                            }\n                          </FormHelperText>\n                        )}\n                      </FormControl>\n                      <FormControl fullWidth error={Boolean(touched.applyPosition && errors.applyPosition)}>\n                        <Autocomplete\n                          options={ranks}\n                          onChange={(event, value) => {\n                            setFieldValue(`applyPosition[${index}].rank_id`, (value && value.id) || '');\n                          }}\n                          value={ranks.find((element) => element.id === item.rank_id)}\n                          getOptionLabel={(option: RankType) => option.name || ''}\n                          renderInput={(params) => <TextField {...params} variant=\"standard\" label=\"Rank\" placeholder=\"Rank\" />}\n                          sx={{ flexGrow: 1 }}\n                        />\n                        {touched.applyPosition && errors.applyPosition && (\n                          <FormHelperText error id=\"standard-weight-helper-text-last-name\">\n                            {\n                              // @ts-ignore:next-line\n                              errors.applyPosition[index] && errors.applyPosition[index].rank_id\n                            }\n                          </FormHelperText>\n                        )}\n                      </FormControl>\n                      <FormControl fullWidth error={Boolean(touched.applyPosition && errors.applyPosition)}>\n                        <Autocomplete\n                          options={ranks}\n                          onChange={(event, value) => {\n                            setFieldValue(`applyPosition[${index}].rank_advanced_id`, (value && value.id) || '');\n                          }}\n                          value={ranks.find((element) => element.id === item.rank_advanced_id)}\n                          getOptionLabel={(option: RankType) => option.name || ''}\n                          renderInput={(params) => (\n                            <TextField {...params} variant=\"standard\" label=\"Rank Advanced\" placeholder=\"Rank Advanced\" />\n                          )}\n                          sx={{ flexGrow: 1 }}\n                        />\n                        {touched.applyPosition && errors.applyPosition && (\n                          <FormHelperText error id=\"standard-weight-helper-text-last-name\">\n                            {\n                              // @ts-ignore:next-line\n                              errors.applyPosition[index] && errors.applyPosition[index].rank_advanced_id\n                            }\n                          </FormHelperText>\n                        )}\n                      </FormControl>\n                    </Stack>\n                    <Button\n                      variant=\"outlined\"\n                      color=\"error\"\n                      onClick={() => {\n                        setFieldValue(\n                          'applyPosition',\n                          values.applyPosition.filter(\n                            (position: { rank_advanced_id: string; language_id: string; rank_id: string }, positionIndex: number) =>\n                              positionIndex !== index\n                          )\n                        );\n                      }}\n                      sx={{ borderRadius: 9999, width: '28px', height: '28px', padding: '3px', minWidth: 'auto' }}\n                    >\n                      <IconX />\n                    </Button>\n                  </Stack>\n                ))}\n                <Stack direction=\"row\" justifyContent=\"center\" alignItems=\"center\" spacing={2}>\n                  <Button\n                    variant=\"outlined\"\n                    onClick={() => {\n                      setFieldValue('applyPosition', values.applyPosition.concat({ rank_advanced_id: '', language_id: '', rank_id: '' }));\n                    }}\n                    sx={{ marginTop: 2 }}\n                  >\n                    + Add more position\n                  </Button>\n                </Stack>\n              </Box>\n            </LegendWrapper>\n            <Box sx={{ mt: 2, width: { md: 'fit-content', sm: '100%' } }}>\n              <AnimateButton>\n                <Button\n                  disableElevation\n                  disabled={isSubmitting}\n                  onClick={getInterviewQuestion}\n                  fullWidth\n                  size=\"large\"\n                  // type=\"submit\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  sx={{ marginTop: 4 }}\n                >\n                  Get Interview Question\n                </Button>\n              </AnimateButton>\n            </Box>\n          </>\n        )}\n      </>\n    </Box>\n  );\n};\n\nexport default ApplicantForm;\n","import { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles({\n  itemHovered: {\n    cursor: 'pointer',\n    border: 'solid 1px #e0e0e0',\n    borderColor: (props: any) => {\n      if (props.interviewing) {\n        switch (props.status) {\n          case 0:\n            return 'rgb(255, 0, 0)';\n          case 1:\n            return 'rgb(0, 255, 0)';\n          case 2:\n            return '#e0e0e0';\n          default:\n            return '#e0e0e0';\n        }\n      } else {\n        return '#e0e0e0';\n      }\n    },\n    transition: '0.3s',\n    '&:hover': {\n      backgroundColor: '#c6f9ff'\n    },\n    '&:hover button': {\n      transition: '0.7s',\n      transform: 'translate(-5px, 0)'\n    }\n  }\n});\n\nexport default useStyles;\n","// THIRD-PARTY\nimport React from 'react';\nimport { Paper, Stack, Typography, FormControl, FormControlLabel, Radio, RadioGroup } from '@mui/material';\n\n// PROJECT IMPORT\nimport useStyles from '../useStylesHook/makeStyle';\nimport { useDispatch } from 'store';\nimport { handleAnswerStatus } from 'store/slices/applicant/applicantReferences';\nimport { QuestionType } from 'types/question';\n\ninterface Props {\n  value: QuestionType;\n  interviewing?: boolean;\n  index: number;\n}\n\nconst QuestionTag = ({ value, interviewing = false, index }: Props) => {\n  const classes = useStyles({ interviewing, status: value.status });\n  const dispatch = useDispatch();\n  return (\n    <Paper className={classes.itemHovered} variant=\"outlined\" sx={{ padding: '1em' }}>\n      <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n        <Typography variant=\"body1\" component=\"span\" sx={{ flexGrow: 1, textOverflow: 'ellipsis', overflow: 'hidden' }}>\n          {value.question_content}\n        </Typography>\n        {interviewing && (\n          <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n            <FormControl>\n              <RadioGroup\n                aria-labelledby=\"demo-radio-buttons-group-label\"\n                value={typeof value.status === 'number' ? value.status + 1 : 3}\n                onChange={(e) => {\n                  dispatch(handleAnswerStatus({ id: value.candidate_id || 0, status: Number(e.target.value) - 1 }));\n                }}\n                name=\"radio-buttons-group\"\n              >\n                <Stack direction=\"row\">\n                  <FormControlLabel value={3} control={<Radio />} label=\"Skip\" labelPlacement=\"top\" />\n                  <FormControlLabel value={1} control={<Radio />} label=\"Fail\" labelPlacement=\"top\" />\n                  <FormControlLabel value={2} control={<Radio />} label=\"Pass\" labelPlacement=\"top\" />\n                </Stack>\n              </RadioGroup>\n            </FormControl>\n          </Stack>\n        )}\n      </Stack>\n    </Paper>\n  );\n};\n\nexport default React.memo(QuestionTag);\n","// THIRD-PARTY\nimport { Stack, Typography, Box } from '@mui/material';\nimport React from 'react';\n\n// PROJECT IMPORTS\n\n// TYPE IMPORTS\nimport { QuestionStackInterface } from 'types/interviewQuestion';\nimport { QuestionType } from 'types/question';\nimport QuestionTag from './questionTag';\n\ninterface Props {\n  questionStack: QuestionStackInterface;\n  onClickAddButton?: (type: string) => void;\n  onClickDeleteButton?: (type: string, id: number) => void;\n  interviewing?: boolean;\n}\n\nconst QuestionStack = ({ questionStack, interviewing, onClickAddButton, onClickDeleteButton }: Props) => (\n  <Box>\n    <Stack direction=\"row\" marginBottom={2}>\n      <Typography variant=\"h3\" component=\"h3\" sx={{ flexGrow: 1 }}>\n        {questionStack.language}\n      </Typography>\n    </Stack>\n    <Stack direction=\"column\" spacing={2}>\n      {Object.keys(questionStack.questions).map((key: string) => (\n        <Box key={`${questionStack.language}-${key}`}>\n          {!interviewing && (\n            <Typography variant=\"h5\" component=\"h5\" sx={{ flexGrow: 1, padding: '8px 0' }}>\n              {key.toUpperCase()}\n            </Typography>\n          )}\n          <Stack direction=\"column\" spacing={1}>\n            {questionStack.questions[key as 'base' | 'advanced' | 'focus'].map((question: QuestionType) => (\n              <QuestionTag value={question} key={`${questionStack.language}-${question.id}-${key}`} interviewing={interviewing} index={0} />\n            ))}\n          </Stack>\n        </Box>\n      ))}\n    </Stack>\n  </Box>\n);\n\nexport default React.memo(QuestionStack);\n","// THIRD-PARTY\nimport { Stack } from '@mui/material';\nimport { useEffect, useState } from 'react';\n// PROJECT IMPORTS\nimport QuestionStack from './questionStack';\nimport { getQuestionsThunk } from 'store/slices/applicant/applicantAsyncAction';\nimport { useDispatch } from 'store';\n\n// TYPE IMPORTS\nimport { QuestionStackInterface } from 'types/interviewQuestion';\n\ninterface Props {\n  questionList: QuestionStackInterface[];\n  interviewing: boolean;\n}\n\nconst QuestionList = ({ questionList, interviewing }: Props) => {\n  const [searchQuestion] = useState({\n    rank_id: 0,\n    language_id: 0\n  });\n  const dispatch = useDispatch();\n\n  const getQuestions = (language_id: number, rank_id: number) => {\n    dispatch(getQuestionsThunk({ language_id, rank_id }));\n  };\n\n  useEffect(() => {\n    searchQuestion.language_id && searchQuestion.rank_id && getQuestions(searchQuestion.language_id, searchQuestion.rank_id);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [searchQuestion]);\n\n  return (\n    <>\n      <Stack direction=\"column\" spacing={2} sx={{ border: 'solid 1px #e9e9e9', borderRadius: 5, padding: 2 }}>\n        {questionList.map((question, index) => (\n          <QuestionStack questionStack={question} key={question.language} interviewing={interviewing} />\n        ))}\n      </Stack>\n    </>\n  );\n};\n\nexport default QuestionList;\n","// THIRD-PARTY\nimport { Box, Button, TextareaAutosize, Stack } from '@mui/material';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Formik, FormikProps } from 'formik';\nimport * as Yup from 'yup';\n// PROJECT IMPORTS\nimport MainCard from 'ui-component/cards/MainCard';\nimport ApplicantForm from './applicantInfo/applicantReferenceForm';\nimport QuestionList from './questionList/index';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport { activeItem } from 'store/slices/menu';\nimport { useSelector } from 'store';\nimport { applicantInit } from 'store/slices/applicant/applicantReferences';\nimport { ApplicantInfo } from 'types/applicantData';\nimport { axiosPost, axiosPut } from 'utils/helpers/axios';\nimport { getInterviewDataThunk } from 'store/slices/applicant/applicantAsyncAction';\nimport { isPhone, isFullName } from 'utils/regexHelper';\n\nconst AddApplicantReference = () => {\n  const dispatch = useDispatch();\n  const applicant = useSelector((state) => state.applicant);\n  const { id } = useParams();\n  const intl = useIntl();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (id) {\n      dispatch(getInterviewDataThunk(id));\n    } else {\n      dispatch(applicantInit());\n    }\n  }, [id, dispatch]);\n  useEffect(() => {\n    if (id) {\n      dispatch(activeItem(['interview']));\n    } else {\n      dispatch(activeItem(['applicant']));\n    }\n  }, []);\n  return (\n    <Box>\n      <Formik\n        enableReinitialize\n        initialValues={applicant.applicantInfo}\n        validationSchema={Yup.object().shape({\n          name: Yup.string()\n            .trim()\n            .min(3, 'Name must have at least 3 characters')\n            .max(50, `Maximum characters allowed is 50`)\n            .matches(isFullName, 'Sorry, only letters (a-z) are allowed')\n            .required('Name is required'),\n          age: Yup.number().max(100, 'Too old').min(0, 'Too young').required('Age is required'),\n          email: Yup.string().trim().email('Email is not valid').required('Email is required'),\n          phone: Yup.string()\n            .trim()\n            .max(10, 'Please enter the correct phone number format')\n            .matches(isPhone, 'Please enter the correct phone number format')\n            .required('Phone number is required'),\n          address: Yup.string().max(255),\n          applyPosition: Yup.array().of(\n            Yup.object().shape({\n              language_id: Yup.string().required('Language is required'),\n              rank_id: Yup.string().required('Rank is required'),\n              rank_advanced_id: Yup.string().required('Rank advanced is required')\n            })\n          ),\n          time: Yup.string().required('Time is required'),\n          note: Yup.string().max(255)\n        })}\n        onSubmit={async (values, { setSubmitting }) => {\n          setSubmitting(true);\n          if (id) {\n            const data = {\n              ...values,\n              status: 1,\n              candidateQuestions: values.questions\n            };\n            await axiosPut(`${process.env.REACT_APP_API_URL}/v1/client/candidates/${id}`, data, 'Complete').then(() =>\n              navigate('/history')\n            );\n          } else {\n            await axiosPost(`${process.env.REACT_APP_API_URL}/v1/client/candidates`, values, 'Add applicant success').then((res: any) => {\n              res && res.success.id && navigate(`/interview/${res.success.id}`);\n            });\n          }\n          await setSubmitting(false);\n        }}\n      >\n        {(props: FormikProps<ApplicantInfo>) => (\n          <form noValidate onSubmit={props.handleSubmit}>\n            <MainCard title={intl.formatMessage({ id: 'applicant-reference-form' })}>\n              <ApplicantForm interviewing={!!id} {...props} />\n            </MainCard>\n            {applicant.interviewQuestions.length > 0 && (\n              <>\n                <MainCard title={intl.formatMessage({ id: 'interview-questions' })} sx={{ margin: '1em 0' }}>\n                  <Stack direction=\"column\" spacing={2}>\n                    <QuestionList questionList={applicant.interviewQuestions} interviewing={!!id} />\n                  </Stack>\n                </MainCard>\n                {id && (\n                  <MainCard>\n                    <TextareaAutosize\n                      name=\"note\"\n                      onChange={props.handleChange}\n                      aria-label=\"minimum height\"\n                      minRows={3}\n                      placeholder=\"Note\"\n                      value={props.values.note}\n                      style={{ width: '100%', padding: '8px' }}\n                    />\n                  </MainCard>\n                )}\n\n                <MainCard sx={{ margin: '1em 0' }}>\n                  <AnimateButton>\n                    <Button\n                      disableElevation\n                      disabled={props.isSubmitting}\n                      type=\"submit\"\n                      fullWidth\n                      size=\"large\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                    >\n                      {id\n                        ? `Send Interview Result (${\n                            applicant.applicantInfo.questions &&\n                            applicant.applicantInfo.questions.filter((item) => item.status && item.status !== 2).length\n                          }/${applicant.applicantInfo.questions && applicant.applicantInfo.questions.length} answered)`\n                        : 'Submit'}\n                    </Button>\n                  </AnimateButton>\n                </MainCard>\n              </>\n            )}\n          </form>\n        )}\n      </Formik>\n    </Box>\n  );\n};\n\nexport default AddApplicantReference;\n"],"sourceRoot":""}