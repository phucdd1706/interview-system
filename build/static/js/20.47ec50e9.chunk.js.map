{"version":3,"sources":["ui-component/extended/AnimateButton.tsx","views/pages/add-new-applicant-reference/legend/index.tsx","store/slices/applicant/applicantAsyncAction.ts","views/pages/add-new-applicant-reference/applicantInfo/layoutMapping.ts","views/pages/add-new-applicant-reference/applicantInfo/formInput.tsx","views/pages/add-new-applicant-reference/applicantInfo/applicantReferenceForm.tsx","views/pages/add-new-applicant-reference/useStylesHook/makeStyle.ts","views/pages/add-new-applicant-reference/questionList/questionTag.tsx","views/pages/add-new-applicant-reference/questionList/questionStack.tsx","views/pages/add-new-applicant-reference/questionList/index.tsx","views/pages/add-new-applicant-reference/index.tsx"],"names":["AnimateButton","React","forwardRef","ref","offset1","offset2","children","type","direction","offset","scale","useCycle","x","cycleX","y","cycleY","div","animate","rotate","transition","repeat","Infinity","repeatType","duration","repeatDelay","undefined","onHoverEnd","onHoverStart","hover","tap","whileHover","whileTap","defaultProps","useStyles","makeStyles","root","position","width","margin","padding","border","borderColor","borderRadius","legend","zIndex","height","background","left","transform","LegendWrapper","classes","Box","className","Typography","variant","component","getQuestionsThunk","createAsyncThunk","params","a","applicantAPI","language_id","rank_id","getInterviewQuestionThunk","thunkAPI","data","applyPosition","console","log","success","dispatch","setApplicantInfo","applicant","questions","getInterviewDataThunk","id","applicantDataInit","name","age","email","phone","address","time","status","note","applicantInfo","candidate_question","interviewQuestions","map","element","question","candidate_id","questionStack","language","base","focus","advanced","Object","keys","forEach","key","question_id","split","setInterviewData","personalDetail","label","render","required","FormInput","errors","handleBlur","handleChange","touched","values","readOnly","FormControl","fullWidth","error","Boolean","InputLabel","htmlFor","join","OutlinedInput","value","onBlur","onChange","inputProps","FormHelperText","memo","ApplicantForm","Date","toISOString","interviewing","intl","useIntl","theme","useTheme","useDispatch","matchDownMD","useMediaQuery","breakpoints","down","useSelector","state","ranks","rank","axios","all","axiosServices","get","then","res","getLanguageListSuccess","getRanksListSuccess","enableReinitialize","initialValues","validationSchema","Yup","shape","of","rank_advanced_id","onSubmit","setSubmitting","handleSubmit","setFieldValue","isSubmitting","noValidate","row","Stack","spacing","sx","paddingBottom","item","formatMessage","index","alignItems","flexGrow","Autocomplete","options","event","find","getOptionLabel","option","renderInput","TextField","placeholder","Button","color","onClick","filter","minWidth","uuidv4","justifyContent","concat","marginTop","mt","md","sm","disableElevation","disabled","size","itemHovered","cursor","backgroundColor","QuestionTag","Paper","question_content","RadioGroup","e","handleAnswerStatus","Number","target","FormControlLabel","control","Radio","labelPlacement","QuestionStack","onClickAddButton","onClickDeleteButton","marginBottom","QuestionList","questionList","useState","searchQuestion","useEffect","AddApplicantReference","history","useParams","navigate","useNavigate","applicantInit","activeItem","MainCard","title","length","candidateQuestions","axiosPut","process","axiosPost","submitInfo"],"mappings":"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","file":"static/js/20.47ec50e9.chunk.js","sourcesContent":["// THIRD-PARTY\r\nimport React, { Ref } from 'react';\r\nimport { motion, useCycle } from 'framer-motion';\r\n\r\ninterface ScaleProps {\r\n  hover: number | string | undefined;\r\n  tap: number | string | undefined;\r\n}\r\n\r\ninterface AnimateButtonProps {\r\n  children?: React.ReactNode;\r\n  type?: 'slide' | 'scale' | 'rotate';\r\n  direction?: 'up' | 'down' | 'left' | 'right';\r\n  offset?: number;\r\n  scale?: ScaleProps;\r\n}\r\n\r\nconst AnimateButton = React.forwardRef(({ children, type, direction, offset, scale }: AnimateButtonProps, ref: Ref<HTMLDivElement>) => {\r\n  let offset1;\r\n  let offset2;\r\n  switch (direction) {\r\n    case 'up':\r\n    case 'left':\r\n      offset1 = offset;\r\n      offset2 = 0;\r\n      break;\r\n    case 'right':\r\n    case 'down':\r\n    default:\r\n      offset1 = 0;\r\n      offset2 = offset;\r\n      break;\r\n  }\r\n\r\n  const [x, cycleX] = useCycle(offset1, offset2);\r\n  const [y, cycleY] = useCycle(offset1, offset2);\r\n\r\n  switch (type) {\r\n    case 'rotate':\r\n      return (\r\n        <motion.div\r\n          ref={ref}\r\n          animate={{ rotate: 360 }}\r\n          transition={{\r\n            repeat: Infinity,\r\n            repeatType: 'loop',\r\n            duration: 2,\r\n            repeatDelay: 0\r\n          }}\r\n        >\r\n          {children}\r\n        </motion.div>\r\n      );\r\n    case 'slide':\r\n      if (direction === 'up' || direction === 'down') {\r\n        return (\r\n          <motion.div ref={ref} animate={{ y: y !== undefined ? y : '' }} onHoverEnd={() => cycleY()} onHoverStart={() => cycleY()}>\r\n            {children}\r\n          </motion.div>\r\n        );\r\n      }\r\n      return (\r\n        <motion.div ref={ref} animate={{ x: x !== undefined ? x : '' }} onHoverEnd={() => cycleX()} onHoverStart={() => cycleX()}>\r\n          {children}\r\n        </motion.div>\r\n      );\r\n\r\n    case 'scale':\r\n    default:\r\n      if (typeof scale === 'number') {\r\n        scale = {\r\n          hover: scale,\r\n          tap: scale\r\n        };\r\n      }\r\n      return (\r\n        <motion.div ref={ref} whileHover={{ scale: scale?.hover }} whileTap={{ scale: scale?.tap }}>\r\n          {children}\r\n        </motion.div>\r\n      );\r\n  }\r\n});\r\n\r\nAnimateButton.defaultProps = {\r\n  type: 'scale',\r\n  offset: 10,\r\n  direction: 'right',\r\n  scale: {\r\n    hover: 1,\r\n    tap: 0.9\r\n  }\r\n};\r\n\r\nexport default AnimateButton;\r\n","// THIRD-PARTY\r\nimport { Box, Typography } from '@mui/material';\r\nimport { makeStyles } from '@mui/styles';\r\nimport { ReactElement } from 'react';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    position: 'relative',\r\n    width: '100%',\r\n    margin: '2em 0',\r\n    padding: '1em',\r\n    border: 'solid 1px',\r\n    borderColor: '#bdbdbd',\r\n    borderRadius: '4px'\r\n  },\r\n  legend: {\r\n    zIndex: 1,\r\n    position: 'absolute',\r\n    width: 'fit-content',\r\n    height: '24px',\r\n    background: 'white',\r\n    padding: '0.25em 0.5em',\r\n    left: '10px',\r\n    transform: 'translate(0, -125%)'\r\n  }\r\n});\r\n\r\ninterface Props {\r\n  children: ReactElement;\r\n  legend?: string;\r\n}\r\n\r\nconst LegendWrapper = ({ children, legend }: Props) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Box className={classes.root}>\r\n      {legend && (\r\n        <Typography variant=\"h4\" component=\"h4\" className={classes.legend}>\r\n          {legend}\r\n        </Typography>\r\n      )}\r\n      {children}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default LegendWrapper;\r\n","import { dispatch } from 'store';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { applicantAPI, setApplicantInfo, setQuestions, setInterviewData } from './applicantReferences';\r\nimport { ApplicantInfo } from 'types/applicantData';\r\nimport { QuestionType } from 'types/question';\r\n\r\n// export const applicantReferenceInit = createAsyncThunk('applicantReferences/applicantReferenceInit', async (applicantId: string) => {\r\n//   const data = await applicantAPI.applicantReferenceInit(applicantId);\r\n//   return data && dispatch(setApplicantInfo(data));\r\n// });\r\n\r\nexport const getQuestionsThunk = createAsyncThunk(\r\n  'applicantReferences/getQuestionsThunk',\r\n  async (params: { language_id: number; rank_id: number }) => {\r\n    const data = await applicantAPI.getQuestionsThunk(params.language_id, params.rank_id);\r\n    // return data && dispatch(setQuestions(data.success));\r\n  }\r\n);\r\n\r\nexport const getInterviewQuestionThunk = createAsyncThunk(\r\n  'applicant/getInterviewQuestionThunk',\r\n  async (params: ApplicantInfo, thunkAPI) => {\r\n    const data = await applicantAPI.getInterviewQuestionThunk({ data: params.applyPosition });\r\n    console.log('data', data.success);\r\n    return data && dispatch(setApplicantInfo({ applicant: params, questions: data.success }));\r\n  }\r\n);\r\n\r\nexport const getInterviewDataThunk = createAsyncThunk('applicant/getInterviewDataThunk', async (id: string | number) => {\r\n  const applicantDataInit: ApplicantInfo = {\r\n    name: '',\r\n    age: '',\r\n    email: '',\r\n    phone: '',\r\n    address: '',\r\n    time: '',\r\n    applyPosition: [],\r\n    questions: [],\r\n    status: 1,\r\n    note: ''\r\n  };\r\n  type Keys = 'id' | 'name' | 'age' | 'email' | 'note' | 'time' | 'status';\r\n  const data = await applicantAPI.getInterviewDataThunk(id);\r\n  const applicantInfo = { ...data.success };\r\n  const { candidate_question } = applicantInfo;\r\n  const interviewQuestions: QuestionType[] =\r\n    candidate_question.map((element: any) => ({ ...element.question, status: element.status, candidate_id: element.id })) || [];\r\n  console.log(candidate_question);\r\n  const questionStack = {\r\n    language: '',\r\n    questions: {\r\n      base: interviewQuestions,\r\n      focus: [],\r\n      advanced: []\r\n    }\r\n  };\r\n  Object.keys(applicantDataInit).forEach((key) => {\r\n    if (applicantInfo && applicantInfo[key as Keys]) {\r\n      // @ts-ignore\r\n      applicantDataInit[key] = applicantInfo[key];\r\n    }\r\n  });\r\n  const questions = candidate_question.map((element: any) => ({\r\n    question_id: element.id,\r\n    status: element.status\r\n  }));\r\n  applicantDataInit.time = applicantDataInit.time.split('.')[0];\r\n  return data && dispatch(setInterviewData({ applicant: { ...applicantDataInit }, interviewQuestions: [{ ...questionStack }], questions }));\r\n});\r\n","const personalDetail = [\r\n  {\r\n    label: 'Information',\r\n    render: [\r\n      {\r\n        key: 'name',\r\n        label: 'Full Name',\r\n        type: 'text',\r\n        required: true\r\n      },\r\n      {\r\n        key: 'age',\r\n        label: 'Age',\r\n        type: 'number',\r\n        required: true\r\n      },\r\n      {\r\n        key: 'phone',\r\n        label: 'Phone Number',\r\n        type: 'tel',\r\n        required: true\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: 'Contact',\r\n    render: [\r\n      {\r\n        key: 'email',\r\n        label: 'Email',\r\n        type: 'email',\r\n        required: true\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: 'Address',\r\n    render: [\r\n      {\r\n        key: 'address',\r\n        label: 'Address',\r\n        type: 'text',\r\n        required: true\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: 'Interview Time',\r\n    render: [\r\n      {\r\n        key: 'time',\r\n        label: 'Interview Time',\r\n        type: 'datetime-local',\r\n        required: true\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: 'Note',\r\n    render: [\r\n      {\r\n        key: 'note',\r\n        label: 'Note',\r\n        type: 'text'\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport default personalDetail;\r\n","import React from 'react';\r\nimport {\r\n  Box,\r\n  Button,\r\n  FormControl,\r\n  FormHelperText,\r\n  InputLabel,\r\n  OutlinedInput,\r\n  Stack,\r\n  Autocomplete,\r\n  TextField,\r\n  useMediaQuery\r\n} from '@mui/material';\r\n\r\nconst FormInput = ({ errors, handleBlur, handleChange, touched, values, label, required, type, name, readOnly }: any) => (\r\n  <FormControl fullWidth error={Boolean(touched && errors && !readOnly)}>\r\n    <InputLabel htmlFor={`outlined-adornment-${label.split(' ').join('-')}`} required={required}>\r\n      {label}\r\n    </InputLabel>\r\n    <OutlinedInput\r\n      id={`outlined-adornment-${label.split(' ').join('-')}`}\r\n      type={type}\r\n      value={values}\r\n      name={name}\r\n      onBlur={handleBlur}\r\n      onChange={handleChange}\r\n      label={label}\r\n      inputProps={{}}\r\n      readOnly={readOnly}\r\n    />\r\n    {touched && errors && !readOnly && (\r\n      <FormHelperText error id=\"standard-weight-helper-text-last-name\">\r\n        {errors}\r\n      </FormHelperText>\r\n    )}\r\n  </FormControl>\r\n);\r\n\r\nexport default React.memo(FormInput);\r\n","// THIRD-PARTY\r\nimport * as React from 'react';\r\nimport { Formik } from 'formik';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport axios from 'axios';\r\nimport {\r\n  Box,\r\n  Button,\r\n  FormControl,\r\n  FormHelperText,\r\n  InputLabel,\r\n  OutlinedInput,\r\n  Stack,\r\n  Autocomplete,\r\n  TextField,\r\n  useMediaQuery\r\n} from '@mui/material';\r\nimport { IconX } from '@tabler/icons';\r\nimport * as Yup from 'yup';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { useIntl } from 'react-intl';\r\n\r\n// PROJECT IMPORTS\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport axiosServices from 'utils/axios';\r\nimport LegendWrapper from '../legend';\r\nimport { useDispatch, useSelector } from 'store';\r\nimport { getRanksListSuccess } from 'store/slices/rank';\r\nimport { getLanguageListSuccess } from 'store/slices/language';\r\nimport { ApplicantInfo } from 'types/applicantData';\r\nimport { getInterviewQuestionThunk } from 'store/slices/applicant/applicantAsyncAction';\r\nimport personalDetail from './layoutMapping';\r\n\r\n// TYPE IMPORTS\r\nimport { RankType } from 'types/rank';\r\nimport { Languages } from 'types/language';\r\nimport FormInput from './formInput';\r\n\r\ntype personalDetailType = 'name' | 'email' | 'phone' | 'address' | 'note';\r\n\r\nconst initialApplicantInfo: ApplicantInfo = {\r\n  name: '',\r\n  age: '',\r\n  email: 'denvl585@gmail.com',\r\n  phone: '',\r\n  address: '',\r\n  time: `${new Date().toISOString().split('T')[0]}T09:00`,\r\n  note: '',\r\n  applyPosition: [\r\n    {\r\n      rank_advanced_id: '',\r\n      language_id: '',\r\n      rank_id: ''\r\n    }\r\n  ]\r\n};\r\n\r\ninterface Props {\r\n  interviewing: boolean;\r\n}\r\n\r\nconst ApplicantForm = ({ interviewing }: Props) => {\r\n  const intl = useIntl();\r\n  const theme = useTheme();\r\n  const dispatch = useDispatch();\r\n  const matchDownMD = useMediaQuery(theme.breakpoints.down('md'));\r\n  const { language } = useSelector((state) => state.language);\r\n  const { ranks } = useSelector((state) => state.rank);\r\n  const { applicantInfo } = useSelector((state) => state.applicant);\r\n  React.useEffect(() => {\r\n    axios.all([axiosServices.get('/v1/languages/all'), axiosServices.get('/v1/ranks/all')]).then((res) => {\r\n      dispatch(getLanguageListSuccess({ data: res[0].data.success }));\r\n      dispatch(getRanksListSuccess({ data: res[1].data.success }));\r\n    });\r\n  }, [dispatch]);\r\n  return (\r\n    <Box>\r\n      <Formik\r\n        enableReinitialize\r\n        initialValues={applicantInfo}\r\n        validationSchema={Yup.object().shape({\r\n          name: Yup.string().required('First name is required'),\r\n          age: Yup.number().required('Age is required'),\r\n          email: Yup.string().email('Email is invalid').required('Email is required'),\r\n          phone: Yup.string().required('Phone is required'),\r\n          address: Yup.string().required('Address is required'),\r\n          applyPosition: Yup.array().of(\r\n            Yup.object().shape({\r\n              language_id: Yup.string().required('Language is required'),\r\n              rank_id: Yup.string().required('Rank is required'),\r\n              rank_advanced_id: Yup.string().required('Rank advanced is required')\r\n            })\r\n          )\r\n        })}\r\n        onSubmit={async (values, { setSubmitting }) => {\r\n          setSubmitting(true);\r\n          await dispatch(getInterviewQuestionThunk(values));\r\n          setSubmitting(false);\r\n        }}\r\n      >\r\n        {({ errors, handleBlur, handleChange, handleSubmit, setFieldValue, isSubmitting, touched, values }) => (\r\n          <form noValidate onSubmit={handleSubmit}>\r\n            {personalDetail.map((row: { label: string; render: { key: string; label: string; type: string; required?: boolean }[] }) => {\r\n              const { render } = row;\r\n              return (\r\n                <Stack direction={matchDownMD ? 'column' : 'row'} spacing={2} sx={{ paddingBottom: 2 }} key={row.label}>\r\n                  {render.map((item: { key: string; label: string; type: string; required?: boolean }) => {\r\n                    const key: personalDetailType = item.key as personalDetailType;\r\n                    const { label, type, required } = item;\r\n                    return (\r\n                      <FormInput\r\n                        key={`${row.label}-${label}`}\r\n                        touched={touched[key]}\r\n                        errors={errors[key]}\r\n                        label={label}\r\n                        type={type}\r\n                        values={values[key]}\r\n                        name={key}\r\n                        handleBlur={handleBlur}\r\n                        handleChange={handleChange}\r\n                        required={required}\r\n                        readOnly={interviewing}\r\n                      />\r\n                    );\r\n                  })}\r\n                </Stack>\r\n              );\r\n            })}\r\n\r\n            {!interviewing && (\r\n              <>\r\n                <LegendWrapper legend={intl.formatMessage({ id: 'apply-positions' })}>\r\n                  <Box>\r\n                    {values.applyPosition.map((item: { rank_advanced_id: string; language_id: string; rank_id: string }, index: number) => (\r\n                      <Stack direction=\"row\" alignItems=\"center\" spacing={2} sx={{ padding: '1em 0' }} key={uuidv4()}>\r\n                        <Stack direction={matchDownMD ? 'column' : 'row'} spacing={2} sx={{ flexGrow: 1 }}>\r\n                          <FormControl fullWidth error={Boolean(touched.applyPosition && errors.applyPosition)}>\r\n                            <Autocomplete\r\n                              options={language}\r\n                              onChange={(event, value) => {\r\n                                setFieldValue(`applyPosition[${index}].language_id`, (value && value.id) || '');\r\n                              }}\r\n                              value={language.find((element) => element.id == item.language_id)}\r\n                              getOptionLabel={(option: Languages) => option.name || ''}\r\n                              renderInput={(params) => (\r\n                                <TextField {...params} variant=\"standard\" label=\"Apply Position\" placeholder=\"Position\" />\r\n                              )}\r\n                              sx={{ flexGrow: 1 }}\r\n                            />\r\n                            {touched.applyPosition && errors.applyPosition && (\r\n                              <FormHelperText error id=\"standard-weight-helper-text-last-name\">\r\n                                {\r\n                                  // @ts-ignore:next-line\r\n                                  errors.applyPosition[index] && errors.applyPosition[index].language_id\r\n                                }\r\n                              </FormHelperText>\r\n                            )}\r\n                          </FormControl>\r\n                          <FormControl fullWidth error={Boolean(touched.applyPosition && errors.applyPosition)}>\r\n                            <Autocomplete\r\n                              options={ranks}\r\n                              onChange={(event, value) => {\r\n                                setFieldValue(`applyPosition[${index}].rank_id`, (value && value.id) || '');\r\n                              }}\r\n                              value={ranks.find((element) => element.id == item.rank_id)}\r\n                              getOptionLabel={(option: RankType) => option.name || ''}\r\n                              renderInput={(params) => <TextField {...params} variant=\"standard\" label=\"Rank\" placeholder=\"Rank\" />}\r\n                              sx={{ flexGrow: 1 }}\r\n                            />\r\n                            {touched.applyPosition && errors.applyPosition && (\r\n                              <FormHelperText error id=\"standard-weight-helper-text-last-name\">\r\n                                {\r\n                                  // @ts-ignore:next-line\r\n                                  errors.applyPosition[index] && errors.applyPosition[index].rank_id\r\n                                }\r\n                              </FormHelperText>\r\n                            )}\r\n                          </FormControl>\r\n                          <FormControl fullWidth error={Boolean(touched.applyPosition && errors.applyPosition)}>\r\n                            <Autocomplete\r\n                              options={ranks}\r\n                              onChange={(event, value) => {\r\n                                setFieldValue(`applyPosition[${index}].rank_advanced_id`, (value && value.id) || '');\r\n                              }}\r\n                              value={ranks.find((element) => element.id == item.rank_advanced_id)}\r\n                              getOptionLabel={(option: RankType) => option.name || ''}\r\n                              renderInput={(params) => (\r\n                                <TextField {...params} variant=\"standard\" label=\"Rank Advanced\" placeholder=\"Rank Advanced\" />\r\n                              )}\r\n                              sx={{ flexGrow: 1 }}\r\n                            />\r\n                            {touched.applyPosition && errors.applyPosition && (\r\n                              <FormHelperText error id=\"standard-weight-helper-text-last-name\">\r\n                                {\r\n                                  // @ts-ignore:next-line\r\n                                  errors.applyPosition[index] && errors.applyPosition[index].rank_advanced_id\r\n                                }\r\n                              </FormHelperText>\r\n                            )}\r\n                          </FormControl>\r\n                        </Stack>\r\n                        <Button\r\n                          variant=\"outlined\"\r\n                          color=\"error\"\r\n                          onClick={() => {\r\n                            setFieldValue(\r\n                              'applyPosition',\r\n                              values.applyPosition.filter((position) => position.language_id !== item.language_id)\r\n                            );\r\n                          }}\r\n                          sx={{ borderRadius: 9999, width: '28px', height: '28px', padding: '3px', minWidth: 'auto' }}\r\n                        >\r\n                          <IconX />\r\n                        </Button>\r\n                      </Stack>\r\n                    ))}\r\n                    <Stack direction=\"row\" justifyContent=\"center\" alignItems=\"center\" spacing={2}>\r\n                      <Button\r\n                        variant=\"outlined\"\r\n                        onClick={() => {\r\n                          setFieldValue(\r\n                            'applyPosition',\r\n                            values.applyPosition.concat({ rank_advanced_id: '', language_id: '', rank_id: '' })\r\n                          );\r\n                        }}\r\n                        sx={{ marginTop: 2 }}\r\n                      >\r\n                        + Add more position\r\n                      </Button>\r\n                    </Stack>\r\n                  </Box>\r\n                </LegendWrapper>\r\n                <Box sx={{ mt: 2, width: { md: 'fit-content', sm: '100%' } }}>\r\n                  <AnimateButton>\r\n                    <Button\r\n                      disableElevation\r\n                      disabled={isSubmitting}\r\n                      fullWidth\r\n                      size=\"large\"\r\n                      type=\"submit\"\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      sx={{ marginTop: 4 }}\r\n                    >\r\n                      Get Interview Question\r\n                    </Button>\r\n                  </AnimateButton>\r\n                </Box>\r\n              </>\r\n            )}\r\n          </form>\r\n        )}\r\n      </Formik>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ApplicantForm;\r\n","import { makeStyles } from '@mui/styles';\r\n\r\nconst useStyles = makeStyles({\r\n  itemHovered: {\r\n    cursor: 'pointer',\r\n    transition: '0.3s',\r\n    '&:hover': {\r\n      backgroundColor: '#c6f9ff'\r\n    },\r\n    '&:hover button': {\r\n      transition: '0.7s',\r\n      transform: 'translate(-5px, 0)'\r\n    }\r\n  }\r\n});\r\n\r\nexport default useStyles;\r\n","// THIRD-PARTY\r\nimport React from 'react';\r\nimport { Paper, Stack, Typography, FormControl, MenuItem, Select, FormControlLabel, FormLabel, Radio, RadioGroup } from '@mui/material';\r\n\r\n// PROJECT IMPORT\r\nimport useStyles from '../useStylesHook/makeStyle';\r\nimport { useDispatch } from 'store';\r\nimport { handleAnswerStatus } from 'store/slices/applicant/applicantReferences';\r\nimport { QuestionType } from 'types/question';\r\n\r\ninterface Props {\r\n  value: QuestionType;\r\n  interviewing?: boolean;\r\n}\r\n\r\nconst QuestionTag = ({ value, interviewing = false }: Props) => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <Paper className={classes.itemHovered} variant=\"outlined\" sx={{ padding: '1em' }}>\r\n      <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\r\n        <Typography variant=\"body1\" component=\"span\" sx={{ flexGrow: 1 }}>\r\n          {value.question_content}\r\n        </Typography>\r\n        {interviewing && (\r\n          <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\r\n            {/* <FormControl variant=\"standard\" sx={{ m: 1, minWidth: 100, height: 30 }}>\r\n              <Select\r\n                labelId=\"demo-simple-select-standard-label\"\r\n                id=\"demo-simple-select-standard\"\r\n                label=\"Evaluate\"\r\n                // @ts-ignore\r\n                value={typeof value.status === 'number' ? value.status + 1 : 3}\r\n                onChange={(e) => {\r\n                  dispatch(handleAnswerStatus({ id: value.candidate_id || 0, status: Number(e.target.value) - 1 }));\r\n                }}\r\n              >\r\n                <MenuItem value={3}>Skip</MenuItem>\r\n                <MenuItem value={1}>Fail</MenuItem>\r\n                <MenuItem value={2}>Pass</MenuItem>\r\n              </Select>\r\n            </FormControl> */}\r\n            <FormControl>\r\n              <RadioGroup\r\n                aria-labelledby=\"demo-radio-buttons-group-label\"\r\n                value={typeof value.status === 'number' ? value.status + 1 : 3}\r\n                onChange={(e) => {\r\n                  dispatch(handleAnswerStatus({ id: value.candidate_id || 0, status: Number(e.target.value) - 1 }));\r\n                }}\r\n                name=\"radio-buttons-group\"\r\n              >\r\n                <Stack direction=\"row\">\r\n                  <FormControlLabel value={3} control={<Radio />} label=\"Skip\" labelPlacement=\"top\" />\r\n                  <FormControlLabel value={1} control={<Radio />} label=\"Fail\" labelPlacement=\"top\" />\r\n                  <FormControlLabel value={2} control={<Radio />} label=\"Pass\" labelPlacement=\"top\" />\r\n                </Stack>\r\n              </RadioGroup>\r\n            </FormControl>\r\n            {/* <Button\r\n              color=\"success\"\r\n              sx={{ width: '24px', height: '24px', padding: 0, minWidth: 'auto', borderRadius: 99 }}\r\n              onClick={() => {\r\n                setShowNote(!showNote);\r\n              }}\r\n            >\r\n              <IconDotsVertical height={22} />\r\n            </Button> */}\r\n          </Stack>\r\n        )}\r\n      </Stack>\r\n      {/* {showNote && (\r\n        <textarea\r\n          value={value.notes}\r\n          onChange={(e) => {\r\n            // dispatch(handleInterviewQuestionNotes({ id: value.id, notes: e.target.value }));\r\n          }}\r\n          rows={3}\r\n          style={{ width: '100%', resize: 'none', marginTop: '1em', padding: '0.5em' }}\r\n          placeholder=\"Notes\"\r\n        />\r\n      )} */}\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default React.memo(QuestionTag);\r\n","// THIRD-PARTY\r\nimport { Stack, Typography, Box, Fab } from '@mui/material';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport React from 'react';\r\n\r\n// PROJECT IMPORTS\r\nimport QuestionTag from './questionTag';\r\nimport { useDispatch } from 'store';\r\nimport { questionsInit } from 'store/slices/applicant/applicantReferences';\r\n\r\n// TYPE IMPORTS\r\nimport { InterviewQuestions, QuestionStackInterface } from 'types/interviewQuestion';\r\nimport { QuestionType } from 'types/question';\r\n\r\ninterface Props {\r\n  questionStack: QuestionStackInterface;\r\n  onClickAddButton?: (type: string) => void;\r\n  onClickDeleteButton?: (type: string, id: number) => void;\r\n  interviewing?: boolean;\r\n}\r\n\r\nconst QuestionStack = ({ questionStack, interviewing, onClickAddButton, onClickDeleteButton }: Props) => {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <Box>\r\n      <Stack direction=\"row\" marginBottom={2}>\r\n        <Typography variant=\"h3\" component=\"h3\" sx={{ flexGrow: 1 }}>\r\n          {questionStack.language}\r\n        </Typography>\r\n      </Stack>\r\n      <Stack direction=\"column\" spacing={2}>\r\n        {Object.keys(questionStack.questions).map((key: string) =>\r\n          questionStack.questions[key as 'base' | 'advanced' | 'focus'].map((question: QuestionType) => (\r\n            <QuestionTag value={question} key={`${questionStack.language}-${question.id}`} interviewing={interviewing} />\r\n          ))\r\n        )}\r\n      </Stack>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default React.memo(QuestionStack);\r\n","// THIRD-PARTY\r\nimport { Stack } from '@mui/material';\r\nimport { useEffect, useState } from 'react';\r\n\r\n// PROJECT IMPORTS\r\nimport QuestionTag from './questionTag';\r\nimport QuestionStack from './questionStack';\r\nimport { getQuestionsThunk } from 'store/slices/applicant/applicantAsyncAction';\r\nimport { deleteInterviewQuestions, addInterviewQuestions } from 'store/slices/applicant/applicantReferences';\r\nimport { useDispatch } from 'store';\r\n\r\n// TYPE IMPORTS\r\nimport { QuestionType } from 'types/question';\r\nimport { QuestionStackInterface } from 'types/interviewQuestion';\r\n\r\ninterface Props {\r\n  questionList: QuestionStackInterface[];\r\n  interviewing: boolean;\r\n}\r\n\r\nconst QuestionList = ({ questionList, interviewing }: Props) => {\r\n  const [searchQuestion, setSearchQuestion] = useState({\r\n    rank_id: 0,\r\n    language_id: 0\r\n  });\r\n  const dispatch = useDispatch();\r\n  const deleteQuestion = (questionType: string, id: number) => {\r\n    dispatch(deleteInterviewQuestions({ questionType, id }));\r\n  };\r\n  const addQuestion = (questionType: string, languageT: string, question: QuestionType) => {\r\n    dispatch(addInterviewQuestions({ questionType, language: languageT, question }));\r\n  };\r\n  const getQuestions = (language_id: number, rank_id: number) => {\r\n    dispatch(getQuestionsThunk({ language_id, rank_id }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    searchQuestion.language_id && searchQuestion.rank_id && getQuestions(searchQuestion.language_id, searchQuestion.rank_id);\r\n  }, [searchQuestion]);\r\n\r\n  return (\r\n    <>\r\n      <Stack direction=\"column\" spacing={2} sx={{ border: 'solid 1px #e9e9e9', borderRadius: 5, padding: 2 }}>\r\n        {questionList.map((question, index) => (\r\n          <QuestionStack questionStack={question} key={question.language} interviewing={interviewing} />\r\n        ))}\r\n      </Stack>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuestionList;\r\n","// THIRD-PARTY\r\nimport { Box, Button, Stack } from '@mui/material';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useEffect, useState } from 'react';\r\nimport { useIntl } from 'react-intl';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n\r\n// PROJECT IMPORTS\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport ApplicantForm from './applicantInfo/applicantReferenceForm';\r\nimport QuestionList from './questionList/index';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport { activeItem } from 'store/slices/menu';\r\nimport { useSelector } from 'store';\r\nimport axiosServices from 'utils/axios';\r\nimport { applicantInit, setApplicantInfo, setInterviewData } from 'store/slices/applicant/applicantReferences';\r\nimport { ApplicantDataAPI, ApplicantInfo } from 'types/applicantData';\r\nimport { axiosPost, axiosPut } from 'utils/helpers/axios';\r\nimport { Candidates } from 'types/history';\r\nimport { QuestionType } from 'types/question';\r\nimport { getInterviewDataThunk } from 'store/slices/applicant/applicantAsyncAction';\r\n\r\nconst applicantDataInit: ApplicantInfo = {\r\n  name: '',\r\n  age: '',\r\n  email: '',\r\n  phone: '',\r\n  address: '',\r\n  time: '',\r\n  applyPosition: [],\r\n  questions: [],\r\n  status: 1,\r\n  note: ''\r\n};\r\n\r\ntype Keys = 'id' | 'name' | 'age' | 'email' | 'note' | 'time' | 'status';\r\n\r\nconst AddApplicantReference = () => {\r\n  const dispatch = useDispatch();\r\n  const applicant = useSelector((state) => state.applicant);\r\n  const { history } = useSelector((state) => state.history);\r\n  const { id } = useParams();\r\n  const intl = useIntl();\r\n  const navigate = useNavigate();\r\n  const [isSubmitting, setSubmitting] = useState(false);\r\n\r\n  const submitInfo = (type: boolean) => {\r\n    // type: true - add new applicant, false - send interview result\r\n    const data: ApplicantDataAPI = { ...applicant.applicantInfo };\r\n    const candidateQuestions =\r\n      (data.questions &&\r\n        data.questions.map((element) => ({\r\n          question_id: element.question_id,\r\n          status: element.status\r\n        }))) ||\r\n      [];\r\n    delete data.applyPosition;\r\n    data.status = 0;\r\n    setSubmitting(true);\r\n    if (type) {\r\n      data.status = 1;\r\n      delete data.questions;\r\n      axiosPut(`${process.env.REACT_APP_API_URL}/v1/client/candidates/${id}`, { ...data, candidateQuestions }, 'Success');\r\n    } else {\r\n      data.status = 0;\r\n      axiosPost(`${process.env.REACT_APP_API_URL}/v1/client/candidates`, data, 'Add applicant success').then((res: any) => {\r\n        console.log(res);\r\n        res && res.success.id && navigate(`/applicant/${res.success.id}`);\r\n      });\r\n    }\r\n    setSubmitting(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      dispatch(getInterviewDataThunk(id));\r\n    } else {\r\n      dispatch(applicantInit());\r\n    }\r\n    dispatch(activeItem(['applicant']));\r\n  }, [id, dispatch]);\r\n  return (\r\n    <Box>\r\n      <MainCard title={intl.formatMessage({ id: 'applicant-reference-form' })}>\r\n        <ApplicantForm interviewing={!!id} />\r\n      </MainCard>\r\n      {applicant.interviewQuestions.length > 0 && (\r\n        <>\r\n          <MainCard title={intl.formatMessage({ id: 'interview-questions' })} sx={{ margin: '1em 0' }}>\r\n            <Stack direction=\"column\" spacing={2}>\r\n              <QuestionList questionList={applicant.interviewQuestions} interviewing={!!id} />\r\n            </Stack>\r\n          </MainCard>\r\n          <MainCard sx={{ margin: '1em 0' }}>\r\n            <AnimateButton>\r\n              <Button\r\n                disableElevation\r\n                disabled={isSubmitting}\r\n                onClick={() => {\r\n                  submitInfo(!!id);\r\n                }}\r\n                fullWidth\r\n                size=\"large\"\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                {id ? 'Send Interview Result' : 'Submit'}\r\n              </Button>\r\n            </AnimateButton>\r\n          </MainCard>\r\n        </>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AddApplicantReference;\r\n"],"sourceRoot":""}